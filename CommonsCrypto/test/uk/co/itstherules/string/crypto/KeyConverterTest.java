package uk.co.itstherules.string.crypto;

import static org.junit.Assert.assertSame;

import java.math.BigInteger;

import javax.crypto.spec.SecretKeySpec;

import org.junit.Test;

import sun.security.rsa.RSAPrivateKeyImpl;
import sun.security.rsa.RSAPublicKeyImpl;
import uk.co.itstherules.string.crypto.Key.Scope;

public class KeyConverterTest {
	
	@Test
    public void canConvertBlowfish() throws Exception {
	    Key key = new Key(Scope.Public, "hey_you!");
	    KeyConverter unit = new KeyConverter();
	    assertSame(SecretKeySpec.class, unit.convert(key).getClass());
    }

	@Test
    public void canConvertPublicRSA() throws Exception {
	    Key key = new Key(Scope.Public, new BigInteger("18124198982030385910863190937966187505903793116067036501385262666613889970523164846532878369329828554799102242436389113427652172964141601312863116182600007129847471446274859911764523090463315125093487531549411959902780211523573369160751965999692912039825776871940296516817383307172679548040417967489553923320432081829223398757491786528845864685095538756306316516891496758277550081199733505321353596849346151931328889439934131495034705864271599314910276510684116640716961675797946532415057479992701734055969958343134117309728978054293322145080516396545613828881386256078048536303964087198867435684120930441679867359969"), new BigInteger("65537"));
	    KeyConverter unit = new KeyConverter();
	    assertSame(RSAPublicKeyImpl.class, unit.convert(key).getClass());
    }


	@Test(expected=RuntimeException.class)
    public void cannotConvertWrongLengthPublicRSA() throws Exception {
	    Key key = new Key(Scope.Public, new BigInteger("42"), new BigInteger("69"));
	    KeyConverter unit = new KeyConverter();
	    unit.convert(key);
    }


	@Test(expected=RuntimeException.class)
    public void cannotConvertWrongLengthPrivateRSA() throws Exception {
	    Key key = new Key(Scope.Private, new BigInteger("42"), new BigInteger("69"));
	    KeyConverter unit = new KeyConverter();
	    unit.convert(key);
    }
	
	@Test
    public void canConvertPrivateRSA() throws Exception {
	    Key key = new Key(
	    		Scope.Private, 
	    		new BigInteger("20999379187174718766932382863604391135012194246414429100299289797587961952795349366120162638232225259443220172739212453237027718754632913613461307572904527868583737818964613469397836814933370770505476839035415966860402292269927152198400415771121009723841596686380043492382733680965443138468598595231037846989416711933023671177465692244860067684495265440106479808649467006880632869165283469416084929640314272855289903220131547009156434539652821406182915865759134823256010215070107800526935080543884941583364795847842836034732702486876684969364766632557882721734286099926030477107778863274889117588941270356948397137969"), 
	    		new BigInteger("2955235580562314893684748571814750437740779522020847453988744522989361323994560434620538932395682035611102425395940559625938121215099552348397907132534270115079234842978937547160478034455810894858965361344334367797633250554733022944685399616354869351404413479995775533366586092429380076385795578738969773758040685116570215856989123265457535243618022461705869400352753178778148621511124158385139415122870605918332173150600996119807916290588189707878992974417377943292836744870835878475666765537152771386532119444984743613332202953825218803425792268405506107223324521016464623009431146643147672518117516311129464672257"));
	    KeyConverter unit = new KeyConverter();
	    assertSame(RSAPrivateKeyImpl.class, unit.convert(key).getClass());
    }
}