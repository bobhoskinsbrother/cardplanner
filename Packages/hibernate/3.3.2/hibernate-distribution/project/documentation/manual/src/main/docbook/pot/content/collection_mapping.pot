# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-06-10 21:02+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-xml2pot; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: collection_mapping.xml:29
#, no-c-format
msgid "Collection mapping"
msgstr ""

#. Tag: title
#: collection_mapping.xml:32
#, no-c-format
msgid "Persistent collections"
msgstr ""

#. Tag: para
#: collection_mapping.xml:34
#, no-c-format
msgid "Hibernate requires that persistent collection-valued fields be declared as an interface type. For example:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:39
#, no-c-format
msgid ""
      "<![CDATA[public class Product {\n"
      "    private String serialNumber;\n"
      "    private Set parts = new HashSet();\n"
      "    \n"
      "    public Set getParts() { return parts; }\n"
      "    void setParts(Set parts) { this.parts = parts; }\n"
      "    public String getSerialNumber() { return serialNumber; }\n"
      "    void setSerialNumber(String sn) { serialNumber = sn; }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:41
#, no-c-format
msgid "The actual interface might be <literal>java.util.Set</literal>, <literal>java.util.Collection</literal>, <literal>java.util.List</literal>, <literal>java.util.Map</literal>, <literal>java.util.SortedSet</literal>, <literal>java.util.SortedMap</literal> or anything you like (\"anything you like\" means you will have to write an implementation of <literal>org.hibernate.usertype.UserCollectionType</literal>.)"
msgstr ""

#. Tag: para
#: collection_mapping.xml:50
#, no-c-format
msgid "Notice how the instance variable was initialized with an instance of <literal>HashSet</literal>. This is the best way to initialize collection valued properties of newly instantiated (non-persistent) instances. When you make the instance persistent, by calling <literal>persist()</literal> for example, Hibernate will actually replace the <literal>HashSet</literal> with an instance of Hibernate's own implementation of <literal>Set</literal>. Be aware of the following errors:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:60
#, no-c-format
msgid ""
      "<![CDATA[Cat cat = new DomesticCat();\n"
      "Cat kitten = new DomesticCat();\n"
      "....\n"
      "Set kittens = new HashSet();\n"
      "kittens.add(kitten);\n"
      "cat.setKittens(kittens);\n"
      "session.persist(cat);\n"
      "kittens = cat.getKittens(); // Okay, kittens collection is a Set\n"
      "(HashSet) cat.getKittens(); // Error!]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:62
#, no-c-format
msgid "The persistent collections injected by Hibernate behave like <literal>HashMap</literal>, <literal>HashSet</literal>, <literal>TreeMap</literal>, <literal>TreeSet</literal> or <literal>ArrayList</literal>, depending on the interface type."
msgstr ""

#. Tag: para
#: collection_mapping.xml:69
#, no-c-format
msgid "Collections instances have the usual behavior of value types. They are automatically persisted when referenced by a persistent object and are automatically deleted when unreferenced. If a collection is passed from one persistent object to another, its elements might be moved from one table to another. Two entities cannot share a reference to the same collection instance. Due to the underlying relational model, collection-valued properties do not support null value semantics. Hibernate does not distinguish between a null collection reference and an empty collection."
msgstr ""

#. Tag: para
#: collection_mapping.xml:80
#, no-c-format
msgid "Use persistent collections the same way you use ordinary Java collections. However, please ensure you understand the semantics of bidirectional associations (these are discussed later)."
msgstr ""

#. Tag: title
#: collection_mapping.xml:89
#, no-c-format
msgid "Collection mappings"
msgstr ""

#. Tag: para
#: collection_mapping.xml:92
#, no-c-format
msgid "There are quite a range of mappings that can be generated for collections that cover many common relational models. We suggest you experiment with the schema generation tool so that you understand how various mapping declarations translate to database tables."
msgstr ""

#. Tag: para
#: collection_mapping.xml:99
#, no-c-format
msgid "The Hibernate mapping element used for mapping a collection depends upon the type of interface. For example, a <literal>&lt;set&gt;</literal> element is used for mapping properties of type <literal>Set</literal>."
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:105
#, no-c-format
msgid ""
      "<![CDATA[<class name=\"Product\">\n"
      "    <id name=\"serialNumber\" column=\"productSerialNumber\"/>\n"
      "    <set name=\"parts\">\n"
      "        <key column=\"productSerialNumber\" not-null=\"true\"/>\n"
      "        <one-to-many class=\"Part\"/>\n"
      "    </set>\n"
      "</class>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:107
#, no-c-format
msgid "Apart from <literal>&lt;set&gt;</literal>, there is also <literal>&lt;list&gt;</literal>, <literal>&lt;map&gt;</literal>, <literal>&lt;bag&gt;</literal>, <literal>&lt;array&gt;</literal> and <literal>&lt;primitive-array&gt;</literal> mapping elements. The <literal>&lt;map&gt;</literal> element is representative:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:132
#, no-c-format
msgid ""
      "<![CDATA[<map\n"
      "    name=\"propertyName\"\n"
      "    table=\"table_name\"\n"
      "    schema=\"schema_name\"\n"
      "    lazy=\"true|extra|false\"\n"
      "    inverse=\"true|false\"\n"
      "    cascade=\"all|none|save-update|delete|all-delete-orphan|delete-orphan\"\n"
      "    sort=\"unsorted|natural|comparatorClass\"\n"
      "    order-by=\"column_name asc|desc\"\n"
      "    where=\"arbitrary sql where condition\"\n"
      "    fetch=\"join|select|subselect\"\n"
      "    batch-size=\"N\"\n"
      "    access=\"field|property|ClassName\"\n"
      "    optimistic-lock=\"true|false\"\n"
      "    mutable=\"true|false\"\n"
      "    node=\"element-name|.\"\n"
      "    embed-xml=\"true|false\"\n"
      ">\n"
      "\n"
      "    <key .... />\n"
      "    <map-key .... />\n"
      "    <element .... />\n"
      "</map>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:135
#, no-c-format
msgid "<literal>name</literal>: the collection property name"
msgstr ""

#. Tag: para
#: collection_mapping.xml:140
#, no-c-format
msgid "<literal>table</literal> (optional - defaults to property name): the name of the collection table. It is not used for one-to-many associations."
msgstr ""

#. Tag: para
#: collection_mapping.xml:146
#, no-c-format
msgid "<literal>schema</literal> (optional): the name of a table schema to override the schema declared on the root element"
msgstr ""

#. Tag: para
#: collection_mapping.xml:152
#, no-c-format
msgid "<literal>lazy</literal> (optional - defaults to <literal>true</literal>): disables lazy fetching and specifies that the association is always eagerly fetched. It can also be used to enable \"extra-lazy\" fetching where most operations do not initialize the collection. This is suitable for large collections."
msgstr ""

#. Tag: para
#: collection_mapping.xml:161
#, no-c-format
msgid "<literal>inverse</literal> (optional - defaults to <literal>false</literal>): marks this collection as the \"inverse\" end of a bidirectional association."
msgstr ""

#. Tag: para
#: collection_mapping.xml:167
#, no-c-format
msgid "<literal>cascade</literal> (optional - defaults to <literal>none</literal>): enables operations to cascade to child entities."
msgstr ""

#. Tag: para
#: collection_mapping.xml:173
#, no-c-format
msgid "<literal>sort</literal> (optional): specifies a sorted collection with <literal>natural</literal> sort order or a given comparator class."
msgstr ""

#. Tag: para
#: collection_mapping.xml:179
#, no-c-format
msgid "<literal>order-by</literal> (optional, JDK1.4 only): specifies a table column or columns that define the iteration order of the <literal>Map</literal>, <literal>Set</literal> or bag, together with an optional <literal>asc</literal> or <literal>desc</literal>."
msgstr ""

#. Tag: para
#: collection_mapping.xml:186
#, no-c-format
msgid "<literal>where</literal> (optional): specifies an arbitrary SQL <literal>WHERE</literal> condition that is used when retrieving or removing the collection. This is useful if the collection needs to contain only a subset of the available data."
msgstr ""

#. Tag: para
#: collection_mapping.xml:193
#, no-c-format
msgid "<literal>fetch</literal> (optional, defaults to <literal>select</literal>): chooses between outer-join fetching, fetching by sequential select, and fetching by sequential subselect."
msgstr ""

#. Tag: para
#: collection_mapping.xml:200
#, no-c-format
msgid "<literal>batch-size</literal> (optional, defaults to <literal>1</literal>): specifies a \"batch size\" for lazily fetching instances of this collection."
msgstr ""

#. Tag: para
#: collection_mapping.xml:206
#, no-c-format
msgid "<literal>access</literal> (optional - defaults to <literal>property</literal>): the strategy Hibernate uses for accessing the collection property value."
msgstr ""

#. Tag: para
#: collection_mapping.xml:212
#, no-c-format
msgid "<literal>optimistic-lock</literal> (optional - defaults to <literal>true</literal>): specifies that changes to the state of the collection results in increments of the owning entity's version. For one-to-many associations you may want to disable this setting."
msgstr ""

#. Tag: para
#: collection_mapping.xml:220
#, no-c-format
msgid "<literal>mutable</literal> (optional - defaults to <literal>true</literal>): a value of <literal>false</literal> specifies that the elements of the collection never change. This allows for minor performance optimization in some cases."
msgstr ""

#. Tag: title
#: collection_mapping.xml:230
#, no-c-format
msgid "Collection foreign keys"
msgstr ""

#. Tag: para
#: collection_mapping.xml:232
#, no-c-format
msgid "Collection instances are distinguished in the database by the foreign key of the entity that owns the collection. This foreign key is referred to as the <emphasis>collection key column</emphasis>, or columns, of the collection table. The collection key column is mapped by the <literal>&lt;key&gt;</literal> element."
msgstr ""

#. Tag: para
#: collection_mapping.xml:240
#, no-c-format
msgid "There can be a nullability constraint on the foreign key column. For most collections, this is implied. For unidirectional one-to-many associations, the foreign key column is nullable by default, so you may need to specify <literal>not-null=\"true\"</literal>."
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:247
#, no-c-format
msgid "<![CDATA[<key column=\"productSerialNumber\" not-null=\"true\"/>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:249
#, no-c-format
msgid "The foreign key constraint can use <literal>ON DELETE CASCADE</literal>."
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:253
#, no-c-format
msgid "<![CDATA[<key column=\"productSerialNumber\" on-delete=\"cascade\"/>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:255
#, no-c-format
msgid "See the previous chapter for a full definition of the <literal>&lt;key&gt;</literal> element."
msgstr ""

#. Tag: title
#: collection_mapping.xml:263
#, no-c-format
msgid "Collection elements"
msgstr ""

#. Tag: para
#: collection_mapping.xml:265
#, no-c-format
msgid "Collections can contain almost any other Hibernate type, including: basic types, custom types, components and references to other entities. This is an important distinction. An object in a collection might be handled with \"value\" semantics (its life cycle fully depends on the collection owner), or it might be a reference to another entity with its own life cycle. In the latter case, only the \"link\" between the two objects is considered to be a state held by the collection."
msgstr ""

#. Tag: para
#: collection_mapping.xml:274
#, no-c-format
msgid "The contained type is referred to as the <emphasis>collection element type</emphasis>. Collection elements are mapped by <literal>&lt;element&gt;</literal> or <literal>&lt;composite-element&gt;</literal>, or in the case of entity references, with <literal>&lt;one-to-many&gt;</literal> or <literal>&lt;many-to-many&gt;</literal>. The first two map elements with value semantics, the next two are used to map entity associations."
msgstr ""

#. Tag: title
#: collection_mapping.xml:286
#, no-c-format
msgid "Indexed collections"
msgstr ""

#. Tag: para
#: collection_mapping.xml:288
#, no-c-format
msgid "All collection mappings, except those with set and bag semantics, need an <emphasis>index column</emphasis> in the collection table. An index column is a column that maps to an array index, or <literal>List</literal> index, or <literal>Map</literal> key. The index of a <literal>Map</literal> may be of any basic type, mapped with <literal>&lt;map-key&gt;</literal>. It can be an entity reference mapped with <literal>&lt;map-key-many-to-many&gt;</literal>, or it can be a composite type mapped with <literal>&lt;composite-map-key&gt;</literal>. The index of an array or list is always of type <literal>integer</literal> and is mapped using the <literal>&lt;list-index&gt;</literal> element. The mapped column contains sequential integers that are numbered from zero by default."
msgstr ""

#. Tag: sect2
#: collection_mapping.xml:299
#, no-c-format
msgid ""
      "<programlistingco> <areaspec> <area id=\"index1\" coords=\"2 45\"/> <area id=\"index2\" coords=\"3 45\"/> </areaspec> <programlisting><![CDATA[<list-index \n"
      "        column=\"column_name\"\n"
      "        base=\"0|1|...\"/>]]></programlisting> <calloutlist> <callout arearefs=\"index1\"> <para> <literal>column_name</literal> (required): the name of the column holding the collection index values. </para> </callout> <callout arearefs=\"index1\"> <para> <literal>base</literal> (optional - defaults to <literal>0</literal>): the value of the index column that corresponds to the first element of the list or array. </para> </callout> </calloutlist> </programlistingco> <programlistingco> <areaspec> <area id=\"mapkey1\" coords=\"2 45\"/> <area id=\"mapkey2\" coords=\"3 45\"/> <area id=\"mapkey3\" coords=\"4 45\"/> </areaspec> <programlisting><![CDATA[<map-key \n"
      "        column=\"column_name\"\n"
      "        formula=\"any SQL expression\"\n"
      "        type=\"type_name\"\n"
      "        node=\"@attribute-name\"\n"
      "        length=\"N\"/>]]></programlisting> <calloutlist> <callout arearefs=\"mapkey1\"> <para> <literal>column</literal> (optional): the name of the column holding the collection index values. </para> </callout> <callout arearefs=\"mapkey2\"> <para> <literal>formula</literal> (optional): a SQL formula used to evaluate the key of the map. </para> </callout> <callout arearefs=\"mapkey3\"> <para> <literal>type</literal> (required): the type of the map keys. </para> </callout> </calloutlist> </programlistingco> <programlistingco> <areaspec> <area id=\"indexmanytomany1\" coords=\"2 45\"/> <area id=\"indexmanytomany2\" coords=\"3 45\"/> <area id=\"indexmanytomany3\" coords=\"3 45\"/> </areaspec> <programlisting><![CDATA[<map-key-many-to-many\n"
      "        column=\"column_name\"\n"
      "        formula=\"any SQL expression\"\n"
      "        class=\"ClassName\"\n"
      "/>]]></programlisting> <calloutlist> <callout arearefs=\"indexmanytomany1\"> <para> <literal>column</literal> (optional): the name of the foreign key column for the collection index values. </para> </callout> <callout arearefs=\"indexmanytomany2\"> <para> <literal>formula</literal> (optional): a SQ formula used to evaluate the foreign key of the map key. </para> </callout> <callout arearefs=\"indexmanytomany3\"> <para> <literal>class</literal> (required): the entity class used as the map key. </para> </callout> </calloutlist> </programlistingco>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:380
#, no-c-format
msgid "If your table does not have an index column, and you still wish to use <literal>List</literal> as the property type, you can map the property as a Hibernate <emphasis>&lt;bag&gt;</emphasis>. A bag does not retain its order when it is retrieved from the database, but it can be optionally sorted or ordered."
msgstr ""

#. Tag: title
#: collection_mapping.xml:390
#, no-c-format
msgid "Collections of values and many-to-many associations"
msgstr ""

#. Tag: para
#: collection_mapping.xml:392
#, no-c-format
msgid "Any collection of values or many-to-many associations requires a dedicated <emphasis>collection table</emphasis> with a foreign key column or columns, <emphasis>collection element column</emphasis> or columns, and possibly an index column or columns."
msgstr ""

#. Tag: para
#: collection_mapping.xml:399
#, no-c-format
msgid "For a collection of values use the <literal>&lt;element&gt;</literal> tag. For example:"
msgstr ""

#. Tag: sect2
#: collection_mapping.xml:401
#, no-c-format
msgid ""
      "<programlistingco> <areaspec> <area id=\"element1b\" coords=\"2 50\"/> <area id=\"element2b\" coords=\"3 50\"/> <area id=\"element3b\" coords=\"4 50\"/> </areaspec> <programlisting><![CDATA[<element\n"
      "        column=\"column_name\"\n"
      "        formula=\"any SQL expression\"\n"
      "        type=\"typename\"\n"
      "        length=\"L\"\n"
      "        precision=\"P\"\n"
      "        scale=\"S\"\n"
      "        not-null=\"true|false\"\n"
      "        unique=\"true|false\"\n"
      "        node=\"element-name\"\n"
      "/>]]></programlisting> <calloutlist> <callout arearefs=\"element1b\"> <para> <literal>column</literal> (optional): the name of the column holding the collection element values. </para> </callout> <callout arearefs=\"element2b\"> <para> <literal>formula</literal> (optional): an SQL formula used to evaluate the element. </para> </callout> <callout arearefs=\"element3b\"> <para> <literal>type</literal> (required): the type of the collection element. </para> </callout> </calloutlist> </programlistingco> <para> A <emphasis>many-to-many association</emphasis> is specified using the <literal>&lt;many-to-many&gt;</literal> element. </para> <programlistingco> <areaspec> <area id=\"manytomany1\" coords=\"2 60\"/> <area id=\"manytomany2\" coords=\"3 60\"/> <area id=\"manytomany3\" coords=\"4 60\"/> <area id=\"manytomany4\" coords=\"5 60\"/> <area id=\"manytomany5\" coords=\"6 60\"/> <area id=\"manytomany6\" coords=\"7 60\"/> <area id=\"manytomany7\" coords=\"8 60\"/> <area id=\"manytomany8\" coords=\"9 60\"/> </areaspec> <programlisting><![CDATA[<many-to-many\n"
      "        column=\"column_name\"\n"
      "        formula=\"any SQL expression\"\n"
      "        class=\"ClassName\"\n"
      "        fetch=\"select|join\"\n"
      "        unique=\"true|false\"\n"
      "        not-found=\"ignore|exception\"\n"
      "        entity-name=\"EntityName\"\n"
      "        property-ref=\"propertyNameFromAssociatedClass\"\n"
      "        node=\"element-name\"\n"
      "        embed-xml=\"true|false\"\n"
      "    />]]></programlisting> <calloutlist> <callout arearefs=\"manytomany1\"> <para> <literal>column</literal> (optional): the name of the element foreign key column. </para> </callout> <callout arearefs=\"manytomany2\"> <para> <literal>formula</literal> (optional): an SQL formula used to evaluate the element foreign key value. </para> </callout> <callout arearefs=\"manytomany3\"> <para> <literal>class</literal> (required): the name of the associated class. </para> </callout> <callout arearefs=\"manytomany4\"> <para> <literal>fetch</literal> (optional - defaults to <literal>join</literal>): enables outer-join or sequential select fetching for this association. This is a special case; for full eager fetching in a single <literal>SELECT</literal> of an entity and its many-to-many relationships to other entities, you would enable <literal>join</literal> fetching,not only of the collection itself, but also with this attribute on the <literal>&lt;many-to-many&gt;</literal> nested element. </para> </callout> <callout arearefs=\"manytomany5\"> <para> <literal>unique</literal> (optional): enables the DDL generation of a unique constraint for the foreign-key column. This makes the association multiplicity effectively one-to-many. </para> </callout> <callout arearefs=\"manytomany6\"> <para> <literal>not-found</literal> (optional - defaults to <literal>exception</literal>): specifies how foreign keys that reference missing rows will be handled: <literal>ignore</literal> will treat a missing row as a null association. </para> </callout> <callout arearefs=\"manytomany7\"> <para> <literal>entity-name</literal> (optional): the entity name of the associated class, as an alternative to <literal>class</literal>. </para> </callout> <callout arearefs=\"manytomany8\"> <para> <literal>property-ref</literal> (optional): the name of a property of the associated class that is joined to this foreign key. If not specified, the primary key of the associated class is used. </para> </callout> </calloutlist> </programlistingco>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:506
#, no-c-format
msgid "Here are some examples."
msgstr ""

#. Tag: para
#: collection_mapping.xml:509
#, no-c-format
msgid "A set of strings:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:513
#, no-c-format
msgid ""
      "<![CDATA[<set name=\"names\" table=\"person_names\">\n"
      "    <key column=\"person_id\"/>\n"
      "    <element column=\"person_name\" type=\"string\"/>\n"
      "</set>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:515
#, no-c-format
msgid "A bag containing integers with an iteration order determined by the <literal>order-by</literal> attribute:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:520
#, no-c-format
msgid ""
      "<![CDATA[<bag name=\"sizes\" \n"
      "        table=\"item_sizes\" \n"
      "        order-by=\"size asc\">\n"
      "    <key column=\"item_id\"/>\n"
      "    <element column=\"size\" type=\"integer\"/>\n"
      "</bag>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:522
#, no-c-format
msgid "An array of entities, in this case, a many-to-many association:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:526
#, no-c-format
msgid ""
      "<![CDATA[<array name=\"addresses\" \n"
      "        table=\"PersonAddress\" \n"
      "        cascade=\"persist\">\n"
      "    <key column=\"personId\"/>\n"
      "    <list-index column=\"sortOrder\"/>\n"
      "    <many-to-many column=\"addressId\" class=\"Address\"/>\n"
      "</array>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:528
#, no-c-format
msgid "A map from string indices to dates:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:532
#, no-c-format
msgid ""
      "<![CDATA[<map name=\"holidays\" \n"
      "        table=\"holidays\" \n"
      "        schema=\"dbo\" \n"
      "        order-by=\"hol_name asc\">\n"
      "    <key column=\"id\"/>\n"
      "    <map-key column=\"hol_name\" type=\"string\"/>\n"
      "    <element column=\"hol_date\" type=\"date\"/>\n"
      "</map>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:534
#, no-c-format
msgid "A list of components (this is discussed in the next chapter):"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:538
#, no-c-format
msgid ""
      "<![CDATA[<list name=\"carComponents\" \n"
      "        table=\"CarComponents\">\n"
      "    <key column=\"carId\"/>\n"
      "    <list-index column=\"sortOrder\"/>\n"
      "    <composite-element class=\"CarComponent\">\n"
      "        <property name=\"price\"/>\n"
      "        <property name=\"type\"/>\n"
      "        <property name=\"serialNumber\" column=\"serialNum\"/>\n"
      "    </composite-element>\n"
      "</list>]]>"
msgstr ""

#. Tag: title
#: collection_mapping.xml:543
#, no-c-format
msgid "One-to-many associations"
msgstr ""

#. Tag: para
#: collection_mapping.xml:545
#, no-c-format
msgid "A <emphasis>one-to-many association</emphasis> links the tables of two classes via a foreign key with no intervening collection table. This mapping loses certain semantics of normal Java collections:"
msgstr ""

#. Tag: para
#: collection_mapping.xml:553
#, no-c-format
msgid "An instance of the contained entity class cannot belong to more than one instance of the collection."
msgstr ""

#. Tag: para
#: collection_mapping.xml:559
#, no-c-format
msgid "An instance of the contained entity class cannot appear at more than one value of the collection index."
msgstr ""

#. Tag: para
#: collection_mapping.xml:566
#, no-c-format
msgid "An association from <literal>Product</literal> to <literal>Part</literal> requires the existence of a foreign key column and possibly an index column to the <literal>Part</literal> table. A <literal>&lt;one-to-many&gt;</literal> tag indicates that this is a one-to-many association."
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:579
#, no-c-format
msgid ""
      "<![CDATA[<one-to-many \n"
      "        class=\"ClassName\"\n"
      "        not-found=\"ignore|exception\"\n"
      "        entity-name=\"EntityName\"\n"
      "        node=\"element-name\"\n"
      "        embed-xml=\"true|false\"\n"
      "    />]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:582
#, no-c-format
msgid "<literal>class</literal> (required): the name of the associated class."
msgstr ""

#. Tag: para
#: collection_mapping.xml:587
#, no-c-format
msgid "<literal>not-found</literal> (optional - defaults to <literal>exception</literal>): specifies how cached identifiers that reference missing rows will be handled. <literal>ignore</literal> will treat a missing row as a null association."
msgstr ""

#. Tag: para
#: collection_mapping.xml:594
#, no-c-format
msgid "<literal>entity-name</literal> (optional): the entity name of the associated class, as an alternative to <literal>class</literal>."
msgstr ""

#. Tag: para
#: collection_mapping.xml:602
#, no-c-format
msgid "The <literal>&lt;one-to-many&gt;</literal> element does not need to declare any columns. Nor is it necessary to specify the <literal>table</literal> name anywhere."
msgstr ""

#. Tag: para
#: collection_mapping.xml:609
#, no-c-format
msgid "If the foreign key column of a <literal>&lt;one-to-many&gt;</literal> association is declared <literal>NOT NULL</literal>, you must declare the <literal>&lt;key&gt;</literal> mapping <literal>not-null=\"true\"</literal> or <emphasis>use a bidirectional association</emphasis> with the collection mapping marked <literal>inverse=\"true\"</literal>. See the discussion of bidirectional associations later in this chapter for more information."
msgstr ""

#. Tag: para
#: collection_mapping.xml:619
#, no-c-format
msgid "The following example shows a map of <literal>Part</literal> entities by name, where <literal>partName</literal> is a persistent property of <literal>Part</literal>. Notice the use of a formula-based index:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:625
#, no-c-format
msgid ""
      "<![CDATA[<map name=\"parts\"\n"
      "        cascade=\"all\">\n"
      "    <key column=\"productId\" not-null=\"true\"/>\n"
      "    <map-key formula=\"partName\"/>\n"
      "    <one-to-many class=\"Part\"/>\n"
      "</map>]]>"
msgstr ""

#. Tag: title
#: collection_mapping.xml:631
#, no-c-format
msgid "Advanced collection mappings"
msgstr ""

#. Tag: title
#: collection_mapping.xml:634
#, no-c-format
msgid "Sorted collections"
msgstr ""

#. Tag: para
#: collection_mapping.xml:636
#, no-c-format
msgid "Hibernate supports collections implementing <literal>java.util.SortedMap</literal> and <literal>java.util.SortedSet</literal>. You must specify a comparator in the mapping file:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:641
#, no-c-format
msgid ""
      "<![CDATA[<set name=\"aliases\" \n"
      "            table=\"person_aliases\" \n"
      "            sort=\"natural\">\n"
      "    <key column=\"person\"/>\n"
      "    <element column=\"name\" type=\"string\"/>\n"
      "</set>\n"
      "\n"
      "<map name=\"holidays\" sort=\"my.custom.HolidayComparator\">\n"
      "    <key column=\"year_id\"/>\n"
      "    <map-key column=\"hol_name\" type=\"string\"/>\n"
      "    <element column=\"hol_date\" type=\"date\"/>\n"
      "</map>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:643
#, no-c-format
msgid "Allowed values of the <literal>sort</literal> attribute are <literal>unsorted</literal>, <literal>natural</literal> and the name of a class implementing <literal>java.util.Comparator</literal>."
msgstr ""

#. Tag: para
#: collection_mapping.xml:649
#, no-c-format
msgid "Sorted collections actually behave like <literal>java.util.TreeSet</literal> or <literal>java.util.TreeMap</literal>."
msgstr ""

#. Tag: para
#: collection_mapping.xml:654
#, no-c-format
msgid "If you want the database itself to order the collection elements, use the <literal>order-by</literal> attribute of <literal>set</literal>, <literal>bag</literal> or <literal>map</literal> mappings. This solution is only available under JDK 1.4 or higher and is implemented using <literal>LinkedHashSet</literal> or <literal>LinkedHashMap</literal>. This performs the ordering in the SQL query and not in the memory."
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:663
#, no-c-format
msgid ""
      "<![CDATA[<set name=\"aliases\" table=\"person_aliases\" order-by=\"lower(name) asc\">\n"
      "    <key column=\"person\"/>\n"
      "    <element column=\"name\" type=\"string\"/>\n"
      "</set>\n"
      "\n"
      "<map name=\"holidays\" order-by=\"hol_date, hol_name\">\n"
      "    <key column=\"year_id\"/>\n"
      "    <map-key column=\"hol_name\" type=\"string\"/>\n"
      "    <element column=\"hol_date type=\"date\"/>\n"
      "</map>]]>"
msgstr ""

#. Tag: title
#: collection_mapping.xml:666
#, no-c-format
msgid "Note"
msgstr ""

#. Tag: para
#: collection_mapping.xml:667
#, no-c-format
msgid "The value of the <literal>order-by</literal> attribute is an SQL ordering, not an HQL ordering."
msgstr ""

#. Tag: para
#: collection_mapping.xml:673
#, no-c-format
msgid "Associations can even be sorted by arbitrary criteria at runtime using a collection <literal>filter()</literal>:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:678
#, no-c-format
msgid "<![CDATA[sortedUsers = s.createFilter( group.getUsers(), \"order by this.name\" ).list();]]>"
msgstr ""

#. Tag: title
#: collection_mapping.xml:683
#, no-c-format
msgid "Bidirectional associations"
msgstr ""

#. Tag: para
#: collection_mapping.xml:685
#, no-c-format
msgid "A <emphasis>bidirectional association</emphasis> allows navigation from both \"ends\" of the association. Two kinds of bidirectional association are supported:"
msgstr ""

#. Tag: term
#: collection_mapping.xml:692
#, no-c-format
msgid "one-to-many"
msgstr ""

#. Tag: para
#: collection_mapping.xml:694
#, no-c-format
msgid "set or bag valued at one end and single-valued at the other"
msgstr ""

#. Tag: term
#: collection_mapping.xml:700
#, no-c-format
msgid "many-to-many"
msgstr ""

#. Tag: para
#: collection_mapping.xml:702
#, no-c-format
msgid "set or bag valued at both ends"
msgstr ""

#. Tag: para
#: collection_mapping.xml:711
#, no-c-format
msgid "You can specify a bidirectional many-to-many association by mapping two many-to-many associations to the same database table and declaring one end as <emphasis>inverse</emphasis>. You cannot select an indexed collection."
msgstr ""

#. Tag: para
#: collection_mapping.xml:718
#, no-c-format
msgid "Here is an example of a bidirectional many-to-many association that illustrates how each category can have many items and each item can be in many categories:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:723
#, no-c-format
msgid ""
      "<![CDATA[<class name=\"Category\">\n"
      "    <id name=\"id\" column=\"CATEGORY_ID\"/>\n"
      "    ...\n"
      "    <bag name=\"items\" table=\"CATEGORY_ITEM\">\n"
      "        <key column=\"CATEGORY_ID\"/>\n"
      "        <many-to-many class=\"Item\" column=\"ITEM_ID\"/>\n"
      "    </bag>\n"
      "</class>\n"
      "\n"
      "<class name=\"Item\">\n"
      "    <id name=\"id\" column=\"ITEM_ID\"/>\n"
      "    ...\n"
      "\n"
      "    <!-- inverse end -->\n"
      "    <bag name=\"categories\" table=\"CATEGORY_ITEM\" inverse=\"true\">\n"
      "        <key column=\"ITEM_ID\"/>\n"
      "        <many-to-many class=\"Category\" column=\"CATEGORY_ID\"/>\n"
      "    </bag>\n"
      "</class>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:725
#, no-c-format
msgid "Changes made only to the inverse end of the association are <emphasis>not</emphasis> persisted. This means that Hibernate has two representations in memory for every bidirectional association: one link from A to B and another link from B to A. This is easier to understand if you think about the Java object model and how a many-to-many relationship in Javais created:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:733
#, no-c-format
msgid ""
      "<![CDATA[\n"
      "category.getItems().add(item);          // The category now \"knows\" about the relationship\n"
      "item.getCategories().add(category);     // The item now \"knows\" about the relationship\n"
      "\n"
      "session.persist(item);                   // The relationship won't be saved!\n"
      "session.persist(category);               // The relationship will be saved]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:735
#, no-c-format
msgid "The non-inverse side is used to save the in-memory representation to the database."
msgstr ""

#. Tag: para
#: collection_mapping.xml:739
#, no-c-format
msgid "You can define a bidirectional one-to-many association by mapping a one-to-many association to the same table column(s) as a many-to-one association and declaring the many-valued end <literal>inverse=\"true\"</literal>."
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:745
#, no-c-format
msgid ""
      "<![CDATA[<class name=\"Parent\">\n"
      "    <id name=\"id\" column=\"parent_id\"/>\n"
      "    ....\n"
      "    <set name=\"children\" inverse=\"true\">\n"
      "        <key column=\"parent_id\"/>\n"
      "        <one-to-many class=\"Child\"/>\n"
      "    </set>\n"
      "</class>\n"
      "\n"
      "<class name=\"Child\">\n"
      "    <id name=\"id\" column=\"child_id\"/>\n"
      "    ....\n"
      "    <many-to-one name=\"parent\" \n"
      "        class=\"Parent\" \n"
      "        column=\"parent_id\"\n"
      "        not-null=\"true\"/>\n"
      "</class>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:747
#, no-c-format
msgid "Mapping one end of an association with <literal>inverse=\"true\"</literal> does not affect the operation of cascades as these are orthogonal concepts."
msgstr ""

#. Tag: title
#: collection_mapping.xml:755
#, no-c-format
msgid "Bidirectional associations with indexed collections"
msgstr ""

#. Tag: para
#: collection_mapping.xml:756
#, no-c-format
msgid "A bidirectional association where one end is represented as a <literal>&lt;list&gt;</literal> or <literal>&lt;map&gt;</literal>, requires special consideration. If there is a property of the child class that maps to the index column you can use <literal>inverse=\"true\"</literal> on the collection mapping:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:763
#, no-c-format
msgid ""
      "<![CDATA[<class name=\"Parent\">\n"
      "    <id name=\"id\" column=\"parent_id\"/>\n"
      "    ....\n"
      "    <map name=\"children\" inverse=\"true\">\n"
      "        <key column=\"parent_id\"/>\n"
      "        <map-key column=\"name\" \n"
      "            type=\"string\"/>\n"
      "        <one-to-many class=\"Child\"/>\n"
      "    </map>\n"
      "</class>\n"
      "\n"
      "<class name=\"Child\">\n"
      "    <id name=\"id\" column=\"child_id\"/>\n"
      "    ....\n"
      "    <property name=\"name\" \n"
      "        not-null=\"true\"/>\n"
      "    <many-to-one name=\"parent\" \n"
      "        class=\"Parent\" \n"
      "        column=\"parent_id\"\n"
      "        not-null=\"true\"/>\n"
      "</class>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:765
#, no-c-format
msgid "If there is no such property on the child class, the association cannot be considered truly bidirectional. That is, there is information available at one end of the association that is not available at the other end. In this case, you cannot map the collection <literal>inverse=\"true\"</literal>. Instead, you could use the following mapping:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:772
#, no-c-format
msgid ""
      "<![CDATA[<class name=\"Parent\">\n"
      "    <id name=\"id\" column=\"parent_id\"/>\n"
      "    ....\n"
      "    <map name=\"children\">\n"
      "        <key column=\"parent_id\"\n"
      "            not-null=\"true\"/>\n"
      "        <map-key column=\"name\" \n"
      "            type=\"string\"/>\n"
      "        <one-to-many class=\"Child\"/>\n"
      "    </map>\n"
      "</class>\n"
      "\n"
      "<class name=\"Child\">\n"
      "    <id name=\"id\" column=\"child_id\"/>\n"
      "    ....\n"
      "    <many-to-one name=\"parent\" \n"
      "        class=\"Parent\" \n"
      "        column=\"parent_id\"\n"
      "        insert=\"false\"\n"
      "        update=\"false\"\n"
      "        not-null=\"true\"/>\n"
      "</class>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:774
#, no-c-format
msgid "Note that in this mapping, the collection-valued end of the association is responsible for updates to the foreign key."
msgstr ""

#. Tag: title
#: collection_mapping.xml:782
#, no-c-format
msgid "Ternary associations"
msgstr ""

#. Tag: para
#: collection_mapping.xml:784
#, no-c-format
msgid "There are three possible approaches to mapping a ternary association. One approach is to use a <literal>Map</literal> with an association as its index:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:789
#, no-c-format
msgid ""
      "<![CDATA[<map name=\"contracts\">\n"
      "    <key column=\"employer_id\" not-null=\"true\"/>\n"
      "    <map-key-many-to-many column=\"employee_id\" class=\"Employee\"/>\n"
      "    <one-to-many class=\"Contract\"/>\n"
      "</map>]]>"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:791
#, no-c-format
msgid ""
      "<![CDATA[<map name=\"connections\">\n"
      "    <key column=\"incoming_node_id\"/>\n"
      "    <map-key-many-to-many column=\"outgoing_node_id\" class=\"Node\"/>\n"
      "    <many-to-many column=\"connection_id\" class=\"Connection\"/>\n"
      "</map>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:793
#, no-c-format
msgid "A second approach is to remodel the association as an entity class. This is the most common approach."
msgstr ""

#. Tag: para
#: collection_mapping.xml:798
#, no-c-format
msgid "A final alternative is to use composite elements, which will be discussed later."
msgstr ""

#. Tag: literal
#: collection_mapping.xml:805
#, no-c-format
msgid "Using an &lt;idbag&gt;"
msgstr ""

#. Tag: para
#: collection_mapping.xml:807
#, no-c-format
msgid "The majority of the many-to-many associations and collections of values shown previously all map to tables with composite keys, even though it has been have suggested that entities should have synthetic identifiers (surrogate keys). A pure association table does not seem to benefit much from a surrogate key, although a collection of composite values <emphasis>might</emphasis>. It is for this reason that Hibernate provides a feature that allows you to map many-to-many associations and collections of values to a table with a surrogate key."
msgstr ""

#. Tag: para
#: collection_mapping.xml:817
#, no-c-format
msgid "The <literal>&lt;idbag&gt;</literal> element lets you map a <literal>List</literal> (or <literal>Collection</literal>) with bag semantics. For example:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:822
#, no-c-format
msgid ""
      "<![CDATA[<idbag name=\"lovers\" table=\"LOVERS\">\n"
      "    <collection-id column=\"ID\" type=\"long\">\n"
      "        <generator class=\"sequence\"/>\n"
      "    </collection-id>\n"
      "    <key column=\"PERSON1\"/>\n"
      "    <many-to-many column=\"PERSON2\" class=\"Person\" fetch=\"join\"/>\n"
      "</idbag>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:824
#, no-c-format
msgid "An <literal>&lt;idbag&gt;</literal> has a synthetic id generator, just like an entity class. A different surrogate key is assigned to each collection row. Hibernate does not, however, provide any mechanism for discovering the surrogate key value of a particular row."
msgstr ""

#. Tag: para
#: collection_mapping.xml:831
#, no-c-format
msgid "The update performance of an <literal>&lt;idbag&gt;</literal> supersedes a regular <literal>&lt;bag&gt;</literal>. Hibernate can locate individual rows efficiently and update or delete them individually, similar to a list, map or set."
msgstr ""

#. Tag: para
#: collection_mapping.xml:837
#, no-c-format
msgid "In the current implementation, the <literal>native</literal> identifier generation strategy is not supported for <literal>&lt;idbag&gt;</literal> collection identifiers."
msgstr ""

#. Tag: title
#: collection_mapping.xml:861
#, no-c-format
msgid "Collection examples"
msgstr ""

#. Tag: para
#: collection_mapping.xml:863
#, no-c-format
msgid "This section covers collection examples."
msgstr ""

#. Tag: para
#: collection_mapping.xml:867
#, no-c-format
msgid "The following class has a collection of <literal>Child</literal> instances:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:871
#, no-c-format
msgid ""
      "<![CDATA[package eg;\n"
      "import java.util.Set;\n"
      "\n"
      "public class Parent {\n"
      "    private long id;\n"
      "    private Set children;\n"
      "\n"
      "    public long getId() { return id; }\n"
      "    private void setId(long id) { this.id=id; }\n"
      "\n"
      "    private Set getChildren() { return children; }\n"
      "    private void setChildren(Set children) { this.children=children; }\n"
      "\n"
      "    ....\n"
      "    ....\n"
      "}]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:873
#, no-c-format
msgid "If each child has, at most, one parent, the most natural mapping is a one-to-many association:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:879
#, no-c-format
msgid ""
      "<![CDATA[<hibernate-mapping>\n"
      "\n"
      "    <class name=\"Parent\">\n"
      "        <id name=\"id\">\n"
      "            <generator class=\"sequence\"/>\n"
      "        </id>\n"
      "        <set name=\"children\">\n"
      "            <key column=\"parent_id\"/>\n"
      "            <one-to-many class=\"Child\"/>\n"
      "        </set>\n"
      "    </class>\n"
      "\n"
      "    <class name=\"Child\">\n"
      "        <id name=\"id\">\n"
      "            <generator class=\"sequence\"/>\n"
      "        </id>\n"
      "        <property name=\"name\"/>\n"
      "    </class>\n"
      "\n"
      "</hibernate-mapping>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:881
#, no-c-format
msgid "This maps to the following table definitions:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:885
#, no-c-format
msgid ""
      "<![CDATA[create table parent ( id bigint not null primary key )\n"
      "create table child ( id bigint not null primary key, name varchar(255), parent_id bigint )\n"
      "alter table child add constraint childfk0 (parent_id) references parent]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:887
#, no-c-format
msgid "If the parent is <emphasis>required</emphasis>, use a bidirectional one-to-many association:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:892
#, no-c-format
msgid ""
      "<![CDATA[<hibernate-mapping>\n"
      "\n"
      "    <class name=\"Parent\">\n"
      "        <id name=\"id\">\n"
      "            <generator class=\"sequence\"/>\n"
      "        </id>\n"
      "        <set name=\"children\" inverse=\"true\">\n"
      "            <key column=\"parent_id\"/>\n"
      "            <one-to-many class=\"Child\"/>\n"
      "        </set>\n"
      "    </class>\n"
      "\n"
      "    <class name=\"Child\">\n"
      "        <id name=\"id\">\n"
      "            <generator class=\"sequence\"/>\n"
      "        </id>\n"
      "        <property name=\"name\"/>\n"
      "        <many-to-one name=\"parent\" class=\"Parent\" column=\"parent_id\" not-null=\"true\"/>\n"
      "    </class>\n"
      "\n"
      "</hibernate-mapping>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:894
#, no-c-format
msgid "Notice the <literal>NOT NULL</literal> constraint:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:898
#, no-c-format
msgid ""
      "<![CDATA[create table parent ( id bigint not null primary key )\n"
      "create table child ( id bigint not null\n"
      "                     primary key,\n"
      "                     name varchar(255),\n"
      "                     parent_id bigint not null )\n"
      "alter table child add constraint childfk0 (parent_id) references parent]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:900
#, no-c-format
msgid "Alternatively, if this association must be unidirectional you can declare the <literal>NOT NULL</literal> constraint on the <literal>&lt;key&gt;</literal> mapping:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:906
#, no-c-format
msgid ""
      "<![CDATA[<hibernate-mapping>\n"
      "\n"
      "    <class name=\"Parent\">\n"
      "        <id name=\"id\">\n"
      "            <generator class=\"sequence\"/>\n"
      "        </id>\n"
      "        <set name=\"children\">\n"
      "            <key column=\"parent_id\" not-null=\"true\"/>\n"
      "            <one-to-many class=\"Child\"/>\n"
      "        </set>\n"
      "    </class>\n"
      "\n"
      "    <class name=\"Child\">\n"
      "        <id name=\"id\">\n"
      "            <generator class=\"sequence\"/>\n"
      "        </id>\n"
      "        <property name=\"name\"/>\n"
      "    </class>\n"
      "\n"
      "</hibernate-mapping>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:908
#, no-c-format
msgid "On the other hand, if a child has multiple parents, a many-to-many association is appropriate:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:913
#, no-c-format
msgid ""
      "<![CDATA[<hibernate-mapping>\n"
      "\n"
      "    <class name=\"Parent\">\n"
      "        <id name=\"id\">\n"
      "            <generator class=\"sequence\"/>\n"
      "        </id>\n"
      "        <set name=\"children\" table=\"childset\">\n"
      "            <key column=\"parent_id\"/>\n"
      "            <many-to-many class=\"Child\" column=\"child_id\"/>\n"
      "        </set>\n"
      "    </class>\n"
      "\n"
      "    <class name=\"Child\">\n"
      "        <id name=\"id\">\n"
      "            <generator class=\"sequence\"/>\n"
      "        </id>\n"
      "        <property name=\"name\"/>\n"
      "    </class>\n"
      "\n"
      "</hibernate-mapping>]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:915
#, no-c-format
msgid "Table definitions:"
msgstr ""

#. Tag: programlisting
#: collection_mapping.xml:919
#, no-c-format
msgid ""
      "<![CDATA[create table parent ( id bigint not null primary key )\n"
      "create table child ( id bigint not null primary key, name varchar(255) )\n"
      "create table childset ( parent_id bigint not null,\n"
      "                        child_id bigint not null,\n"
      "                        primary key ( parent_id, child_id ) )\n"
      "alter table childset add constraint childsetfk0 (parent_id) references parent\n"
      "alter table childset add constraint childsetfk1 (child_id) references child]]>"
msgstr ""

#. Tag: para
#: collection_mapping.xml:921
#, no-c-format
msgid "For more examples and a complete explanation of a parent/child relationship mapping, see <xref linkend=\"example-parentchild\"/> for more information."
msgstr ""

#. Tag: para
#: collection_mapping.xml:926
#, no-c-format
msgid "Even more complex association mappings are covered in the next chapter."
msgstr ""

