#, fuzzy
msgid ""
msgstr ""
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-06-10 21:02+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Content-Type: text/plain; charset=UTF-8\n"

#. Tag: title
#: query_sql.xml:29
#, no-c-format
msgid "Native SQL"
msgstr "SQL Nativo"

#. Tag: para
#: query_sql.xml:31
#, fuzzy, no-c-format
msgid ""
"You can also express queries in the native SQL dialect of your database. "
"This is useful if you want to utilize database-specific features such as "
"query hints or the <literal>CONNECT</literal> keyword in Oracle. It also "
"provides a clean migration path from a direct SQL/JDBC based application to "
"Hibernate."
msgstr ""
"Puedes tambi&#x00e9;n expresar consultas en el dialecto SQL nativo de tu "
"base de datos. Esto es &#x00fa;til si quieres utilizar aspectos espec&#x00ed;"
"ficos de base de datos tal como consejos (hints) de consulta o la palabra "
"clave <literal>CONNECT</literal> en Oracle. Provee adem&#x00e1;s una clara "
"ruta de migraci&#x00f3;n desde una aplicaci&#x00f3;n basada en SQL/JDBC "
"directo a Hibernate."

#. Tag: para
#: query_sql.xml:37
#, fuzzy, no-c-format
msgid ""
"Hibernate3 allows you to specify handwritten SQL, including stored "
"procedures, for all create, update, delete, and load operations."
msgstr ""
"Hibernate3 te permite especificar SQL escrito a mano (incluyendo "
"procedimientos almacenados) para todas las operaciones de creaci&#x00f3;n, "
"actualizaci&#x00f3;n, borrado y carga."

#. Tag: title
#: query_sql.xml:41
#, no-c-format
msgid "Using a <literal>SQLQuery</literal>"
msgstr "Using a <literal>SQLQuery</literal>"

#. Tag: para
#: query_sql.xml:43
#, fuzzy, no-c-format
msgid ""
"Execution of native SQL queries is controlled via the <literal>SQLQuery</"
"literal> interface, which is obtained by calling <literal>Session."
"createSQLQuery()</literal>. The following sections describe how to use this "
"API for querying."
msgstr ""
"Execution of native SQL queries is controlled via the <literal>SQLQuery</"
"literal> interface, which is obtained by calling <literal>Session."
"createSQLQuery()</literal>. The following describes how to use this API for "
"querying."

#. Tag: title
#: query_sql.xml:49
#, no-c-format
msgid "Scalar queries"
msgstr "Scalar queries"

#. Tag: para
#: query_sql.xml:51
#, no-c-format
msgid "The most basic SQL query is to get a list of scalars (values)."
msgstr "The most basic SQL query is to get a list of scalars (values)."

#. Tag: programlisting
#: query_sql.xml:54
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT * FROM CATS\").list();\n"
"sess.createSQLQuery(\"SELECT ID, NAME, BIRTHDATE FROM CATS\").list();\n"
"]]>"
msgstr ""
"<![CDATA[sess.createSQLQuery(\"SELECT * FROM CATS\").list();\n"
"                                                                         sess."
"createSQLQuery(\"SELECT ID, NAME, BIRTHDATE FROM CATS\").list();\n"
"                                                                         ]]>"

#. Tag: para
#: query_sql.xml:56
#, fuzzy, no-c-format
msgid ""
"These will return a List of Object arrays (Object[]) with scalar values for "
"each column in the CATS table. Hibernate will use ResultSetMetadata to "
"deduce the actual order and types of the returned scalar values."
msgstr ""
"These will both return a List of Object arrays (Object[]) with scalar values "
"for each column in the CATS table. Hibernate will use ResultSetMetadata to "
"deduce the actual order and types of the returned scalar values."

#. Tag: para
#: query_sql.xml:61
#, fuzzy, no-c-format
msgid ""
"To avoid the overhead of using <literal>ResultSetMetadata</literal>, or "
"simply to be more explicit in what is returned, one can use "
"<literal>addScalar()</literal>:"
msgstr ""
"To avoid the overhead of using <literal>ResultSetMetadata</literal> or "
"simply to be more explicit in what is returned one can use <literal>addScalar"
"()</literal>."

#. Tag: programlisting
#: query_sql.xml:65
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT * FROM CATS\")\n"
" .addScalar(\"ID\", Hibernate.LONG)\n"
" .addScalar(\"NAME\", Hibernate.STRING)\n"
" .addScalar(\"BIRTHDATE\", Hibernate.DATE)\n"
"]]>"
msgstr ""
"<![CDATA[sess.createSQLQuery(\"SELECT * FROM CATS\")\n"
"                                                                         ."
"addScalar(\"ID\", Hibernate.LONG)\n"
"                                                                         ."
"addScalar(\"NAME\", Hibernate.STRING)\n"
"                                                                         ."
"addScalar(\"BIRTHDATE\", Hibernate.DATE)\n"
"                                                                         ]]>"

#. Tag: para
#: query_sql.xml:67 query_sql.xml:113 query_sql.xml:198 query_sql.xml:349
#, no-c-format
msgid "This query specified:"
msgstr "This query specified:"

#. Tag: para
#: query_sql.xml:71 query_sql.xml:117 query_sql.xml:353
#, no-c-format
msgid "the SQL query string"
msgstr "the SQL query string"

#. Tag: para
#: query_sql.xml:75
#, no-c-format
msgid "the columns and types to return"
msgstr "the columns and types to return"

#. Tag: para
#: query_sql.xml:79
#, fuzzy, no-c-format
msgid ""
"This will return Object arrays, but now it will not use "
"<literal>ResultSetMetadata</literal> but will instead explicitly get the ID, "
"NAME and BIRTHDATE column as respectively a Long, String and a Short from "
"the underlying resultset. This also means that only these three columns will "
"be returned, even though the query is using <literal>*</literal> and could "
"return more than the three listed columns."
msgstr ""
"This will still return Object arrays, but now it will not use "
"<literal>ResultSetMetdata</literal> but will instead explicitly get the ID, "
"NAME and BIRTHDATE column as respectively a Long, String and a Short from "
"the underlying resultset. This also means that only these three columns will "
"be returned, even though the query is using <literal>*</literal> and could "
"return more than the three listed columns."

#. Tag: para
#: query_sql.xml:87
#, no-c-format
msgid ""
"It is possible to leave out the type information for all or some of the "
"scalars."
msgstr ""
"It is possible to leave out the type information for all or some of the "
"scalars."

#. Tag: programlisting
#: query_sql.xml:90
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT * FROM CATS\")\n"
" .addScalar(\"ID\", Hibernate.LONG)\n"
" .addScalar(\"NAME\")\n"
" .addScalar(\"BIRTHDATE\")\n"
"]]>"
msgstr ""
"<![CDATA[sess.createSQLQuery(\"SELECT * FROM CATS\")\n"
"                                                                         ."
"addScalar(\"ID\", Hibernate.LONG)\n"
"                                                                         ."
"addScalar(\"NAME\")\n"
"                                                                         ."
"addScalar(\"BIRTHDATE\")\n"
"                                                                         ]]>"

#. Tag: para
#: query_sql.xml:92
#, fuzzy, no-c-format
msgid ""
"This is essentially the same query as before, but now "
"<literal>ResultSetMetaData</literal> is used to determine the type of NAME "
"and BIRTHDATE, where as the type of ID is explicitly specified."
msgstr ""
"This is essentially the same query as before, but now "
"<literal>ResultSetMetaData</literal> is used to decide the type of NAME and "
"BIRTHDATE where as the type of ID is explicitly specified."

#. Tag: para
#: query_sql.xml:96
#, fuzzy, no-c-format
msgid ""
"How the java.sql.Types returned from ResultSetMetaData is mapped to "
"Hibernate types is controlled by the Dialect. If a specific type is not "
"mapped, or does not result in the expected type, it is possible to customize "
"it via calls to <literal>registerHibernateType</literal> in the Dialect."
msgstr ""
"How the java.sql.Types returned from ResultSetMetaData is mapped to "
"Hibernate types is controlled by the Dialect. If a specific type is not "
"mapped or does not result in the expected type it is possible to customize "
"it via calls to <literal>registerHibernateType</literal> in the Dialect."

#. Tag: title
#: query_sql.xml:104
#, no-c-format
msgid "Entity queries"
msgstr "Entity queries"

#. Tag: para
#: query_sql.xml:106
#, no-c-format
msgid ""
"The above queries were all about returning scalar values, basically "
"returning the \"raw\" values from the resultset. The following shows how to "
"get entity objects from a native sql query via <literal>addEntity()</"
"literal>."
msgstr ""
"The above queries were all about returning scalar values, basically "
"returning the \"raw\" values from the resultset. The following shows how to "
"get entity objects from a native sql query via <literal>addEntity()</"
"literal>."

#. Tag: programlisting
#: query_sql.xml:111
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT * FROM CATS\").addEntity(Cat.class);\n"
"sess.createSQLQuery(\"SELECT ID, NAME, BIRTHDATE FROM CATS\").addEntity(Cat."
"class);\n"
"]]>"
msgstr ""
"<![CDATA[sess.createSQLQuery(\"SELECT * FROM CATS\").addEntity(Cat.class);\n"
"                                                                         sess."
"createSQLQuery(\"SELECT ID, NAME, BIRTHDATE FROM CATS\").addEntity(Cat."
"class);\n"
"                                                                         ]]>"

#. Tag: para
#: query_sql.xml:121
#, no-c-format
msgid "the entity returned by the query"
msgstr "the entity returned by the query"

#. Tag: para
#: query_sql.xml:125
#, no-c-format
msgid ""
"Assuming that Cat is mapped as a class with the columns ID, NAME and "
"BIRTHDATE the above queries will both return a List where each element is a "
"Cat entity."
msgstr ""
"Assuming that Cat is mapped as a class with the columns ID, NAME and "
"BIRTHDATE the above queries will both return a List where each element is a "
"Cat entity."

#. Tag: para
#: query_sql.xml:129
#, no-c-format
msgid ""
"If the entity is mapped with a <literal>many-to-one</literal> to another "
"entity it is required to also return this when performing the native query, "
"otherwise a database specific \"column not found\" error will occur. The "
"additional columns will automatically be returned when using the * notation, "
"but we prefer to be explicit as in the following example for a <literal>many-"
"to-one</literal> to a <literal>Dog</literal>:"
msgstr ""
"If the entity is mapped with a <literal>many-to-one</literal> to another "
"entity it is required to also return this when performing the native query, "
"otherwise a database specific \"column not found\" error will occur. The "
"additional columns will automatically be returned when using the * notation, "
"but we prefer to be explicit as in the following example for a <literal>many-"
"to-one</literal> to a <literal>Dog</literal>:"

#. Tag: programlisting
#: query_sql.xml:137
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT ID, NAME, BIRTHDATE, DOG_ID FROM CATS"
"\").addEntity(Cat.class);\n"
"]]>"
msgstr ""
"<![CDATA[sess.createSQLQuery(\"SELECT ID, NAME, BIRTHDATE, DOG_ID FROM CATS"
"\").addEntity(Cat.class);\n"
"                                                                         ]]>"

#. Tag: para
#: query_sql.xml:139
#, no-c-format
msgid "This will allow cat.getDog() to function properly."
msgstr "This will allow cat.getDog() to function properly."

#. Tag: title
#: query_sql.xml:143
#, no-c-format
msgid "Handling associations and collections"
msgstr "Handling associations and collections"

#. Tag: para
#: query_sql.xml:145
#, no-c-format
msgid ""
"It is possible to eagerly join in the <literal>Dog</literal> to avoid the "
"possible extra roundtrip for initializing the proxy. This is done via the "
"<literal>addJoin()</literal> method, which allows you to join in an "
"association or collection."
msgstr ""
"It is possible to eagerly join in the <literal>Dog</literal> to avoid the "
"possible extra roundtrip for initializing the proxy. This is done via the "
"<literal>addJoin()</literal> method, which allows you to join in an "
"association or collection."

#. Tag: programlisting
#: query_sql.xml:150
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT c.ID, NAME, BIRTHDATE, DOG_ID, D_ID, "
"D_NAME FROM CATS c, DOGS d WHERE c.DOG_ID = d.D_ID\")\n"
" .addEntity(\"cat\", Cat.class)\n"
" .addJoin(\"cat.dog\");\n"
"]]>"
msgstr ""
"<![CDATA[sess.createSQLQuery(\"SELECT c.ID, NAME, BIRTHDATE, DOG_ID, D_ID, "
"D_NAME FROM CATS c, DOGS d WHERE c.DOG_ID = d.D_ID\")\n"
"                                                                         ."
"addEntity(\"cat\", Cat.class)\n"
"                                                                         ."
"addJoin(\"cat.dog\");\n"
"                                                                         ]]>"

#. Tag: para
#: query_sql.xml:152
#, fuzzy, no-c-format
msgid ""
"In this example, the returned <literal>Cat</literal>'s will have their "
"<literal>dog</literal> property fully initialized without any extra "
"roundtrip to the database. Notice that you added an alias name (\"cat\") to "
"be able to specify the target property path of the join. It is possible to "
"do the same eager joining for collections, e.g. if the <literal>Cat</"
"literal> had a one-to-many to <literal>Dog</literal> instead."
msgstr ""
"In this example the returned <literal>Cat</literal>'s will have their "
"<literal>dog</literal> property fully initialized without any extra "
"roundtrip to the database. Notice that we added a alias name (\"cat\") to be "
"able to specify the target property path of the join. It is possible to do "
"the same eager joining for collections, e.g. if the <literal>Cat</literal> "
"had a one-to-many to <literal>Dog</literal> instead."

#. Tag: programlisting
#: query_sql.xml:160
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT ID, NAME, BIRTHDATE, D_ID, D_NAME, "
"CAT_ID FROM CATS c, DOGS d WHERE c.ID = d.CAT_ID\")\n"
" .addEntity(\"cat\", Cat.class)\n"
" .addJoin(\"cat.dogs\");\n"
"]]>"
msgstr ""
"<![CDATA[sess.createSQLQuery(\"SELECT ID, NAME, BIRTHDATE, D_ID, D_NAME, "
"CAT_ID FROM CATS c, DOGS d WHERE c.ID = d.CAT_ID\")\n"
"                                                                         ."
"addEntity(\"cat\", Cat.class)\n"
"                                                                         ."
"addJoin(\"cat.dogs\");\n"
"                                                                         ]]>"

#. Tag: para
#: query_sql.xml:162
#, fuzzy, no-c-format
msgid ""
"At this stage you are reaching the limits of what is possible with native "
"queries, without starting to enhance the sql queries to make them usable in "
"Hibernate. Problems can arise when returning multiple entities of the same "
"type or when the default alias/column names are not enough."
msgstr ""
"At this stage we are reaching the limits of what is possible with native "
"queries without starting to enhance the sql queries to make them usable in "
"Hibernate; the problems starts to arise when returning multiple entities of "
"the same type or when the default alias/column names are not enough."

#. Tag: title
#: query_sql.xml:170
#, no-c-format
msgid "Returning multiple entities"
msgstr "Returning multiple entities"

#. Tag: para
#: query_sql.xml:172
#, fuzzy, no-c-format
msgid ""
"Until now, the result set column names are assumed to be the same as the "
"column names specified in the mapping document. This can be problematic for "
"SQL queries that join multiple tables, since the same column names can "
"appear in more than one table."
msgstr ""
"Until now the result set column names are assumed to be the same as the "
"column names specified in the mapping document. This can be problematic for "
"SQL queries which join multiple tables, since the same column names may "
"appear in more than one table."

#. Tag: para
#: query_sql.xml:177
#, no-c-format
msgid ""
"Column alias injection is needed in the following query (which most likely "
"will fail):"
msgstr ""
"Column alias injection is needed in the following query (which most likely "
"will fail):"

#. Tag: programlisting
#: query_sql.xml:180
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT c.*, m.*  FROM CATS c, CATS m WHERE c."
"MOTHER_ID = c.ID\")\n"
" .addEntity(\"cat\", Cat.class)\n"
" .addEntity(\"mother\", Cat.class)\n"
"]]>"
msgstr ""
"<![CDATA[sess.createSQLQuery(\"SELECT c.*, m.*  FROM CATS c, CATS m WHERE c."
"MOTHER_ID = c.ID\")\n"
"                                                                         ."
"addEntity(\"cat\", Cat.class)\n"
"                                                                         ."
"addEntity(\"mother\", Cat.class)\n"
"                                                                         ]]>"

#. Tag: para
#: query_sql.xml:184
#, fuzzy, no-c-format
msgid ""
"The query was intended to return two Cat instances per row: a cat and its "
"mother. The query will, however, fail because there is a conflict of names; "
"the instances are mapped to the same column names. Also, on some databases "
"the returned column aliases will most likely be on the form \"c.ID\", \"c."
"NAME\", etc. which are not equal to the columns specified in the mappings "
"(\"ID\" and \"NAME\")."
msgstr ""
"The intention for this query is to return two Cat instances per row, a cat "
"and its mother. This will fail since there is a conflict of names since they "
"are mapped to the same column names and on some databases the returned "
"column aliases will most likely be on the form \"c.ID\", \"c.NAME\", etc. "
"which are not equal to the columns specificed in the mappings (\"ID\" and "
"\"NAME\")."

#. Tag: para
#: query_sql.xml:193
#, no-c-format
msgid "The following form is not vulnerable to column name duplication:"
msgstr "The following form is not vulnerable to column name duplication:"

#. Tag: programlisting
#: query_sql.xml:196
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT {cat.*}, {mother.*}  FROM CATS c, CATS "
"m WHERE c.MOTHER_ID = c.ID\")\n"
" .addEntity(\"cat\", Cat.class)\n"
" .addEntity(\"mother\", Cat.class)\n"
"]]>"
msgstr ""
"<![CDATA[sess.createSQLQuery(\"SELECT {cat.*}, {mother.*}  FROM CATS c, CATS "
"m WHERE c.MOTHER_ID = c.ID\")\n"
"                                                                         ."
"addEntity(\"cat\", Cat.class)\n"
"                                                                         ."
"addEntity(\"mother\", Cat.class)\n"
"                                                                         ]]>"

#. Tag: para
#: query_sql.xml:202
#, no-c-format
msgid ""
"the SQL query string, with placeholders for Hibernate to inject column "
"aliases"
msgstr ""
"the SQL query string, with placeholders for Hibernate to inject column "
"aliases"

#. Tag: para
#: query_sql.xml:207
#, no-c-format
msgid "the entities returned by the query"
msgstr "the entities returned by the query"

#. Tag: para
#: query_sql.xml:211
#, fuzzy, no-c-format
msgid ""
"The {cat.*} and {mother.*} notation used above is a shorthand for \"all "
"properties\". Alternatively, you can list the columns explicitly, but even "
"in this case Hibernate injects the SQL column aliases for each property. The "
"placeholder for a column alias is just the property name qualified by the "
"table alias. In the following example, you retrieve Cats and their mothers "
"from a different table (cat_log) to the one declared in the mapping "
"metadata. You can even use the property aliases in the where clause."
msgstr ""
"The {cat.*} and {mother.*} notation used above is a shorthand for \"all "
"properties\". Alternatively, you may list the columns explicity, but even in "
"this case we let Hibernate inject the SQL column aliases for each property. "
"The placeholder for a column alias is just the property name qualified by "
"the table alias. In the following example, we retrieve Cats and their "
"mothers from a different table (cat_log) to the one declared in the mapping "
"metadata. Notice that we may even use the property aliases in the where "
"clause if we like."

#. Tag: programlisting
#: query_sql.xml:220
#, no-c-format
msgid ""
"<![CDATA[String sql = \"SELECT ID as {c.id}, NAME as {c.name}, \" + \n"
"         \"BIRTHDATE as {c.birthDate}, MOTHER_ID as {c.mother}, {mother.*} "
"\" +\n"
"         \"FROM CAT_LOG c, CAT_LOG m WHERE {c.mother} = c.ID\";\n"
"\n"
"List loggedCats = sess.createSQLQuery(sql)\n"
"        .addEntity(\"cat\", Cat.class)\n"
"        .addEntity(\"mother\", Cat.class).list()\n"
"]]>"
msgstr ""
"<![CDATA[String sql = \"SELECT ID as {c.id}, NAME as {c.name}, \" + \n"
"                                                    \"BIRTHDATE as {c."
"birthDate}, MOTHER_ID as {c.mother}, {mother.*} \" +\n"
"                                                    \"FROM CAT_LOG c, "
"CAT_LOG m WHERE {c.mother} = c.ID\";\n"
"                                                    \n"
"                                                    List loggedCats = sess."
"createSQLQuery(sql)\n"
"                                                    .addEntity(\"cat\", Cat."
"class)\n"
"                                                    .addEntity(\"mother\", "
"Cat.class).list()\n"
"                                                    ]]>"

#. Tag: title
#: query_sql.xml:223
#, no-c-format
msgid "Alias and property references"
msgstr "Alias and property references"

#. Tag: para
#: query_sql.xml:225
#, fuzzy, no-c-format
msgid ""
"In most cases the above alias injection is needed. For queries relating to "
"more complex mappings, like composite properties, inheritance "
"discriminators, collections etc., you can use specific aliases that allow "
"Hibernate to inject the proper aliases."
msgstr ""
"For most cases the above alias injection is needed, but for queries relating "
"to more complex mappings like composite properties, inheritance "
"discriminators, collections etc. there are some specific aliases to use to "
"allow Hibernate to inject the proper aliases."

#. Tag: para
#: query_sql.xml:230
#, fuzzy, no-c-format
msgid ""
"The following table shows the different ways you can use the alias "
"injection. Please note that the alias names in the result are simply "
"examples; each alias will have a unique and probably different name when "
"used."
msgstr ""
"The following table shows the different possibilities of using the alias "
"injection. Note: the alias names in the result are examples, each alias will "
"have a unique and probably different name when used."

#. Tag: title
#: query_sql.xml:236
#, no-c-format
msgid "Alias injection names"
msgstr "Alias injection names"

#. Tag: entry
#: query_sql.xml:247
#, no-c-format
msgid "Description"
msgstr "Description"

#. Tag: entry
#: query_sql.xml:249
#, no-c-format
msgid "Syntax"
msgstr "Syntax"

#. Tag: entry
#: query_sql.xml:251
#, no-c-format
msgid "Example"
msgstr "Example"

#. Tag: entry
#: query_sql.xml:257
#, no-c-format
msgid "A simple property"
msgstr "A simple property"

#. Tag: literal
#: query_sql.xml:259
#, no-c-format
msgid "{[aliasname].[propertyname]"
msgstr "{[aliasname].[propertyname]"

#. Tag: literal
#: query_sql.xml:261
#, no-c-format
msgid "A_NAME as {item.name}"
msgstr "A_NAME as {item.name}"

#. Tag: entry
#: query_sql.xml:265
#, no-c-format
msgid "A composite property"
msgstr "A composite property"

#. Tag: literal
#: query_sql.xml:267
#, no-c-format
msgid "{[aliasname].[componentname].[propertyname]}"
msgstr "{[aliasname].[componentname].[propertyname]}"

#. Tag: literal
#: query_sql.xml:269
#, no-c-format
msgid "CURRENCY as {item.amount.currency}, VALUE as {item.amount.value}"
msgstr "CURRENCY as {item.amount.currency}, VALUE as {item.amount.value}"

#. Tag: entry
#: query_sql.xml:274
#, no-c-format
msgid "Discriminator of an entity"
msgstr "Discriminator of an entity"

#. Tag: literal
#: query_sql.xml:276
#, no-c-format
msgid "{[aliasname].class}"
msgstr "{[aliasname].class}"

#. Tag: literal
#: query_sql.xml:278
#, no-c-format
msgid "DISC as {item.class}"
msgstr "DISC as {item.class}"

#. Tag: entry
#: query_sql.xml:282
#, no-c-format
msgid "All properties of an entity"
msgstr "All properties of an entity"

#. Tag: literal
#: query_sql.xml:284 query_sql.xml:332
#, no-c-format
msgid "{[aliasname].*}"
msgstr "{[aliasname].*}"

#. Tag: literal
#: query_sql.xml:286
#, no-c-format
msgid "{item.*}"
msgstr "{item.*}"

#. Tag: entry
#: query_sql.xml:290
#, no-c-format
msgid "A collection key"
msgstr "A collection key"

#. Tag: literal
#: query_sql.xml:292
#, no-c-format
msgid "{[aliasname].key}"
msgstr "{[aliasname].key}"

#. Tag: literal
#: query_sql.xml:294
#, no-c-format
msgid "ORGID as {coll.key}"
msgstr "ORGID as {coll.key}"

#. Tag: entry
#: query_sql.xml:298
#, no-c-format
msgid "The id of an collection"
msgstr "The id of an collection"

#. Tag: literal
#: query_sql.xml:300
#, no-c-format
msgid "{[aliasname].id}"
msgstr "{[aliasname].id}"

#. Tag: literal
#: query_sql.xml:302
#, no-c-format
msgid "EMPID as {coll.id}"
msgstr "EMPID as {coll.id}"

#. Tag: entry
#: query_sql.xml:306
#, no-c-format
msgid "The element of an collection"
msgstr "The element of an collection"

#. Tag: literal
#: query_sql.xml:308
#, no-c-format
msgid "{[aliasname].element}"
msgstr "{[aliasname].element}"

#. Tag: literal
#: query_sql.xml:310
#, no-c-format
msgid "XID as {coll.element}"
msgstr "XID as {coll.element}"

#. Tag: entry
#: query_sql.xml:314
#, fuzzy, no-c-format
msgid "property of the element in the collection"
msgstr "roperty of the element in the collection"

#. Tag: literal
#: query_sql.xml:316
#, no-c-format
msgid "{[aliasname].element.[propertyname]}"
msgstr "{[aliasname].element.[propertyname]}"

#. Tag: literal
#: query_sql.xml:318
#, no-c-format
msgid "NAME as {coll.element.name}"
msgstr "NAME as {coll.element.name}"

#. Tag: entry
#: query_sql.xml:322
#, no-c-format
msgid "All properties of the element in the collection"
msgstr "All properties of the element in the collection"

#. Tag: literal
#: query_sql.xml:324
#, no-c-format
msgid "{[aliasname].element.*}"
msgstr "{[aliasname].element.*}"

#. Tag: literal
#: query_sql.xml:326
#, no-c-format
msgid "{coll.element.*}"
msgstr "{coll.element.*}"

#. Tag: entry
#: query_sql.xml:330
#, no-c-format
msgid "All properties of the the collection"
msgstr "All properties of the the collection"

#. Tag: literal
#: query_sql.xml:334
#, no-c-format
msgid "{coll.*}"
msgstr "{coll.*}"

#. Tag: title
#: query_sql.xml:343
#, no-c-format
msgid "Returning non-managed entities"
msgstr "Returning non-managed entities"

#. Tag: para
#: query_sql.xml:345
#, fuzzy, no-c-format
msgid ""
"It is possible to apply a ResultTransformer to native SQL queries, allowing "
"it to return non-managed entities."
msgstr ""
"It is possible to apply a ResultTransformer to native sql queries. Allowing "
"it to e.g. return non-managed entities."

#. Tag: programlisting
#: query_sql.xml:347
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT NAME, BIRTHDATE FROM CATS\")\n"
"        .setResultTransformer(Transformers.aliasToBean(CatDTO.class))]]>"
msgstr ""
"<![CDATA[sess.createSQLQuery(\"SELECT NAME, BIRTHDATE FROM CATS\")\n"
"                                                                         ."
"setResultTransformer(Transformers.aliasToBean(CatDTO.class))]]>"

#. Tag: para
#: query_sql.xml:357
#, no-c-format
msgid "a result transformer"
msgstr "a result transformer"

#. Tag: para
#: query_sql.xml:361
#, no-c-format
msgid ""
"The above query will return a list of <literal>CatDTO</literal> which has "
"been instantiated and injected the values of NAME and BIRTHNAME into its "
"corresponding properties or fields."
msgstr ""
"The above query will return a list of <literal>CatDTO</literal> which has "
"been instantiated and injected the values of NAME and BIRTHNAME into its "
"corresponding properties or fields."

#. Tag: title
#: query_sql.xml:368
#, no-c-format
msgid "Handling inheritance"
msgstr "Handling inheritance"

#. Tag: para
#: query_sql.xml:370
#, fuzzy, no-c-format
msgid ""
"Native SQL queries which query for entities that are mapped as part of an "
"inheritance must include all properties for the baseclass and all its "
"subclasses."
msgstr ""
"Native sql queries which query for entities that is mapped as part of an "
"inheritance must include all properties for the baseclass and all it "
"subclasses."

#. Tag: title
#: query_sql.xml:376
#, no-c-format
msgid "Parameters"
msgstr "Parameters"

#. Tag: para
#: query_sql.xml:378
#, fuzzy, no-c-format
msgid "Native SQL queries support positional as well as named parameters:"
msgstr "Native sql queries support positional as well as named parameters:"

#. Tag: programlisting
#: query_sql.xml:381
#, no-c-format
msgid ""
"<![CDATA[Query query = sess.createSQLQuery(\"SELECT * FROM CATS WHERE NAME "
"like ?\").addEntity(Cat.class);\n"
"List pusList = query.setString(0, \"Pus%\").list();\n"
"     \n"
"query = sess.createSQLQuery(\"SELECT * FROM CATS WHERE NAME like :name\")."
"addEntity(Cat.class);\n"
"List pusList = query.setString(\"name\", \"Pus%\").list();          ]]>"
msgstr ""
"<![CDATA[Query query = sess.createSQLQuery(\"SELECT * FROM CATS WHERE NAME "
"like ?\").addEntity(Cat.class);\n"
"                                                   List pusList = query."
"setString(0, \"Pus%\").list();\n"
"                                                   \n"
"                                                   query = sess."
"createSQLQuery(\"SELECT * FROM CATS WHERE NAME like :name\").addEntity(Cat."
"class);\n"
"                                                   List pusList = query."
"setString(\"name\", \"Pus%\").list();          ]]>"

#. Tag: title
#: query_sql.xml:389
#, no-c-format
msgid "Named SQL queries"
msgstr "Consultas SQL con nombre"

#. Tag: para
#: query_sql.xml:391
#, fuzzy, no-c-format
msgid ""
"Named SQL queries can be defined in the mapping document and called in "
"exactly the same way as a named HQL query. In this case, you do "
"<emphasis>not</emphasis> need to call <literal>addEntity()</literal>."
msgstr ""
"Las consultas SQL con nombre pueden definirse en el documento de mapeo y "
"llamadas exactamente en la misma forma en que a una consulta HQL con nombre. "
"En este caso, <emphasis>no</emphasis> necesitamos llamar a <literal>addEntity"
"()</literal>."

#. Tag: programlisting
#: query_sql.xml:396
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"persons\">\n"
"    <return alias=\"person\" class=\"eg.Person\"/>\n"
"    SELECT person.NAME AS {person.name},\n"
"           person.AGE AS {person.age},\n"
"           person.SEX AS {person.sex}\n"
"    FROM PERSON person\n"
"    WHERE person.NAME LIKE :namePattern\n"
"</sql-query>]]>"
msgstr ""
"<![CDATA[<sql-query name=\"persons\">\n"
"    <return alias=\"person\" class=\"eg.Person\"/>\n"
"    SELECT person.NAME AS {person.name},\n"
"           person.AGE AS {person.age},\n"
"           person.SEX AS {person.sex}\n"
"    FROM PERSON person \n"
"    WHERE person.NAME LIKE :namePattern\n"
"</sql-query>]]>"

#. Tag: programlisting
#: query_sql.xml:398
#, no-c-format
msgid ""
"<![CDATA[List people = sess.getNamedQuery(\"persons\")\n"
"    .setString(\"namePattern\", namePattern)\n"
"    .setMaxResults(50)\n"
"    .list();]]>"
msgstr ""
"<![CDATA[List people = sess.getNamedQuery(\"persons\")\n"
"    .setString(\"namePattern\", namePattern)\n"
"    .setMaxResults(50)\n"
"    .list();]]>"

#. Tag: para
#: query_sql.xml:400
#, fuzzy, no-c-format
msgid ""
"The <literal>&lt;return-join&gt;</literal> element is use to join "
"associations and the <literal>&lt;load-collection&gt;</literal> element is "
"used to define queries which initialize collections,"
msgstr ""
"Los elementos <literal>&lt;return-join&gt;</literal> y <literal>&lt;load-"
"collection&gt;</literal> se usan para unir asociaciones y definir consultas "
"que inicialicen colecciones, respectivamente."

#. Tag: programlisting
#: query_sql.xml:404
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"personsWith\">\n"
"    <return alias=\"person\" class=\"eg.Person\"/>\n"
"    <return-join alias=\"address\" property=\"person.mailingAddress\"/>\n"
"    SELECT person.NAME AS {person.name},\n"
"           person.AGE AS {person.age},\n"
"           person.SEX AS {person.sex},\n"
"           address.STREET AS {address.street},\n"
"           address.CITY AS {address.city},\n"
"           address.STATE AS {address.state},\n"
"           address.ZIP AS {address.zip}\n"
"    FROM PERSON person\n"
"    JOIN ADDRESS address\n"
"        ON person.ID = address.PERSON_ID AND address.TYPE='MAILING'\n"
"    WHERE person.NAME LIKE :namePattern\n"
"</sql-query>]]>"
msgstr ""
"<![CDATA[<sql-query name=\"personsWith\">\n"
"    <return alias=\"person\" class=\"eg.Person\"/>\n"
"    <return-join alias=\"address\" property=\"person.mailingAddress\"/>\n"
"    SELECT person.NAME AS {person.name},\n"
"           person.AGE AS {person.age},\n"
"           person.SEX AS {person.sex},\n"
"           address.STREET AS {address.street},\n"
"           address.CITY AS {address.city},\n"
"           address.STATE AS {address.state},\n"
"           address.ZIP AS {address.zip}\n"
"    FROM PERSON person \n"
"    JOIN ADDRESS address\n"
"            ON person.ID = address.PERSON_ID AND address.TYPE='MAILING'\n"
"    WHERE person.NAME LIKE :namePattern\n"
"</sql-query>]]>"

#. Tag: para
#: query_sql.xml:406
#, no-c-format
msgid ""
"A named SQL query may return a scalar value. You must declare the column "
"alias and Hibernate type using the <literal>&lt;return-scalar&gt;</literal> "
"element:"
msgstr ""
"Una consulta SQL con nombre puede devolver un valor escalar. Debes "
"especificar el alias de columna y tipo Hibernate usando el elementp "
"<literal>&lt;return-scalar&gt;</literal>:"

#. Tag: programlisting
#: query_sql.xml:410
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"mySqlQuery\">\n"
"    <return-scalar column=\"name\" type=\"string\"/>\n"
"    <return-scalar column=\"age\" type=\"long\"/>\n"
"    SELECT p.NAME AS name,\n"
"           p.AGE AS age,\n"
"    FROM PERSON p WHERE p.NAME LIKE 'Hiber%'\n"
"</sql-query>]]>"
msgstr ""
"<![CDATA[<sql-query name=\"mySqlQuery\">\n"
"    <return-scalar column=\"name\" type=\"string\"/>\n"
"    <return-scalar column=\"age\" type=\"long\"/>\n"
"    SELECT p.NAME AS name,\n"
"           p.AGE AS age,\n"
"    FROM PERSON p WHERE p.NAME LIKE 'Hiber%'\n"
"</sql-query>]]>"

#. Tag: para
#: query_sql.xml:412
#, fuzzy, no-c-format
msgid ""
"You can externalize the resultset mapping information in a <literal>&lt;"
"resultset&gt;</literal> element which will allow you to either reuse them "
"across several named queries or through the <literal>setResultSetMapping()</"
"literal> API."
msgstr ""
"You can externalize the resultset mapping informations in a <literal>&lt;"
"resultset&gt;</literal> element to either reuse them accross several named "
"queries or through the <literal>setResultSetMapping()</literal> API."

#. Tag: programlisting
#: query_sql.xml:417
#, no-c-format
msgid ""
"<![CDATA[<resultset name=\"personAddress\">\n"
"    <return alias=\"person\" class=\"eg.Person\"/>\n"
"    <return-join alias=\"address\" property=\"person.mailingAddress\"/>\n"
"</resultset>\n"
"\n"
"<sql-query name=\"personsWith\" resultset-ref=\"personAddress\">\n"
"    SELECT person.NAME AS {person.name},\n"
"           person.AGE AS {person.age},\n"
"           person.SEX AS {person.sex},\n"
"           address.STREET AS {address.street},\n"
"           address.CITY AS {address.city},\n"
"           address.STATE AS {address.state},\n"
"           address.ZIP AS {address.zip}\n"
"    FROM PERSON person\n"
"    JOIN ADDRESS address\n"
"        ON person.ID = address.PERSON_ID AND address.TYPE='MAILING'\n"
"    WHERE person.NAME LIKE :namePattern\n"
"</sql-query>]]>"
msgstr ""
"<![CDATA[<resultset name=\"personAddress\">\n"
"                <return alias=\"person\" class=\"eg.Person\"/>\n"
"                <return-join alias=\"address\" property=\"person."
"mailingAddress\"/>\n"
"        </resultset>\n"
"        \n"
"        <sql-query name=\"personsWith\" resultset-ref=\"personAddress\">\n"
"                SELECT person.NAME AS {person.name},\n"
"                person.AGE AS {person.age},\n"
"                person.SEX AS {person.sex},\n"
"                address.STREET AS {address.street},\n"
"                address.CITY AS {address.city},\n"
"                address.STATE AS {address.state},\n"
"                address.ZIP AS {address.zip}\n"
"                FROM PERSON person\n"
"                JOIN ADDRESS address\n"
"                ON person.ID = address.PERSON_ID AND address.TYPE='MAILING'\n"
"                WHERE person.NAME LIKE :namePattern\n"
"        </sql-query>]]>"

#. Tag: para
#: query_sql.xml:419
#, fuzzy, no-c-format
msgid ""
"You can, alternatively, use the resultset mapping information in your hbm "
"files directly in java code."
msgstr ""
"You can alternatively use the resultset mapping information in your hbm "
"files directly in java code."

#. Tag: programlisting
#: query_sql.xml:422
#, no-c-format
msgid ""
"<![CDATA[List cats = sess.createSQLQuery(\n"
"        \"select {cat.*}, {kitten.*} from cats cat, cats kitten where kitten."
"mother = cat.id\"\n"
"    )\n"
"    .setResultSetMapping(\"catAndKitten\")\n"
"    .list();]]>"
msgstr ""
"<![CDATA[List cats = sess.createSQLQuery(\n"
"                              \"select {cat.*}, {kitten.*} from cats cat, "
"cats kitten where kitten.mother = cat.id\"\n"
"                              )\n"
"                              .setResultSetMapping(\"catAndKitten\")\n"
"    .list();]]>"

#. Tag: title
#: query_sql.xml:425
#, no-c-format
msgid "Using return-property to explicitly specify column/alias names"
msgstr ""
"Usando return-property para especificar expl&#x00ed;citamente nombres de "
"columna/alias"

#. Tag: para
#: query_sql.xml:428
#, fuzzy, no-c-format
msgid ""
"You can explicitly tell Hibernate what column aliases to use with "
"<literal>&lt;return-property&gt;</literal>, instead of using the <literal>{}"
"</literal>-syntax to let Hibernate inject its own aliases.For example:"
msgstr ""
"Con <literal>&lt;return-property&gt;</literal> puedes decirle expl&#x00ed;"
"citamente a Hibernate qu&#x00e9; alias de columna usar, en vez de usar la "
"sint&#x00e1;xis <literal>{}</literal> para dejar que Hibernate inyecte sus "
"propios alias."

#. Tag: programlisting
#: query_sql.xml:433
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"mySqlQuery\">\n"
"    <return alias=\"person\" class=\"eg.Person\">\n"
"        <return-property name=\"name\" column=\"myName\"/>\n"
"        <return-property name=\"age\" column=\"myAge\"/>\n"
"        <return-property name=\"sex\" column=\"mySex\"/>\n"
"    </return>\n"
"    SELECT person.NAME AS myName,\n"
"           person.AGE AS myAge,\n"
"           person.SEX AS mySex,\n"
"    FROM PERSON person WHERE person.NAME LIKE :name\n"
"</sql-query>\n"
"]]>"
msgstr ""
"<![CDATA[<sql-query name=\"mySqlQuery\">\n"
"    <return alias=\"person\" class=\"eg.Person\">\n"
"        <return-property name=\"name\" column=\"myName\"/>\n"
"        <return-property name=\"age\" column=\"myAge\"/>\n"
"        <return-property name=\"sex\" column=\"mySex\"/>\n"
"    </return>\n"
"    SELECT person.NAME AS myName,\n"
"           person.AGE AS myAge,\n"
"           person.SEX AS mySex,\n"
"    FROM PERSON person WHERE person.NAME LIKE :name\n"
"</sql-query>\n"
"]]>"

#. Tag: para
#: query_sql.xml:435
#, fuzzy, no-c-format
msgid ""
"<literal>&lt;return-property&gt;</literal> also works with multiple columns. "
"This solves a limitation with the <literal>{}</literal>-syntax which cannot "
"allow fine grained control of multi-column properties."
msgstr ""
"<literal>&lt;return-property&gt;</literal> tambi&#x00e9;n trabaja con "
"m&#x00fa;ltiples columnas. Esto resuelve una limitaci&#x00f3;n de la "
"sint&#x00e1;xis <literal>{}</literal>, la cual no puede permitir un control "
"fino de propiedades multi-columna."

#. Tag: programlisting
#: query_sql.xml:440
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"organizationCurrentEmployments\">\n"
"    <return alias=\"emp\" class=\"Employment\">\n"
"        <return-property name=\"salary\">\n"
"            <return-column name=\"VALUE\"/>\n"
"            <return-column name=\"CURRENCY\"/>\n"
"        </return-property>\n"
"        <return-property name=\"endDate\" column=\"myEndDate\"/>\n"
"    </return>\n"
"        SELECT EMPLOYEE AS {emp.employee}, EMPLOYER AS {emp.employer},\n"
"        STARTDATE AS {emp.startDate}, ENDDATE AS {emp.endDate},\n"
"        REGIONCODE as {emp.regionCode}, EID AS {emp.id}, VALUE, CURRENCY\n"
"        FROM EMPLOYMENT\n"
"        WHERE EMPLOYER = :id AND ENDDATE IS NULL\n"
"        ORDER BY STARTDATE ASC\n"
"</sql-query>]]>"
msgstr ""
"<![CDATA[<sql-query name=\"organizationCurrentEmployments\">\n"
"    <return alias=\"emp\" class=\"Employment\">            \n"
"        <return-property name=\"salary\"> \n"
"            <return-column name=\"VALUE\"/>\n"
"            <return-column name=\"CURRENCY\"/>            \n"
"        </return-property>\n"
"        <return-property name=\"endDate\" column=\"myEndDate\"/>\n"
"    </return>\n"
"        SELECT EMPLOYEE AS {emp.employee}, EMPLOYER AS {emp.employer}, \n"
"        STARTDATE AS {emp.startDate}, ENDDATE AS {emp.endDate},\n"
"        REGIONCODE as {emp.regionCode}, EID AS {emp.id}, VALUE, CURRENCY\n"
"        FROM EMPLOYMENT\n"
"        WHERE EMPLOYER = :id AND ENDDATE IS NULL\n"
"        ORDER BY STARTDATE ASC\n"
"</sql-query>]]>"

#. Tag: para
#: query_sql.xml:442
#, fuzzy, no-c-format
msgid ""
"In this example <literal>&lt;return-property&gt;</literal> was used in "
"combination with the <literal>{}</literal>-syntax for injection. This allows "
"users to choose how they want to refer column and properties."
msgstr ""
"Nota que en este ejemplo hemos usado <literal>&lt;return-property&gt;</"
"literal> en combinaci&#x00f3;n con la sint&#x00e1;xis <literal>{}</literal> "
"para inyecci&#x00f3;n, permitiendo a los usuarios elejir c&#x00f3;mo quieren "
"referirse a las columnas y propiedades."

#. Tag: para
#: query_sql.xml:447
#, no-c-format
msgid ""
"If your mapping has a discriminator you must use <literal>&lt;return-"
"discriminator&gt;</literal> to specify the discriminator column."
msgstr ""
"Si tu mapeo tiene un discriminador debes usar <literal>&lt;return-"
"discriminator&gt;</literal> para especificar la columna discriminadora."

#. Tag: title
#: query_sql.xml:453
#, no-c-format
msgid "Using stored procedures for querying"
msgstr "Usando procedimientos almacenados para consultar"

#. Tag: para
#: query_sql.xml:455
#, fuzzy, no-c-format
msgid ""
"Hibernate3 provides support for queries via stored procedures and functions. "
"Most of the following documentation is equivalent for both. The stored "
"procedure/function must return a resultset as the first out-parameter to be "
"able to work with Hibernate. An example of such a stored function in Oracle "
"9 and higher is as follows:"
msgstr ""
"Hibernate3 introduce soporte para consultas v&#x00ed;a procedimientos "
"almacenados. Los procedimientos almacenados deben devolver un conjunto "
"resultado como el primer par&#x00e1;metro de salida para ser capaces de "
"funcionar con Hibernate. Un ejemplo de uno procedimiento almacenado en "
"Oracle 9 o superior es as&#x00ed;:"

#. Tag: programlisting
#: query_sql.xml:461
#, no-c-format
msgid ""
"<![CDATA[CREATE OR REPLACE FUNCTION selectAllEmployments\n"
"    RETURN SYS_REFCURSOR\n"
"AS\n"
"    st_cursor SYS_REFCURSOR;\n"
"BEGIN\n"
"    OPEN st_cursor FOR\n"
" SELECT EMPLOYEE, EMPLOYER,\n"
" STARTDATE, ENDDATE,\n"
" REGIONCODE, EID, VALUE, CURRENCY\n"
" FROM EMPLOYMENT;\n"
"      RETURN  st_cursor;\n"
" END;]]>"
msgstr ""
"<![CDATA[CREATE OR REPLACE FUNCTION selectAllEmployments \n"
"    RETURN SYS_REFCURSOR \n"
"AS \n"
"    st_cursor SYS_REFCURSOR; \n"
"BEGIN \n"
"    OPEN st_cursor FOR \n"
" SELECT EMPLOYEE, EMPLOYER, \n"
" STARTDATE, ENDDATE, \n"
" REGIONCODE, EID, VALUE, CURRENCY \n"
" FROM EMPLOYMENT; \n"
"      RETURN  st_cursor; \n"
" END;]]>"

#. Tag: para
#: query_sql.xml:463
#, no-c-format
msgid "To use this query in Hibernate you need to map it via a named query."
msgstr ""
"Para usar esta consulta en Hibernate necesitas mapearla por medio de una "
"consulta con nombre."

#. Tag: programlisting
#: query_sql.xml:466
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"selectAllEmployees_SP\" callable=\"true\">\n"
"    <return alias=\"emp\" class=\"Employment\">\n"
"        <return-property name=\"employee\" column=\"EMPLOYEE\"/>\n"
"        <return-property name=\"employer\" column=\"EMPLOYER\"/>\n"
"        <return-property name=\"startDate\" column=\"STARTDATE\"/>\n"
"        <return-property name=\"endDate\" column=\"ENDDATE\"/>\n"
"        <return-property name=\"regionCode\" column=\"REGIONCODE\"/>\n"
"        <return-property name=\"id\" column=\"EID\"/>\n"
"        <return-property name=\"salary\">\n"
"            <return-column name=\"VALUE\"/>\n"
"            <return-column name=\"CURRENCY\"/>\n"
"        </return-property>\n"
"    </return>\n"
"    { ? = call selectAllEmployments() }\n"
"</sql-query>]]>"
msgstr ""
"<![CDATA[<sql-query name=\"selectAllEmployees_SP\" callable=\"true\">\n"
"    <return alias=\"emp\" class=\"Employment\">\n"
"        <return-property name=\"employee\" column=\"EMPLOYEE\"/>\n"
"        <return-property name=\"employer\" column=\"EMPLOYER\"/"
">            \n"
"        <return-property name=\"startDate\" column=\"STARTDATE\"/>\n"
"        <return-property name=\"endDate\" column=\"ENDDATE\"/>            \n"
"        <return-property name=\"regionCode\" column=\"REGIONCODE\"/"
">            \n"
"        <return-property name=\"id\" column=\"EID\"/"
">                        \n"
"        <return-property name=\"salary\"> \n"
"            <return-column name=\"VALUE\"/>\n"
"            <return-column name=\"CURRENCY\"/>            \n"
"        </return-property>\n"
"    </return>\n"
"    { ? = call selectAllEmployments() }\n"
"</sql-query>]]>"

#. Tag: para
#: query_sql.xml:468
#, fuzzy, no-c-format
msgid ""
"Stored procedures currently only return scalars and entities. <literal>&lt;"
"return-join&gt;</literal> and <literal>&lt;load-collection&gt;</literal> are "
"not supported."
msgstr ""
"Nota que los procedimientos almacenados s&#x00f3;lo devuelven escalares y "
"entidades. No est&#x00e1;n soportados <literal>&lt;return-join&gt;</literal> "
"y <literal>&lt;load-collection&gt;</literal>."

#. Tag: title
#: query_sql.xml:473
#, no-c-format
msgid "Rules/limitations for using stored procedures"
msgstr "Reglas/limitaciones para usar procedimientos almacenados"

#. Tag: para
#: query_sql.xml:475
#, fuzzy, no-c-format
msgid ""
"You cannot use stored procedures with Hibernate unless you follow some "
"procedure/function rules. If they do not follow those rules they are not "
"usable with Hibernate. If you still want to use these procedures you have to "
"execute them via <literal>session.connection()</literal>. The rules are "
"different for each database, since database vendors have different stored "
"procedure semantics/syntax."
msgstr ""
"Para usar procedimientos almacenados con Hibernate los procedimientos tienen "
"que seguir algunas reglas. Si no siguen esas reglas no son usables por "
"Hibernate. Si a&#x00fa;n quisieras usar estos procedimientos tendr&#x00ed;as "
"que ejecutarlos por medio de <literal>session.connection()</literal>. Las "
"reglas son diferentes para cada base de datos, ya que los vendedores de base "
"de datos tienen diferentes sem&#x00e1;nticas/sint&#x00e1;xis de "
"procedimientos almacenados."

#. Tag: para
#: query_sql.xml:482
#, fuzzy, no-c-format
msgid ""
"Stored procedure queries cannot be paged with <literal>setFirstResult()/"
"setMaxResults()</literal>."
msgstr ""
"Las consultas de procedimientos almacenados no pueden ser paginadas con "
"<literal>setFirstResult()/setMaxResults()</literal>."

#. Tag: para
#: query_sql.xml:485
#, fuzzy, no-c-format
msgid ""
"The recommended call form is standard SQL92: <literal>{ ? = call functionName"
"(&lt;parameters&gt;) }</literal> or <literal>{ ? = call procedureName(&lt;"
"parameters&gt;}</literal>. Native call syntax is not supported."
msgstr "Para Oracle se aplican las siguientes reglas:"

#. Tag: para
#: query_sql.xml:490
#, no-c-format
msgid "For Oracle the following rules apply:"
msgstr ""
"El procedimiento debe devolver un conjunto resultado. Esto se hace "
"devolviendo un <literal>SYS_REFCURSOR</literal> en Oracle 9 o 10. En Oracle "
"necesitas definir un tipo <literal>REF CURSOR</literal>."

#. Tag: para
#: query_sql.xml:494
#, fuzzy, no-c-format
msgid ""
"A function must return a result set. The first parameter of a procedure must "
"be an <literal>OUT</literal> that returns a result set. This is done by "
"using a <literal>SYS_REFCURSOR</literal> type in Oracle 9 or 10. In Oracle "
"you need to define a <literal>REF CURSOR</literal> type. See Oracle "
"literature for further information."
msgstr ""
"La forma recomendada es <literal>{ ? = call procName(&lt;parameters&gt;) }</"
"literal> o <literal>{ ? = call procName }</literal> (esto es m&#x00e1;s una "
"regla de Oracle que una regla de Hibernate)."

#. Tag: para
#: query_sql.xml:503
#, no-c-format
msgid "For Sybase or MS SQL server the following rules apply:"
msgstr "Para Sybase o MS SQL server se aplican las siguientes reglas:"

#. Tag: para
#: query_sql.xml:507
#, fuzzy, no-c-format
msgid ""
"The procedure must return a result set. Note that since these servers can "
"return multiple result sets and update counts, Hibernate will iterate the "
"results and take the first result that is a result set as its return value. "
"Everything else will be discarded."
msgstr ""
"El procedimiento debe devolver un conjunto resultado. Nota que ya que estos "
"servidores pueden y devolver&#x00e1;n m&#x00fa;ltiples conjuntos resultados "
"y cuentas de actualizaci&#x00f3;n, Hibernate iterar&#x00e1; los resultados y "
"tomar&#x00e1; el primer resultado que sea un conjunto resultado como su "
"valor a devolver. Todo lo dem&#x00e1;s ser&#x00e1; descartado."

#. Tag: para
#: query_sql.xml:515
#, no-c-format
msgid ""
"If you can enable <literal>SET NOCOUNT ON</literal> in your procedure it "
"will probably be more efficient, but this is not a requirement."
msgstr ""
"Si habilitas <literal>SET NOCOUNT ON</literal> en tu procedimiento "
"ser&#x00e1; probablemente m&#x00e1;s eficiente, pero esto no es un "
"requerimiento."

#. Tag: title
#: query_sql.xml:525
#, no-c-format
msgid "Custom SQL for create, update and delete"
msgstr "SQL personalizado para crear, actualizar y borrar"

#. Tag: para
#: query_sql.xml:527
#, no-c-format
msgid ""
"Hibernate3 can use custom SQL statements for create, update, and delete "
"operations. The class and collection persisters in Hibernate already contain "
"a set of configuration time generated strings (insertsql, deletesql, "
"updatesql etc.). The mapping tags <literal>&lt;sql-insert&gt;</literal>, "
"<literal>&lt;sql-delete&gt;</literal>, and <literal>&lt;sql-update&gt;</"
"literal> override these strings:"
msgstr ""
"Hibernate3 puede usar sentencias SQL personalizadas para las operaciones de "
"crear, actualizar y borrar. Los persistidores de clases y colecciones en "
"Hibernate ya contienen un conjunto de cadenas generadas en tiempo de "
"configuraci&#x00f3;n (insertsql, deletesql, updatesql, etc.). Las etiquetas "
"de mapeo <literal>&lt;sql-insert&gt;</literal>, <literal>&lt;sql-delete&gt;</"
"literal>, y <literal>&lt;sql-update&gt;</literal> sobrescriben estas cadenas:"

#. Tag: programlisting
#: query_sql.xml:535
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Person\">\n"
"    <id name=\"id\">\n"
"        <generator class=\"increment\"/>\n"
"    </id>\n"
"    <property name=\"name\" not-null=\"true\"/>\n"
"    <sql-insert>INSERT INTO PERSON (NAME, ID) VALUES ( UPPER(?), ? )</sql-"
"insert>\n"
"    <sql-update>UPDATE PERSON SET NAME=UPPER(?) WHERE ID=?</sql-update>\n"
"    <sql-delete>DELETE FROM PERSON WHERE ID=?</sql-delete>\n"
"</class>]]>"
msgstr ""
"<![CDATA[<class name=\"Person\">\n"
"    <id name=\"id\">\n"
"        <generator class=\"increment\"/>\n"
"    </id>\n"
"    <property name=\"name\" not-null=\"true\"/>\n"
"    <sql-insert>INSERT INTO PERSON (NAME, ID) VALUES ( UPPER(?), ? )</sql-"
"insert>\n"
"    <sql-update>UPDATE PERSON SET NAME=UPPER(?) WHERE ID=?</sql-update>\n"
"    <sql-delete>DELETE FROM PERSON WHERE ID=?</sql-delete>\n"
"</class>]]>"

#. Tag: para
#: query_sql.xml:537
#, fuzzy, no-c-format
msgid ""
"The SQL is directly executed in your database, so you can use any dialect "
"you like. This will reduce the portability of your mapping if you use "
"database specific SQL."
msgstr ""
"El SQL se ejecuta directamente en tu base de datos, de modo que eres libre "
"de usar cualquier dialecto que quieras. Esto reducir&#x00e1;, por supuesto, "
"la portabilidad de tu mapeo si usas SQL espec&#x00ed;fico de la base de "
"datos."

#. Tag: para
#: query_sql.xml:541
#, no-c-format
msgid ""
"Stored procedures are supported if the <literal>callable</literal> attribute "
"is set:"
msgstr ""
"Los procedimientos almacenados son soportados si est&#x00e1; establecido el "
"atributo <literal>callable</literal>:"

#. Tag: programlisting
#: query_sql.xml:544
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Person\">\n"
"    <id name=\"id\">\n"
"        <generator class=\"increment\"/>\n"
"    </id>\n"
"    <property name=\"name\" not-null=\"true\"/>\n"
"    <sql-insert callable=\"true\">{call createPerson (?, ?)}</sql-insert>\n"
"    <sql-delete callable=\"true\">{? = call deletePerson (?)}</sql-delete>\n"
"    <sql-update callable=\"true\">{? = call updatePerson (?, ?)}</sql-"
"update>\n"
"</class>]]>"
msgstr ""
"<![CDATA[<class name=\"Person\">\n"
"    <id name=\"id\">\n"
"        <generator class=\"increment\"/>\n"
"    </id>\n"
"    <property name=\"name\" not-null=\"true\"/>\n"
"    <sql-insert callable=\"true\">{call createPerson (?, ?)}</sql-insert>\n"
"    <sql-delete callable=\"true\">{? = call deletePerson (?)}</sql-delete>\n"
"    <sql-update callable=\"true\">{? = call updatePerson (?, ?)}</sql-"
"update>\n"
"</class>]]>"

#. Tag: para
#: query_sql.xml:546
#, fuzzy, no-c-format
msgid ""
"The order of the positional parameters is vital, as they must be in the same "
"sequence as Hibernate expects them."
msgstr ""
"El orden de los par&#x00e1;metros posicionales son actualmente vitales, ya "
"que deben estar en la misma secuencia en que las espera Hibernate."

#. Tag: para
#: query_sql.xml:549
#, fuzzy, no-c-format
msgid ""
"You can view the expected order by enabling debug logging for the "
"<literal>org.hibernate.persister.entity</literal> level. With this level "
"enabled, Hibernate will print out the static SQL that is used to create, "
"update, delete etc. entities. To view the expected sequence, do not include "
"your custom SQL in the mapping files, as this will override the Hibernate "
"generated static SQL."
msgstr ""
"Puedes ver el orden esperado habilitando el registro de depuraci&#x00f3;n "
"para el nivel <literal>org.hibernate.persister.entity</literal>. Con este "
"nivel habilitado, Hibernate imprimir&#x00e1; el SQL est&#x00e1;tico que se "
"usa para crear, actualizar, borrar, etc. las entidades. (Para ver la "
"secuencia esperada, recuerda no incluir tu SQL personalizado en los ficheros "
"de mapeo ya que sobrescribir&#x00e1;n el sql est&#x00e1;tico generado por "
"Hibernate.)"

#. Tag: para
#: query_sql.xml:556
#, fuzzy, no-c-format
msgid ""
"The stored procedures are in most cases required to return the number of "
"rows inserted, updated and deleted, as Hibernate has some runtime checks for "
"the success of the statement. Hibernate always registers the first statement "
"parameter as a numeric output parameter for the CUD operations:"
msgstr ""
"Los procedimientos almacenados son, en la mayor&#x00ed;a de los casos "
"(l&#x00e9;ase, mejor hacerlo que no hacerlo), obligados a devolver el "
"n&#x00fa;mero de filas insertadas/actualizadas/borradas, ya que Hibernate "
"tiene algunas comprobaciones en tiempo de ejecuci&#x00f3;n del &#x00e9;xito "
"de la sentencia. Hibernate siempre registra el primer par&#x00e1;metro de la "
"sentencia como un par&#x00e1;metro de salida num&#x00e9;rico para las "
"operaciones CUD:"

#. Tag: programlisting
#: query_sql.xml:562
#, no-c-format
msgid ""
"<![CDATA[CREATE OR REPLACE FUNCTION updatePerson (uid IN NUMBER, uname IN "
"VARCHAR2)\n"
"    RETURN NUMBER IS\n"
"BEGIN\n"
"\n"
"    update PERSON\n"
"    set\n"
"        NAME = uname,\n"
"    where\n"
"        ID = uid;\n"
"\n"
"    return SQL%ROWCOUNT;\n"
"\n"
"END updatePerson;]]>"
msgstr ""
"<![CDATA[CREATE OR REPLACE FUNCTION updatePerson (uid IN NUMBER, uname IN "
"VARCHAR2)\n"
"    RETURN NUMBER IS\n"
"BEGIN\n"
"\n"
"    update PERSON\n"
"    set\n"
"        NAME = uname,\n"
"    where\n"
"        ID = uid;\n"
"\n"
"    return SQL%ROWCOUNT;\n"
"\n"
"END updatePerson;]]>"

#. Tag: title
#: query_sql.xml:566
#, no-c-format
msgid "Custom SQL for loading"
msgstr "SQL personalizado para carga"

#. Tag: para
#: query_sql.xml:568
#, fuzzy, no-c-format
msgid "You can also declare your own SQL (or HQL) queries for entity loading:"
msgstr ""
"Puedes tambi&#x00e9;n declarar tu propias consultas SQL (o HQL) para cargar "
"entidades:"

#. Tag: programlisting
#: query_sql.xml:571
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"person\">\n"
"    <return alias=\"pers\" class=\"Person\" lock-mode=\"upgrade\"/>\n"
"    SELECT NAME AS {pers.name}, ID AS {pers.id}\n"
"    FROM PERSON\n"
"    WHERE ID=?\n"
"    FOR UPDATE\n"
"</sql-query>]]>"
msgstr ""
"<![CDATA[<sql-query name=\"person\">\n"
"    <return alias=\"pers\" class=\"Person\" lock-mode=\"upgrade\"/>\n"
"    SELECT NAME AS {pers.name}, ID AS {pers.id} \n"
"    FROM PERSON \n"
"    WHERE ID=? \n"
"    FOR UPDATE\n"
"</sql-query>]]>"

#. Tag: para
#: query_sql.xml:573
#, fuzzy, no-c-format
msgid ""
"This is just a named query declaration, as discussed earlier. You can "
"reference this named query in a class mapping:"
msgstr ""
"Esto es s&#x00f3;lo una declaraci&#x00f3;n de consulta con nombrem como se "
"ha discutido anteriormente. Puedes hacer referencia a esta consulta con "
"nombre en un mapeo de clase:"

#. Tag: programlisting
#: query_sql.xml:576
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Person\">\n"
"    <id name=\"id\">\n"
"        <generator class=\"increment\"/>\n"
"    </id>\n"
"    <property name=\"name\" not-null=\"true\"/>\n"
"    <loader query-ref=\"person\"/>\n"
"</class>]]>"
msgstr ""
"<![CDATA[<class name=\"Person\">\n"
"    <id name=\"id\">\n"
"        <generator class=\"increment\"/>\n"
"    </id>\n"
"    <property name=\"name\" not-null=\"true\"/>\n"
"    <loader query-ref=\"person\"/>\n"
"</class>]]>"

#. Tag: para
#: query_sql.xml:578
#, no-c-format
msgid "This even works with stored procedures."
msgstr "Esto incluso funciona con procedimientos almacenados."

#. Tag: para
#: query_sql.xml:580
#, fuzzy, no-c-format
msgid "You can even define a query for collection loading:"
msgstr "Puedes incluso definit una consulta para la carga de colecciones:"

#. Tag: programlisting
#: query_sql.xml:582
#, no-c-format
msgid ""
"<![CDATA[<set name=\"employments\" inverse=\"true\">\n"
"    <key/>\n"
"    <one-to-many class=\"Employment\"/>\n"
"    <loader query-ref=\"employments\"/>\n"
"</set>]]>"
msgstr ""
"<![CDATA[<set name=\"employments\" inverse=\"true\">\n"
"    <key/>\n"
"    <one-to-many class=\"Employment\"/>\n"
"    <loader query-ref=\"employments\"/>\n"
"</set>]]>"

#. Tag: programlisting
#: query_sql.xml:584
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"employments\">\n"
"    <load-collection alias=\"emp\" role=\"Person.employments\"/>\n"
"    SELECT {emp.*}\n"
"    FROM EMPLOYMENT emp\n"
"    WHERE EMPLOYER = :id\n"
"    ORDER BY STARTDATE ASC, EMPLOYEE ASC\n"
"</sql-query>]]>"
msgstr ""
"<![CDATA[<sql-query name=\"employments\">\n"
"    <load-collection alias=\"emp\" role=\"Person.employments\"/>\n"
"    SELECT {emp.*}\n"
"    FROM EMPLOYMENT emp\n"
"    WHERE EMPLOYER = :id\n"
"    ORDER BY STARTDATE ASC, EMPLOYEE ASC\n"
"</sql-query>]]>"

#. Tag: para
#: query_sql.xml:586
#, fuzzy, no-c-format
msgid ""
"You can also define an entity loader that loads a collection by join "
"fetching:"
msgstr ""
"Podr&#x00ed;as incluso definir un cargador de entidades que cargue una "
"colecci&#x00f3;n por recuperaci&#x00f3;n por uni&#x00f3;n (join fetching):"

#. Tag: programlisting
#: query_sql.xml:589
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"person\">\n"
"    <return alias=\"pers\" class=\"Person\"/>\n"
"    <return-join alias=\"emp\" property=\"pers.employments\"/>\n"
"    SELECT NAME AS {pers.*}, {emp.*}\n"
"    FROM PERSON pers\n"
"    LEFT OUTER JOIN EMPLOYMENT emp\n"
"        ON pers.ID = emp.PERSON_ID\n"
"    WHERE ID=?\n"
"</sql-query>]]>"
msgstr ""
"<![CDATA[<sql-query name=\"person\">\n"
"    <return alias=\"pers\" class=\"Person\"/>\n"
"    <return-join alias=\"emp\" property=\"pers.employments\"/> \n"
"    SELECT NAME AS {pers.*}, {emp.*}\n"
"    FROM PERSON pers\n"
"    LEFT OUTER JOIN EMPLOYMENT emp \n"
"        ON pers.ID = emp.PERSON_ID\n"
"    WHERE ID=?\n"
"</sql-query>]]>"

#~ msgid "ROLES_OF_TRANSLATORS"
#~ msgstr "<!--TRANS:ROLES_OF_TRANSLATORS-->"

#~ msgid "CREDIT_FOR_TRANSLATORS"
#~ msgstr "<!--TRANS:CREDIT_FOR_TRANSLATORS-->"
