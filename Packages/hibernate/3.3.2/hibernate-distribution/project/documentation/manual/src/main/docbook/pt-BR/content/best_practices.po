msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-06-10 21:02+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: best_practices.xml:29
#, no-c-format
msgid "Best Practices"
msgstr "Boas práticas"

#. Tag: term
#: best_practices.xml:33
#, fuzzy, no-c-format
msgid ""
"Write fine-grained classes and map them using <literal>&lt;component&gt;</"
"literal>:"
msgstr ""
"Escreva classes compactas e mapeie-as usando <literal>&lt;component&gt;</"
"literal>."

#. Tag: para
#: best_practices.xml:35
#, no-c-format
msgid ""
"Use an <literal>Address</literal> class to encapsulate <literal>street</"
"literal>, <literal>suburb</literal>, <literal>state</literal>, "
"<literal>postcode</literal>. This encourages code reuse and simplifies "
"refactoring."
msgstr ""
"Use uma classe <literal>Endereco</literal> para encapsular <literal>rua</"
"literal>, <literal>bairro</literal>, <literal>estado</literal>, "
"<literal>CEP</literal>. Isto promove a reutilização de código e simplifica o "
"refactoring."

#. Tag: term
#: best_practices.xml:43
#, fuzzy, no-c-format
msgid "Declare identifier properties on persistent classes:"
msgstr "Declare propriedades identificadoras em classes persistentes."

#. Tag: para
#: best_practices.xml:45
#, fuzzy, no-c-format
msgid ""
"Hibernate makes identifier properties optional. There are a range of reasons "
"why you should use them. We recommend that identifiers be 'synthetic', that "
"is, generated with no business meaning."
msgstr ""
"O Hibernate constrói propriedades identificadoras opcionais. Existem todos "
"os tipos de razões que explicam porquê você deveria utilizá-las. Nós "
"recomendamos que os identificadores sejam 'sintéticos' (gerados, sem "
"significado para o negocio)."

#. Tag: term
#: best_practices.xml:53
#, fuzzy, no-c-format
msgid "Identify natural keys:"
msgstr "Identifique chaves naturais."

#. Tag: para
#: best_practices.xml:55
#, no-c-format
msgid ""
"Identify natural keys for all entities, and map them using <literal>&lt;"
"natural-id&gt;</literal>. Implement <literal>equals()</literal> and "
"<literal>hashCode()</literal> to compare the properties that make up the "
"natural key."
msgstr ""
"Identifique chaves naturais para todas as entidades, e mapeie-as usando "
"<literal>&lt;natural-id&gt;</literal>. Implemente <literal>equals()</"
"literal> e <literal>hashCode()</literal> para comparar as propriedades que "
"compõem a chave natural."

#. Tag: term
#: best_practices.xml:63
#, fuzzy, no-c-format
msgid "Place each class mapping in its own file:"
msgstr "Coloque cada classe de mapeamento em seu próprio arquivo."

#. Tag: para
#: best_practices.xml:65
#, fuzzy, no-c-format
msgid ""
"Do not use a single monolithic mapping document. Map <literal>com.eg.Foo</"
"literal> in the file <literal>com/eg/Foo.hbm.xml</literal>. This makes "
"sense, particularly in a team environment."
msgstr ""
"Não use um único código de mapeamento monolítico. Mapeie <literal>com.eg."
"Foo</literal> no arquivo <literal>com/eg/Foo.hbm.xml</literal>. Isto promove "
"particularmente o bom senso no time de desenvolvimento."

#. Tag: term
#: best_practices.xml:73
#, fuzzy, no-c-format
msgid "Load mappings as resources:"
msgstr "Carregue os mapeamentos como recursos."

#. Tag: para
#: best_practices.xml:75
#, no-c-format
msgid "Deploy the mappings along with the classes they map."
msgstr "Faça o deploy dos mapeamentos junto com as classes que eles mapeiam."

#. Tag: term
#: best_practices.xml:81
#, fuzzy, no-c-format
msgid "Consider externalizing query strings:"
msgstr "Considere externalizar as strings de consultas."

#. Tag: para
#: best_practices.xml:83
#, fuzzy, no-c-format
msgid ""
"This is recommended if your queries call non-ANSI-standard SQL functions. "
"Externalizing the query strings to mapping files will make the application "
"more portable."
msgstr ""
"Esta é uma boa prática se suas consultas chamam funções SQL que não sejam "
"ANSI. Externalizar as strings de consultas para mapear arquivos irão tornar "
"a aplicação mais portável."

#. Tag: term
#: best_practices.xml:91
#, no-c-format
msgid "Use bind variables."
msgstr "Use bind variables."

#. Tag: para
#: best_practices.xml:93
#, fuzzy, no-c-format
msgid ""
"As in JDBC, always replace non-constant values by \"?\". Do not use string "
"manipulation to bind a non-constant value in a query. You should also "
"consider using named parameters in queries."
msgstr ""
"Assim como em JDBC, sempre substitua valores não constantes por \"?\". Nunca "
"use a manipulação de strings para concatenar valores não constantes em uma "
"consulta! Até melhor, considere usar parâmetros nomeados nas consultas."

#. Tag: term
#: best_practices.xml:101
#, fuzzy, no-c-format
msgid "Do not manage your own JDBC connections:"
msgstr "Não gerencie suas conexões JDBC."

#. Tag: para
#: best_practices.xml:103
#, fuzzy, no-c-format
msgid ""
"Hibernate allows the application to manage JDBC connections, but his "
"approach should be considered a last-resort. If you cannot use the built-in "
"connection providers, consider providing your own implementation of "
"<literal>org.hibernate.connection.ConnectionProvider</literal>."
msgstr ""
"O Hibernate permite que a aplicação gerencie conexões JDBC. Esta abordagem "
"deve ser considerada um último recurso. Se você não pode usar os provedores "
"de conexão embutidos, considere fazer sua implementação a partir de "
"<literal>org.hibernate.connection.ConnectionProvider</literal>."

#. Tag: term
#: best_practices.xml:111
#, fuzzy, no-c-format
msgid "Consider using a custom type:"
msgstr "Considere usar tipos customizados."

#. Tag: para
#: best_practices.xml:113
#, fuzzy, no-c-format
msgid ""
"Suppose you have a Java type from a library that needs to be persisted but "
"does not provide the accessors needed to map it as a component. You should "
"consider implementing <literal>org.hibernate.UserType</literal>. This "
"approach frees the application code from implementing transformations to/"
"from a Hibernate type."
msgstr ""
"Suponha que você tenha um tipo Java, de alguma biblioteca, que precisa ser "
"persistido mas não provê os acessórios necessários para mapeá-lo como um "
"componente. Você deve implementar <literal>org.hibernate.UserType</literal>. "
"Esta abordagem livra o código da aplicação de implementar transformações de/"
"para o tipo Hibernate."

#. Tag: term
#: best_practices.xml:122
#, fuzzy, no-c-format
msgid "Use hand-coded JDBC in bottlenecks:"
msgstr "Use código manual JDBC nos gargalos."

#. Tag: para
#: best_practices.xml:124
#, fuzzy, no-c-format
msgid ""
"In performance-critical areas of the system, some kinds of operations might "
"benefit from direct JDBC. Do not assume, however, that JDBC is necessarily "
"faster. Please wait until you <emphasis>know</emphasis> something is a "
"bottleneck. If you need to use direct JDBC, you can open a Hibernate "
"<literal>Session</literal> and usingfile:///usr/share/doc/HTML/en-US/index."
"html that JDBC connection. This way you can still use the same transaction "
"strategy and underlying connection provider."
msgstr ""
"Nas áreas de desempenho crítico do sistema, alguns tipos de operações podem "
"se beneficiar do uso direto do JDBC. Mas por favor, espere até você "
"<emphasis>saber </emphasis> se é um gargalo. E não suponha que o uso direto "
"do JDBC é necessariamente mais rápido. Se você precisar usar diretamente o "
"JDBC, vale a pena abrir uma <literal>Session</literal> do Hibernate e usar "
"uma conexão JDBC. De modo que você possa ainda usar a mesma estratégia de "
"transação e ocultar o provedor a conexão"

#. Tag: term
#: best_practices.xml:134
#, fuzzy, no-c-format
msgid "Understand <literal>Session</literal> flushing:"
msgstr "Entenda o <literal>Session</literal> flushing."

#. Tag: para
#: best_practices.xml:136
#, fuzzy, no-c-format
msgid ""
"Sometimes the Session synchronizes its persistent state with the database. "
"Performance will be affected if this process occurs too often. You can "
"sometimes minimize unnecessary flushing by disabling automatic flushing, or "
"even by changing the order of queries and other operations within a "
"particular transaction."
msgstr ""
"De tempos em tempos a sessão sincroniza seu estado persistente com o banco "
"de dados. O desempenho será afetado se este processo ocorrer frequentemente. "
"Você pode algumas vezes minimizar o fluxo desnecessário desabilitando o "
"fluxo automático ou até mesmo mudando a ordem das consultas e outras "
"operações em uma transação particular."

#. Tag: term
#: best_practices.xml:145
#, fuzzy, no-c-format
msgid "In a three tiered architecture, consider using detached objects:"
msgstr ""
"Em uma arquitetura de três camadas, considere o uso de objetos separados."

#. Tag: para
#: best_practices.xml:147
#, fuzzy, no-c-format
msgid ""
"When using a servlet/session bean architecture, you can pass persistent "
"objects loaded in the session bean to and from the servlet/JSP layer. Use a "
"new session to service each request. Use <literal>Session.merge()</literal> "
"or <literal>Session.saveOrUpdate()</literal> to synchronize objects with the "
"database."
msgstr ""
"When using a servlet / session bean architecture, you could pass persistent "
"objects loaded in the session bean to and from the servlet / JSP layer. Use "
"a new session to service each request. Use <literal>Session.merge()</"
"literal> or <literal>Session.saveOrUpdate()</literal> to synchronize objects "
"with the database."

#. Tag: term
#: best_practices.xml:156
#, fuzzy, no-c-format
msgid "In a two tiered architecture, consider using long persistence contexts:"
msgstr ""
"In a two tiered architecture, consider using long persistence contexts."

#. Tag: para
#: best_practices.xml:158
#, fuzzy, no-c-format
msgid ""
"Database Transactions have to be as short as possible for best scalability. "
"However, it is often necessary to implement long running "
"<emphasis>application transactions</emphasis>, a single unit-of-work from "
"the point of view of a user. An application transaction might span several "
"client request/response cycles. It is common to use detached objects to "
"implement application transactions. An appropriate alternative in a two "
"tiered architecture, is to maintain a single open persistence contact "
"session for the whole life cycle of the application transaction. Then simply "
"disconnect from the JDBC connection at the end of each request and reconnect "
"at the beginning of the subsequent request. Never share a single session "
"across more than one application transaction or you will be working with "
"stale data."
msgstr ""
"Database Transactions have to be as short as possible for best scalability. "
"However, it is often necessary to implement long running "
"<emphasis>application transactions</emphasis>, a single unit-of-work from "
"the point of view of a user. An application transaction might span several "
"client request/response cycles. It is common to use detached objects to "
"implement application transactions. An alternative, extremely appropriate in "
"two tiered architecture, is to maintain a single open persistence contact "
"(session) for the whole life cycle of the application transaction and simply "
"disconnect from the JDBC connection at the end of each request and reconnect "
"at the beginning of the subsequent request. Never share a single session "
"across more than one application transaction, or you will be working with "
"stale data."

#. Tag: term
#: best_practices.xml:172
#, fuzzy, no-c-format
msgid "Do not treat exceptions as recoverable:"
msgstr "Don't treat exceptions as recoverable."

#. Tag: para
#: best_practices.xml:174
#, fuzzy, no-c-format
msgid ""
"This is more of a necessary practice than a \"best\" practice. When an "
"exception occurs, roll back the <literal>Transaction</literal> and close the "
"<literal>Session</literal>. If you do not do this, Hibernate cannot "
"guarantee that in-memory state accurately represents the persistent state. "
"For example, do not use <literal>Session.load()</literal> to determine if an "
"instance with the given identifier exists on the database; use "
"<literal>Session.get()</literal> or a query instead."
msgstr ""
"This is more of a necessary practice than a \"best\" practice. When an "
"exception occurs, roll back the <literal>Transaction</literal> and close the "
"<literal>Session</literal>. If you don't, Hibernate can't guarantee that in-"
"memory state accurately represents persistent state. As a special case of "
"this, do not use <literal>Session.load()</literal> to determine if an "
"instance with the given identifier exists on the database; use "
"<literal>Session.get()</literal> or a query instead."

#. Tag: term
#: best_practices.xml:184
#, fuzzy, no-c-format
msgid "Prefer lazy fetching for associations:"
msgstr "Prefer lazy fetching for associations."

#. Tag: para
#: best_practices.xml:186
#, fuzzy, no-c-format
msgid ""
"Use eager fetching sparingly. Use proxies and lazy collections for most "
"associations to classes that are not likely to be completely held in the "
"second-level cache. For associations to cached classes, where there is an a "
"extremely high probability of a cache hit, explicitly disable eager fetching "
"using <literal>lazy=\"false\"</literal>. When join fetching is appropriate "
"to a particular use case, use a query with a <literal>left join fetch</"
"literal>."
msgstr ""
"Use eager fetching sparingly. Use proxies and lazy collections for most "
"associations to classes that are not likely to be completely held in the "
"second-level cache. For associations to cached classes, where there is an a "
"extremely high probability of a cache hit, explicitly disable eager fetching "
"using <literal>lazy=\"false\"</literal>. When an join fetching is "
"appropriate to a particular use case, use a query with a <literal>left join "
"fetch</literal>."

#. Tag: term
#: best_practices.xml:196
#, fuzzy, no-c-format
msgid ""
"Use the <emphasis>open session in view</emphasis> pattern, or a disciplined "
"<emphasis>assembly phase</emphasis> to avoid problems with unfetched data:"
msgstr ""
"Use the <emphasis>open session in view</emphasis> pattern, or a disciplined "
"<emphasis>assembly phase</emphasis> to avoid problems with unfetched data."

#. Tag: para
#: best_practices.xml:201
#, fuzzy, no-c-format
msgid ""
"Hibernate frees the developer from writing tedious <emphasis>Data Transfer "
"Objects</emphasis> (DTO). In a traditional EJB architecture, DTOs serve dual "
"purposes: first, they work around the problem that entity beans are not "
"serializable; second, they implicitly define an assembly phase where all "
"data to be used by the view is fetched and marshalled into the DTOs before "
"returning control to the presentation tier. Hibernate eliminates the first "
"purpose. Unless you are prepared to hold the persistence context (the "
"session) open across the view rendering process, you will still need an "
"assembly phase. Think of your business methods as having a strict contract "
"with the presentation tier about what data is available in the detached "
"objects. This is not a limitation of Hibernate. It is a fundamental "
"requirement of safe transactional data access."
msgstr ""
"Hibernate frees the developer from writing tedious <emphasis>Data Transfer "
"Objects</emphasis> (DTO). In a traditional EJB architecture, DTOs serve dual "
"purposes: first, they work around the problem that entity beans are not "
"serializable; second, they implicitly define an assembly phase where all "
"data to be used by the view is fetched and marshalled into the DTOs before "
"returning control to the presentation tier. Hibernate eliminates the first "
"purpose. However, you will still need an assembly phase (think of your "
"business methods as having a strict contract with the presentation tier "
"about what data is available in the detached objects) unless you are "
"prepared to hold the persistence context (the session) open across the view "
"rendering process. This is not a limitation of Hibernate! It is a "
"fundamental requirement of safe transactional data access."

#. Tag: term
#: best_practices.xml:215
#, fuzzy, no-c-format
msgid "Consider abstracting your business logic from Hibernate:"
msgstr "Consider abstracting your business logic from Hibernate."

#. Tag: para
#: best_practices.xml:217
#, fuzzy, no-c-format
msgid ""
"Hide Hibernate data-access code behind an interface. Combine the "
"<emphasis>DAO</emphasis> and <emphasis>Thread Local Session</emphasis> "
"patterns. You can even have some classes persisted by handcoded JDBC "
"associated to Hibernate via a <literal>UserType</literal>. This advice is, "
"however, intended for \"sufficiently large\" applications. It is not "
"appropriate for an application with five tables."
msgstr ""
"Hide (Hibernate) data-access code behind an interface. Combine the "
"<emphasis>DAO</emphasis> and <emphasis>Thread Local Session</emphasis> "
"patterns. You can even have some classes persisted by handcoded JDBC, "
"associated to Hibernate via a <literal>UserType</literal>. (This advice is "
"intended for \"sufficiently large\" applications; it is not appropriate for "
"an application with five tables!)"

#. Tag: term
#: best_practices.xml:227
#, fuzzy, no-c-format
msgid "Do not use exotic association mappings:"
msgstr "Don't use exotic association mappings."

#. Tag: para
#: best_practices.xml:229
#, fuzzy, no-c-format
msgid ""
"Practical test cases for real many-to-many associations are rare. Most of "
"the time you need additional information stored in the \"link table\". In "
"this case, it is much better to use two one-to-many associations to an "
"intermediate link class. In fact, most associations are one-to-many and many-"
"to-one. For this reason, you should proceed cautiously when using any other "
"association style."
msgstr ""
"Good usecases for a real many-to-many associations are rare. Most of the "
"time you need additional information stored in the \"link table\". In this "
"case, it is much better to use two one-to-many associations to an "
"intermediate link class. In fact, we think that most associations are one-to-"
"many and many-to-one, you should be careful when using any other association "
"style and ask yourself if it is really neccessary."

#. Tag: term
#: best_practices.xml:239
#, fuzzy, no-c-format
msgid "Prefer bidirectional associations:"
msgstr "Prefer bidirectional associations."

#. Tag: para
#: best_practices.xml:241
#, no-c-format
msgid ""
"Unidirectional associations are more difficult to query. In a large "
"application, almost all associations must be navigable in both directions in "
"queries."
msgstr ""
"Unidirectional associations are more difficult to query. In a large "
"application, almost all associations must be navigable in both directions in "
"queries."
