msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-06-16 18:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: inheritance_mapping.xml:29
#, fuzzy, no-c-format
msgid "Inheritance mapping"
msgstr "Mapping d'héritage de classe"

#. Tag: title
#: inheritance_mapping.xml:32
#, fuzzy, no-c-format
msgid "The three strategies"
msgstr "Les trois stratégies"

#. Tag: para
#: inheritance_mapping.xml:34
#, no-c-format
msgid "Hibernate supports the three basic inheritance mapping strategies:"
msgstr "Hibernate supporte les trois stratégies d'héritage de base :"

#. Tag: para
#: inheritance_mapping.xml:40
#, no-c-format
msgid "table per class hierarchy"
msgstr "une table par hiérarchie de classe (table per class hierarchy)"

#. Tag: para
#: inheritance_mapping.xml:45
#, fuzzy, no-c-format
msgid "<para>table per subclass</para>"
msgstr ""
"#-#-#-#-#  - (PACKAGE VERSION)  #-#-#-#-#\n"
"une table par classe fille (table per subclass)\n"
"#-#-#-#-#  - (PACKAGE VERSION)  #-#-#-#-#\n"
"une table par classe fille"

#. Tag: para
#: inheritance_mapping.xml:50
#, no-c-format
msgid "table per concrete class"
msgstr "une table par classe concrète (table per concrete class)"

#. Tag: para
#: inheritance_mapping.xml:56
#, no-c-format
msgid ""
"In addition, Hibernate supports a fourth, slightly different kind of "
"polymorphism:"
msgstr ""
"Hibernate supporte en plus une quatrièmestratégie, légèrement différente, "
"qui supporte le polymorphisme :"

#. Tag: para
#: inheritance_mapping.xml:63
#, no-c-format
msgid "implicit polymorphism"
msgstr "le polymorphisme implicite"

#. Tag: para
#: inheritance_mapping.xml:69
#, fuzzy, no-c-format
msgid ""
"It is possible to use different mapping strategies for different branches of "
"the same inheritance hierarchy. You can then make use of implicit "
"polymorphism to achieve polymorphism across the whole hierarchy. However, "
"Hibernate does not support mixing <literal>&lt;subclass&gt;</literal>, "
"<literal>&lt;joined-subclass&gt;</literal> and <literal>&lt;union-"
"subclass&gt;</literal> mappings under the same root <literal>&lt;class&gt;</"
"literal> element. It is possible to mix together the table per hierarchy and "
"table per subclass strategies under the the same <literal>&lt;class&gt;</"
"literal> element, by combining the <literal>&lt;subclass&gt;</literal> and "
"<literal>&lt;join&gt;</literal> elements (see below for an example)."
msgstr ""
"Il est possible d'utiliser différentes stratégies de mapping pour "
"différentes branches d'une même hiérarchie d'héritage, et alors d'employer "
"le polymorphisme implicite pour réaliser le polymorphisme à travers toute la "
"hiérarchie. Pourtant, Hibernate ne supporte pas de mélanger des mappings "
"<literal>&lt;subclass&gt;</literal> et <literal>&lt;joined-subclass&gt;</"
"literal> et <literal>&lt;union-subclass&gt;</literal> pour le même élément "
"<literal>&lt;class&gt;</literal> racine. Il est possible de mélanger "
"ensemble les stratégies d'une table par hiérarchie et d'une table par sous-"
"classe, pour le même élément <literal>&lt;class&gt;</literal>, en combinant "
"les éléments <literal>&lt;subclass&gt;</literal> et <literal>&lt;join&gt;</"
"literal> (voir dessous)."

#. Tag: para
#: inheritance_mapping.xml:83
#, fuzzy, no-c-format
msgid ""
"It is possible to define <literal>subclass</literal>, <literal>union-"
"subclass</literal>, and <literal>joined-subclass</literal> mappings in "
"separate mapping documents directly beneath <literal>hibernate-mapping</"
"literal>. This allows you to extend a class hierarchy by adding a new "
"mapping file. You must specify an <literal>extends</literal> attribute in "
"the subclass mapping, naming a previously mapped superclass. Previously this "
"feature made the ordering of the mapping documents important. Since "
"Hibernate3, the ordering of mapping files is irrelevant when using the "
"extends keyword. The ordering inside a single mapping file still needs to be "
"defined as superclasses before subclasses."
msgstr ""
"Il est possible de définir des mappings de <literal>subclass</literal>, "
"<literal>union-subclass</literal>, et <literal>joined-subclass</literal> "
"dans des documents de mapping séparés, directement sous <literal>hibernate-"
"mapping</literal>. Ceci vous permet d'étendre une hiérarchie de classe juste "
"en ajoutant un nouveau fichier de mapping. Vous devez spécifier un attribut "
"<literal>extends</literal> dans le mapping de la sous-classe, en nommant une "
"super-classe précédemment mappée. Note : précédemment cette foncionnalité "
"rendait l'ordre des documents de mapping important. Depuis Hibernate3, "
"l'ordre des fichier de mapping n'importe plus lors de l'utilisation du mot-"
"clef \"extends\". L'ordre à l'intérieur d'un simple fichier de mapping "
"impose encore de définir les classes mères avant les classes filles."

#. Tag: programlisting
#: inheritance_mapping.xml:94
#, no-c-format
msgid ""
"<![CDATA[\n"
" <hibernate-mapping>\n"
"     <subclass name=\"DomesticCat\" extends=\"Cat\" discriminator-value=\"D"
"\">\n"
"          <property name=\"name\" type=\"string\"/>\n"
"     </subclass>\n"
" </hibernate-mapping>]]>"
msgstr ""

#. Tag: title
#: inheritance_mapping.xml:98
#, no-c-format
msgid "Table per class hierarchy"
msgstr "Une table par hiérarchie de classe"

#. Tag: para
#: inheritance_mapping.xml:100
#, fuzzy, no-c-format
msgid ""
"Suppose we have an interface <literal>Payment</literal> with the "
"implementors <literal>CreditCardPayment</literal>, <literal>CashPayment</"
"literal>, and <literal>ChequePayment</literal>. The table per hierarchy "
"mapping would display in the following way:"
msgstr ""
"Supposons que nous ayons une interface <literal>Payment</literal>, "
"implémentée par <literal>CreditCardPayment</literal>, <literal>CashPayment</"
"literal>, <literal>ChequePayment</literal>. La stratégie une table par "
"hiérarchie serait :"

#. Tag: programlisting
#: inheritance_mapping.xml:107
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Payment\" table=\"PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <discriminator column=\"PAYMENT_TYPE\" type=\"string\"/>\n"
"    <property name=\"amount\" column=\"AMOUNT\"/>\n"
"    ...\n"
"    <subclass name=\"CreditCardPayment\" discriminator-value=\"CREDIT\">\n"
"        <property name=\"creditCardType\" column=\"CCTYPE\"/>\n"
"        ...\n"
"    </subclass>\n"
"    <subclass name=\"CashPayment\" discriminator-value=\"CASH\">\n"
"        ...\n"
"    </subclass>\n"
"    <subclass name=\"ChequePayment\" discriminator-value=\"CHEQUE\">\n"
"        ...\n"
"    </subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:109
#, fuzzy, no-c-format
msgid ""
"Exactly one table is required. There is a limitation of this mapping "
"strategy: columns declared by the subclasses, such as <literal>CCTYPE</"
"literal>, cannot have <literal>NOT NULL</literal> constraints."
msgstr ""
"Une seule table est requise. Une grande limitation de cette stratégie est "
"que les colonnes déclarées par les classes filles, telles que "
"<literal>CCTYPE</literal>, ne peuvent avoir de contrainte <literal>NOT NULL</"
"literal>."

#. Tag: title
#: inheritance_mapping.xml:118
#, no-c-format
msgid "Table per subclass"
msgstr "Une table par classe fille"

#. Tag: para
#: inheritance_mapping.xml:120
#, fuzzy, no-c-format
msgid "A table per subclass mapping looks like this:"
msgstr "La stratégie une table par classe fille serait :"

#. Tag: programlisting
#: inheritance_mapping.xml:124
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Payment\" table=\"PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <property name=\"amount\" column=\"AMOUNT\"/>\n"
"    ...\n"
"    <joined-subclass name=\"CreditCardPayment\" table=\"CREDIT_PAYMENT\">\n"
"        <key column=\"PAYMENT_ID\"/>\n"
"        <property name=\"creditCardType\" column=\"CCTYPE\"/>\n"
"        ...\n"
"    </joined-subclass>\n"
"    <joined-subclass name=\"CashPayment\" table=\"CASH_PAYMENT\">\n"
"        <key column=\"PAYMENT_ID\"/>\n"
"        ...\n"
"    </joined-subclass>\n"
"    <joined-subclass name=\"ChequePayment\" table=\"CHEQUE_PAYMENT\">\n"
"        <key column=\"PAYMENT_ID\"/>\n"
"        ...\n"
"    </joined-subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:126
#, fuzzy, no-c-format
msgid ""
"Four tables are required. The three subclass tables have primary key "
"associations to the superclass table so the relational model is actually a "
"one-to-one association."
msgstr ""
"Quatre tables sont requises. Les trois tables des classes filles ont une clé "
"primaire associée à la table classe mère (le modèle relationnel est une "
"association un-vers-un)."

#. Tag: title
#: inheritance_mapping.xml:135
#, fuzzy, no-c-format
msgid "Table per subclass: using a discriminator"
msgstr "Une table par classe fille, en utilisant un discriminant"

#. Tag: para
#: inheritance_mapping.xml:137
#, fuzzy, no-c-format
msgid ""
"Hibernate's implementation of table per subclass does not require a "
"discriminator column. Other object/relational mappers use a different "
"implementation of table per subclass that requires a type discriminator "
"column in the superclass table. The approach taken by Hibernate is much more "
"difficult to implement, but arguably more correct from a relational point of "
"view. If you want to use a discriminator column with the table per subclass "
"strategy, you can combine the use of <literal>&lt;subclass&gt;</literal> and "
"<literal>&lt;join&gt;</literal>, as follows:"
msgstr ""
"Notez que l'implémentation Hibernate de la stratégie un table par classe "
"fille ne nécessite pas de colonne discriminante dans la table classe mère. "
"D'autres implémentations de mappers Objet/Relationnel utilisent une autre "
"implémentation de la stratégie une table par classe fille qui nécessite une "
"colonne de type discriminant dans la table de la classe mère. L'approche "
"prise par Hibernate est plus difficile à implémenter mais plus correcte "
"d'une point de vue relationnel. Si vous aimeriez utiliser une colonne "
"discriminante avec la stratégie d'une table par classe fille, vous pourriez "
"combiner l'utilisation de <literal>&lt;subclass&gt;</literal> et "
"<literal>&lt;join&gt;</literal>, comme suit :"

#. Tag: programlisting
#: inheritance_mapping.xml:149
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Payment\" table=\"PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <discriminator column=\"PAYMENT_TYPE\" type=\"string\"/>\n"
"    <property name=\"amount\" column=\"AMOUNT\"/>\n"
"    ...\n"
"    <subclass name=\"CreditCardPayment\" discriminator-value=\"CREDIT\">\n"
"        <join table=\"CREDIT_PAYMENT\">\n"
"            <key column=\"PAYMENT_ID\"/>\n"
"            <property name=\"creditCardType\" column=\"CCTYPE\"/>\n"
"            ...\n"
"        </join>\n"
"    </subclass>\n"
"    <subclass name=\"CashPayment\" discriminator-value=\"CASH\">\n"
"        <join table=\"CASH_PAYMENT\">\n"
"            <key column=\"PAYMENT_ID\"/>\n"
"            ...\n"
"        </join>\n"
"    </subclass>\n"
"    <subclass name=\"ChequePayment\" discriminator-value=\"CHEQUE\">\n"
"        <join table=\"CHEQUE_PAYMENT\" fetch=\"select\">\n"
"            <key column=\"PAYMENT_ID\"/>\n"
"            ...\n"
"        </join>\n"
"    </subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:151
#, no-c-format
msgid ""
"The optional <literal>fetch=\"select\"</literal> declaration tells Hibernate "
"not to fetch the <literal>ChequePayment</literal> subclass data using an "
"outer join when querying the superclass."
msgstr ""
"La déclaration optionnelle <literal>fetch=\"select\"</literal> indique à "
"Hibernate de ne pas récupérer les données de la classe fille "
"<literal>ChequePayment</literal> par une jointure externe lors des requêtes "
"sur la classe mère."

#. Tag: title
#: inheritance_mapping.xml:160
#, no-c-format
msgid "Mixing table per class hierarchy with table per subclass"
msgstr ""
"Mélange d'une table par hiérarchie de classe avec une table par classe fille"

#. Tag: para
#: inheritance_mapping.xml:162
#, fuzzy, no-c-format
msgid ""
"You can even mix the table per hierarchy and table per subclass strategies "
"using the following approach:"
msgstr ""
"Vous pouvez même mélanger les stratégies d'une table par hiérarchie de "
"classe et d'une table par classe fille en utilisant cette approche :"

#. Tag: programlisting
#: inheritance_mapping.xml:167
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Payment\" table=\"PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <discriminator column=\"PAYMENT_TYPE\" type=\"string\"/>\n"
"    <property name=\"amount\" column=\"AMOUNT\"/>\n"
"    ...\n"
"    <subclass name=\"CreditCardPayment\" discriminator-value=\"CREDIT\">\n"
"        <join table=\"CREDIT_PAYMENT\">\n"
"            <property name=\"creditCardType\" column=\"CCTYPE\"/>\n"
"            ...\n"
"        </join>\n"
"    </subclass>\n"
"    <subclass name=\"CashPayment\" discriminator-value=\"CASH\">\n"
"        ...\n"
"    </subclass>\n"
"    <subclass name=\"ChequePayment\" discriminator-value=\"CHEQUE\">\n"
"        ...\n"
"    </subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:169
#, no-c-format
msgid ""
"For any of these mapping strategies, a polymorphic association to the root "
"<literal>Payment</literal> class is mapped using <literal>&lt;many-to-one&gt;"
"</literal>."
msgstr ""
"Pour importe laquelle de ces stratégies, une association polymorphique vers "
"la classe racine <literal>Payment</literal> est mappée en utilisant "
"<literal>&lt;many-to-one&gt;</literal>."

#. Tag: programlisting
#: inheritance_mapping.xml:175
#, no-c-format
msgid ""
"<![CDATA[<many-to-one name=\"payment\" column=\"PAYMENT_ID\" class=\"Payment"
"\"/>]]>"
msgstr ""

#. Tag: title
#: inheritance_mapping.xml:180
#, no-c-format
msgid "Table per concrete class"
msgstr "Une table par classe concrète"

#. Tag: para
#: inheritance_mapping.xml:182
#, fuzzy, no-c-format
msgid ""
"There are two ways we can map the table per concrete class strategy. First, "
"you can use <literal>&lt;union-subclass&gt;</literal>."
msgstr ""
"Il y a deux manières d'utiliser la stratégie d'une table par classe "
"concrète. La première est d'employer <literal>&lt;union-subclass&gt;</"
"literal>."

#. Tag: programlisting
#: inheritance_mapping.xml:187
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Payment\">\n"
"    <id name=\"id\" type=\"long\" column=\"PAYMENT_ID\">\n"
"        <generator class=\"sequence\"/>\n"
"    </id>\n"
"    <property name=\"amount\" column=\"AMOUNT\"/>\n"
"    ...\n"
"    <union-subclass name=\"CreditCardPayment\" table=\"CREDIT_PAYMENT\">\n"
"        <property name=\"creditCardType\" column=\"CCTYPE\"/>\n"
"        ...\n"
"    </union-subclass>\n"
"    <union-subclass name=\"CashPayment\" table=\"CASH_PAYMENT\">\n"
"        ...\n"
"    </union-subclass>\n"
"    <union-subclass name=\"ChequePayment\" table=\"CHEQUE_PAYMENT\">\n"
"        ...\n"
"    </union-subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:189
#, no-c-format
msgid ""
"Three tables are involved for the subclasses. Each table defines columns for "
"all properties of the class, including inherited properties."
msgstr ""
"Trois tables sont nécessaires pour les classes filles. Chaque table définit "
"des colonnes pour toutes les propriétés de la classe, incluant les "
"propriétés héritéés."

#. Tag: para
#: inheritance_mapping.xml:194
#, fuzzy, no-c-format
msgid ""
"The limitation of this approach is that if a property is mapped on the "
"superclass, the column name must be the same on all subclass tables. The "
"identity generator strategy is not allowed in union subclass inheritance. "
"The primary key seed has to be shared across all unioned subclasses of a "
"hierarchy."
msgstr ""
"La limitation de cette approche est que si une propriété est mappée sur la "
"classe mère, le nom de la colonne doit être le même pour toutes les classes "
"filles. (Nous pourrions être plus souple dans une future version "
"d'Hibernate). La stratégie du générateur d'identifiant n'est pas permise "
"dans l'héritage de classes filles par union, en effet la valeur (NdT : seed) "
"de la clef primaire doit être partagée par toutes les classes filles \"union"
"\" d'une hiérarchie."

#. Tag: para
#: inheritance_mapping.xml:203
#, fuzzy, no-c-format
msgid ""
"If your superclass is abstract, map it with <literal>abstract=\"true\"</"
"literal>. If it is not abstract, an additional table (it defaults to "
"<literal>PAYMENT</literal> in the example above), is needed to hold "
"instances of the superclass."
msgstr ""
"Si votre classe mère est abstraite, mappez la avec <literal>abstract=\"true"
"\"</literal>. Bien sûr, si elle n'est pas abstraite, une table "
"supplémentaire (par défaut, <literal>PAYMENT</literal> dans l'exemple ci-"
"dessus) est requise pour contenir des instances de la classe mère."

#. Tag: title
#: inheritance_mapping.xml:213
#, fuzzy, no-c-format
msgid "Table per concrete class using implicit polymorphism"
msgstr "Une table par classe concrète, en utilisant le polymorphisme implicite"

#. Tag: para
#: inheritance_mapping.xml:215
#, no-c-format
msgid "An alternative approach is to make use of implicit polymorphism:"
msgstr "Une approche alternative est l'emploi du polymorphisme implicite :"

#. Tag: programlisting
#: inheritance_mapping.xml:219
#, no-c-format
msgid ""
"<![CDATA[<class name=\"CreditCardPayment\" table=\"CREDIT_PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"CREDIT_PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <property name=\"amount\" column=\"CREDIT_AMOUNT\"/>\n"
"    ...\n"
"</class>\n"
"\n"
"<class name=\"CashPayment\" table=\"CASH_PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"CASH_PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <property name=\"amount\" column=\"CASH_AMOUNT\"/>\n"
"    ...\n"
"</class>\n"
"\n"
"<class name=\"ChequePayment\" table=\"CHEQUE_PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"CHEQUE_PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <property name=\"amount\" column=\"CHEQUE_AMOUNT\"/>\n"
"    ...\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:221
#, fuzzy, no-c-format
msgid ""
"Notice that the <literal>Payment</literal> interface is not mentioned "
"explicitly. Also notice that properties of <literal>Payment</literal> are "
"mapped in each of the subclasses. If you want to avoid duplication, consider "
"using XML entities (for example, <literal>[ &lt;!ENTITY allproperties SYSTEM "
"\"allproperties.xml\"&gt; ]</literal> in the <literal>DOCTYPE</literal> "
"declaration and <literal>&amp;allproperties;</literal> in the mapping)."
msgstr ""
"Notez que nulle part nous ne mentionnons l'interface <literal>Payment</"
"literal> explicitement. Notez aussi que des propriétés de <literal>Payment</"
"literal> sont mappées dans chaque classe fille. Si vous voulez éviter des "
"duplications, considérez l'utilisation des entités XML (cf. <literal>[ &lt;!"
"ENTITY allproperties SYSTEM \"allproperties.xml\"&gt; ]</literal> dans la "
"déclaration du <literal>DOCTYPE</literal> et <literal>&amp;allproperties;</"
"literal> dans le mapping)."

#. Tag: para
#: inheritance_mapping.xml:231
#, no-c-format
msgid ""
"The disadvantage of this approach is that Hibernate does not generate SQL "
"<literal>UNION</literal>s when performing polymorphic queries."
msgstr ""
"L'inconvénient de cette approche est qu'Hibernate ne génère pas "
"d'<literal>UNION</literal>s SQL lors de l'exécution des requêtes "
"polymorphiques."

#. Tag: para
#: inheritance_mapping.xml:236
#, no-c-format
msgid ""
"For this mapping strategy, a polymorphic association to <literal>Payment</"
"literal> is usually mapped using <literal>&lt;any&gt;</literal>."
msgstr ""
"Pour cette stratégie de mapping, une association polymorphique pour "
"<literal>Payment</literal> est habituellement mappée en utilisant "
"<literal>&lt;any&gt;</literal>."

#. Tag: programlisting
#: inheritance_mapping.xml:241
#, no-c-format
msgid ""
"<![CDATA[<any name=\"payment\" meta-type=\"string\" id-type=\"long\">\n"
"    <meta-value value=\"CREDIT\" class=\"CreditCardPayment\"/>\n"
"    <meta-value value=\"CASH\" class=\"CashPayment\"/>\n"
"    <meta-value value=\"CHEQUE\" class=\"ChequePayment\"/>\n"
"    <column name=\"PAYMENT_CLASS\"/>\n"
"    <column name=\"PAYMENT_ID\"/>\n"
"</any>]]>"
msgstr ""

#. Tag: title
#: inheritance_mapping.xml:246
#, no-c-format
msgid "Mixing implicit polymorphism with other inheritance mappings"
msgstr "Mélange du polymorphisme implicite avec d'autres mappings d'héritage"

#. Tag: para
#: inheritance_mapping.xml:248
#, fuzzy, no-c-format
msgid ""
"Since the subclasses are each mapped in their own <literal>&lt;class&gt;</"
"literal> element, and since <literal>Payment</literal> is just an "
"interface), each of the subclasses could easily be part of another "
"inheritance hierarchy. You can still use polymorphic queries against the "
"<literal>Payment</literal> interface."
msgstr ""
"Il y a une chose supplémentaire à noter à propos de ce mapping. Puisque les "
"classes filles sont chacune mappées avec leur propre élément <literal>&lt;"
"class&gt;</literal> (et puisque <literal>Payment</literal> est juste une "
"interface), chaque classe fille pourrait facilement faire partie d'une autre "
"hiérarchie d'héritage ! (Et vous pouvez encore faire des requêtes "
"polymorphiques pour l'interface <literal>Payment</literal>)."

#. Tag: programlisting
#: inheritance_mapping.xml:256
#, no-c-format
msgid ""
"<![CDATA[<class name=\"CreditCardPayment\" table=\"CREDIT_PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"CREDIT_PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <discriminator column=\"CREDIT_CARD\" type=\"string\"/>\n"
"    <property name=\"amount\" column=\"CREDIT_AMOUNT\"/>\n"
"    ...\n"
"    <subclass name=\"MasterCardPayment\" discriminator-value=\"MDC\"/>\n"
"    <subclass name=\"VisaPayment\" discriminator-value=\"VISA\"/>\n"
"</class>\n"
"\n"
"<class name=\"NonelectronicTransaction\" table=\"NONELECTRONIC_TXN\">\n"
"    <id name=\"id\" type=\"long\" column=\"TXN_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    ...\n"
"    <joined-subclass name=\"CashPayment\" table=\"CASH_PAYMENT\">\n"
"        <key column=\"PAYMENT_ID\"/>\n"
"        <property name=\"amount\" column=\"CASH_AMOUNT\"/>\n"
"        ...\n"
"    </joined-subclass>\n"
"    <joined-subclass name=\"ChequePayment\" table=\"CHEQUE_PAYMENT\">\n"
"        <key column=\"PAYMENT_ID\"/>\n"
"        <property name=\"amount\" column=\"CHEQUE_AMOUNT\"/>\n"
"        ...\n"
"    </joined-subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:258
#, fuzzy, no-c-format
msgid ""
"Once again, <literal>Payment</literal> is not mentioned explicitly. If we "
"execute a query against the <literal>Payment</literal> interface, for "
"example <literal>from Payment</literal>, Hibernate automatically returns "
"instances of <literal>CreditCardPayment</literal> (and its subclasses, since "
"they also implement <literal>Payment</literal>), <literal>CashPayment</"
"literal> and <literal>ChequePayment</literal>, but not instances of "
"<literal>NonelectronicTransaction</literal>."
msgstr ""
"Encore une fois, nous ne mentionnons pas explicitement <literal>Payment</"
"literal>. Si nous exécutons une requête sur l'interface <literal>Payment</"
"literal> - par exemple, <literal>from Payment</literal> - Hibernate "
"retournera automatiquement les instances de <literal>CreditCardPayment</"
"literal> (et ses classes filles puisqu'elles implémentent aussi "
"<literal>Payment</literal>), <literal>CashPayment</literal> et "
"<literal>ChequePayment</literal> mais pas les instances de "
"<literal>NonelectronicTransaction</literal>."

#. Tag: title
#: inheritance_mapping.xml:273
#, no-c-format
msgid "Limitations"
msgstr "Limitations"

#. Tag: para
#: inheritance_mapping.xml:275
#, fuzzy, no-c-format
msgid ""
"There are limitations to the \"implicit polymorphism\" approach to the table "
"per concrete-class mapping strategy. There are somewhat less restrictive "
"limitations to <literal>&lt;union-subclass&gt;</literal> mappings."
msgstr ""
"Il y a certaines limitations à l'approche du \"polymorphisme implicite\" "
"pour la stratégie de mapping d'une table par classe concrète. Il y a plutôt "
"moins de limitations restrictives aux mappings <literal>&lt;union-"
"subclass&gt;</literal>."

#. Tag: para
#: inheritance_mapping.xml:282
#, no-c-format
msgid ""
"The following table shows the limitations of table per concrete-class "
"mappings, and of implicit polymorphism, in Hibernate."
msgstr ""
"La table suivante montre les limitations des mappings d'une table par classe "
"concrète, et du polymorphisme implicite, dans Hibernate."

#. Tag: title
#: inheritance_mapping.xml:288
#, no-c-format
msgid "Features of inheritance mappings"
msgstr "Caractéristiques du mapping d'héritage"

#. Tag: entry
#: inheritance_mapping.xml:301
#, no-c-format
msgid "Inheritance strategy"
msgstr "Stratégie d'héritage"

#. Tag: entry
#: inheritance_mapping.xml:302
#, no-c-format
msgid "Polymorphic many-to-one"
msgstr "many-to-one polymorphique"

#. Tag: entry
#: inheritance_mapping.xml:303
#, no-c-format
msgid "Polymorphic one-to-one"
msgstr "one-to-one polymorphique"

#. Tag: entry
#: inheritance_mapping.xml:304
#, no-c-format
msgid "Polymorphic one-to-many"
msgstr "one-to-many polymorphique"

#. Tag: entry
#: inheritance_mapping.xml:305
#, no-c-format
msgid "Polymorphic many-to-many"
msgstr "many-to-many polymorphique"

#. Tag: entry
#: inheritance_mapping.xml:306
#, no-c-format
msgid "Polymorphic <literal>load()/get()</literal>"
msgstr ""

#. Tag: entry
#: inheritance_mapping.xml:307
#, no-c-format
msgid "Polymorphic queries"
msgstr "Requêtes polymorphiques"

#. Tag: entry
#: inheritance_mapping.xml:308
#, no-c-format
msgid "Polymorphic joins"
msgstr "Jointures polymorphiques"

#. Tag: entry
#: inheritance_mapping.xml:309
#, no-c-format
msgid "Outer join fetching"
msgstr "Récupération par jointure externe"

#. Tag: entry
#: inheritance_mapping.xml:314
#, no-c-format
msgid "table per class-hierarchy"
msgstr "une table par hiérarchie de classe"

#. Tag: literal
#: inheritance_mapping.xml:315 inheritance_mapping.xml:326
#: inheritance_mapping.xml:337
#, no-c-format
msgid "&lt;many-to-one&gt;"
msgstr "&lt;many-to-one&gt;"

#. Tag: literal
#: inheritance_mapping.xml:316 inheritance_mapping.xml:327
#: inheritance_mapping.xml:338
#, no-c-format
msgid "&lt;one-to-one&gt;"
msgstr "&lt;one-to-one&gt;"

#. Tag: literal
#: inheritance_mapping.xml:317 inheritance_mapping.xml:328
#, no-c-format
msgid "&lt;one-to-many&gt;"
msgstr "&lt;one-to-many&gt;"

#. Tag: literal
#: inheritance_mapping.xml:318 inheritance_mapping.xml:329
#: inheritance_mapping.xml:340
#, no-c-format
msgid "&lt;many-to-many&gt;"
msgstr "&lt;many-to-many&gt;"

#. Tag: literal
#: inheritance_mapping.xml:319 inheritance_mapping.xml:330
#: inheritance_mapping.xml:341
#, no-c-format
msgid "s.get(Payment.class, id)"
msgstr "s.get(Payment.class, id)"

#. Tag: literal
#: inheritance_mapping.xml:320 inheritance_mapping.xml:331
#: inheritance_mapping.xml:342 inheritance_mapping.xml:353
#, no-c-format
msgid "from Payment p"
msgstr "from Payment p"

#. Tag: literal
#: inheritance_mapping.xml:321 inheritance_mapping.xml:332
#: inheritance_mapping.xml:343
#, no-c-format
msgid "from Order o join o.payment p"
msgstr "from Order o join o.payment p"

#. Tag: emphasis
#: inheritance_mapping.xml:322 inheritance_mapping.xml:333
#: inheritance_mapping.xml:344
#, no-c-format
msgid "supported"
msgstr "supportée"

#. Tag: entry
#: inheritance_mapping.xml:325
#, fuzzy, no-c-format
msgid "<entry>table per subclass</entry>"
msgstr ""
"#-#-#-#-#  - (PACKAGE VERSION)  #-#-#-#-#\n"
"une table par classe fille (table per subclass)\n"
"#-#-#-#-#  - (PACKAGE VERSION)  #-#-#-#-#\n"
"une table par classe fille"

#. Tag: entry
#: inheritance_mapping.xml:336
#, no-c-format
msgid "table per concrete-class (union-subclass)"
msgstr "une table par classe concrète (union-subclass)"

#. Tag: entry
#: inheritance_mapping.xml:339
#, no-c-format
msgid ""
"<literal>&lt;one-to-many&gt;</literal> (for <literal>inverse=\"true\"</"
"literal> only)"
msgstr ""

#. Tag: entry
#: inheritance_mapping.xml:347
#, no-c-format
msgid "table per concrete class (implicit polymorphism)"
msgstr "une table par classe concrète (polymorphisme implicite)"

#. Tag: literal
#: inheritance_mapping.xml:348
#, no-c-format
msgid "&lt;any&gt;"
msgstr "&lt;any&gt;"

#. Tag: emphasis
#: inheritance_mapping.xml:349 inheritance_mapping.xml:350
#: inheritance_mapping.xml:354 inheritance_mapping.xml:355
#, fuzzy, no-c-format
msgid "not supported"
msgstr ""
"#-#-#-#-#  - (PACKAGE VERSION)  #-#-#-#-#\n"
"non supporté\n"
"#-#-#-#-#  - (PACKAGE VERSION)  #-#-#-#-#\n"
"non supporté\n"
"#-#-#-#-#  - (PACKAGE VERSION)  #-#-#-#-#\n"
"non supportées\n"
"#-#-#-#-#  - (PACKAGE VERSION)  #-#-#-#-#\n"
"non supportée"

#. Tag: literal
#: inheritance_mapping.xml:351
#, no-c-format
msgid "&lt;many-to-any&gt;"
msgstr "&lt;many-to-any&gt;"

#. Tag: literal
#: inheritance_mapping.xml:352
#, no-c-format
msgid ""
"s.createCriteria(Payment.class).add( Restrictions.idEq(id) ).uniqueResult()"
msgstr ""
"s.createCriteria(Payment.class).add( Restrictions.idEq(id) ).uniqueResult()"

#~ msgid "load()/get()"
#~ msgstr "load()/get()"

#~ msgid "Polymorphic <placeholder-1/>"
#~ msgstr "<placeholder-1/> polymorphique"

#~ msgid "inverse=\"true\""
#~ msgstr "inverse=\"true\""

#~ msgid "<placeholder-1/> (for <placeholder-2/> only)"
#~ msgstr "<placeholder-1/> (pour <placeholder-2/> seulement)"
