msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-06-10 21:02+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: architecture.xml:30
#, no-c-format
msgid "Architecture"
msgstr "아키텍처"

#. Tag: title
#: architecture.xml:33
#, no-c-format
msgid "Overview"
msgstr "개요"

#. Tag: para
#: architecture.xml:35
#, fuzzy, no-c-format
msgid ""
"The diagram below provides a high-level view of the Hibernate architecture:"
msgstr "Hibernate 아키텍처에 대한 (매우) 높은 수준의 개요::"

#. Tag: para
#: architecture.xml:50
#, fuzzy, no-c-format
msgid ""
"We do not have the scope in this document to provide a more detailed view of "
"all the runtime architectures available; Hibernate is flexible and supports "
"several different approaches. We will, however, show the two extremes: "
"\"minimal\" architecture and \"comprehensive\" architecture."
msgstr ""
"우리는 런타임 아키텍처에 대한 보다 상세한 뷰를 보여주고 싶다. 불행하게도, "
"Hibernate는 유연하며 몇 가지 접근법들을 제공한다. 우리는 두 가지 극단을 보여"
"줄 것이다. \"경량급\" 아키텍처는 그것 자신의 JDBC 커넥션들을 제공하고 그것 자"
"신의 트랜잭션들을 관리하는 어플리케이션을 갖는다. 이 접근법은 Hibernate의 API"
"의 최소 부분집합을 사용한다:"

#. Tag: para
#: architecture.xml:56
#, fuzzy, no-c-format
msgid ""
"This next diagram illustrates how Hibernate utilizes database and "
"configuration data to provide persistence services, and persistent objects, "
"to the application."
msgstr ""
"이 다이어그램은 어플리케이션에 영속화 서비스들(과 영속 객체들)을 제공하기 위"
"해 데이터베이스와 컨피그레이션을 사용하는 Hibernate를 보여준다."

#. Tag: para
#: architecture.xml:61
#, fuzzy, no-c-format
msgid ""
"The \"minimal\" architecture has the application provide its own JDBC "
"connections and manage its own transactions. This approach uses a minimal "
"subset of Hibernate's APIs:"
msgstr ""
"우리는 런타임 아키텍처에 대한 보다 상세한 뷰를 보여주고 싶다. 불행하게도, "
"Hibernate는 유연하며 몇 가지 접근법들을 제공한다. 우리는 두 가지 극단을 보여"
"줄 것이다. \"경량급\" 아키텍처는 그것 자신의 JDBC 커넥션들을 제공하고 그것 자"
"신의 트랜잭션들을 관리하는 어플리케이션을 갖는다. 이 접근법은 Hibernate의 API"
"의 최소 부분집합을 사용한다:"

#. Tag: para
#: architecture.xml:78
#, fuzzy, no-c-format
msgid ""
"The \"comprehensive\" architecture abstracts the application away from the "
"underlying JDBC/JTA APIs and allows Hibernate to manage the details."
msgstr ""
"\"전체 정수\" 아키텍처는 기본 JDBC/JTA로부터 어플리케이션을 추상화 시키고 "
"Hibernate로 하여금 상세한 것을 처리하게 한다."

#. Tag: para
#: architecture.xml:92
#, fuzzy, no-c-format
msgid "Here are some definitions of the objects depicted in the diagrams:"
msgstr ""
"다음은 다이어그램들 내에 있는 객체들에 대한 몇가지 정의들이다: <placeholder-"
"1/>"

#. Tag: term
#: architecture.xml:97
#, no-c-format
msgid "SessionFactory (<literal>org.hibernate.SessionFactory</literal>)"
msgstr "SessionFactory (<literal>org.hibernate.SessionFactory</literal>)"

#. Tag: para
#: architecture.xml:99
#, fuzzy, no-c-format
msgid ""
"A threadsafe, immutable cache of compiled mappings for a single database. A "
"factory for <literal>Session</literal> and a client of "
"<literal>ConnectionProvider</literal>, <literal>SessionFactory</literal> can "
"hold an optional (second-level) cache of data that is reusable between "
"transactions at a process, or cluster, level."
msgstr ""
"단일 데이터베이스에 대한 컴파일된 매핑들의 threadsafe (불변의) 캐시. Session"
"과 ConnectionProvider의 클라이언트를 위한 팩토리. 프로세스 레벨 또는 클러스"
"터 레벨에서 트랜잭션들 사이에 재사용 가능한 데이터의 선택적인 (second-level) "
"캐시를 보관할 수도 있다."

#. Tag: term
#: architecture.xml:109
#, no-c-format
msgid "Session (<literal>org.hibernate.Session</literal>)"
msgstr "Session (<literal>org.hibernate.Session</literal>)"

#. Tag: para
#: architecture.xml:111
#, fuzzy, no-c-format
msgid ""
"A single-threaded, short-lived object representing a conversation between "
"the application and the persistent store. It wraps a JDBC connection and is "
"a factory for <literal>Transaction</literal>. <literal>Session</literal> "
"holds a mandatory first-level cache of persistent objects that are used when "
"navigating the object graph or looking up objects by identifier."
msgstr ""
"어플리케이션과 영속 저장소 사이의 대화를 표현하는 단일 쓰레드이고, 수명이 짧"
"은 객체. JDBC 커넥션을 포장한다. <literal>Transaction</literal> 용 팩토리. 객"
"체 그래프를 네비게이트 하거나 식별자로 객체들을 룩업할 때 사용되는 영속 객체"
"들에 대한 필수적인(첫 번째 레벨의) 캐시를 보관한다."

#. Tag: term
#: architecture.xml:121
#, no-c-format
msgid "Persistent objects and collections"
msgstr "영속 객체들과 콜렉션들"

#. Tag: para
#: architecture.xml:123
#, fuzzy, no-c-format
msgid ""
"Short-lived, single threaded objects containing persistent state and "
"business function. These can be ordinary JavaBeans/POJOs. They are "
"associated with exactly one <literal>Session</literal>. Once the "
"<literal>Session</literal> is closed, they will be detached and free to use "
"in any application layer (for example, directly as data transfer objects to "
"and from presentation)."
msgstr ""
"persistent 상태와 비지니스 기능을 포함하는 수명이 짧고, 단일 쓰레드인 객체"
"들. 이것들은 통상의 JavaBeans/POJO들일 수 있고, 오직 그것들에 대한 오직 특별"
"한 것은 그것들이 현재 (정확하게 한 개의) <literal>Session</literal>과 연관되"
"어 있다는 점이다. <literal>Session</literal>이 닫히자마자, 그것들은 분리될"
"(detached 상태가 될) 것이고 어플리케이션 레이어에서 사용하는 것이 자유로와진"
"다(예를 들면. 직접적으로 프리젠테이션 계층으로 데이터 전송 객체들로서 그리고 "
"직접적으로 프리젠테이션 계층으로부터 데이터 전송 객체들로서)."

#. Tag: term
#: architecture.xml:133
#, no-c-format
msgid "Transient and detached objects and collections"
msgstr "전이(Transient, 필자 주-과도) 객체들과 콜렉션들"

#. Tag: para
#: architecture.xml:135
#, fuzzy, no-c-format
msgid ""
"Instances of persistent classes that are not currently associated with a "
"<literal>Session</literal>. They may have been instantiated by the "
"application and not yet persisted, or they may have been instantiated by a "
"closed <literal>Session</literal>."
msgstr ""
"<literal>Session</literal>과 현재 연관되어 있지 않은 영속 클래스들의 인스턴스"
"들. 그것들은 어플리케이션에 의해 초기화 되었고 (아직) 영속화 되지 않았거나 그"
"것들은 닫혀진<literal>Session</literal>에 의해 초기화 되었을 수도 있다."

#. Tag: term
#: architecture.xml:144
#, no-c-format
msgid "Transaction (<literal>org.hibernate.Transaction</literal>)"
msgstr "Transaction (<literal>org.hibernate.Transaction</literal>)"

#. Tag: para
#: architecture.xml:146
#, fuzzy, no-c-format
msgid ""
"(Optional) A single-threaded, short-lived object used by the application to "
"specify atomic units of work. It abstracts the application from the "
"underlying JDBC, JTA or CORBA transaction. A <literal>Session</literal> "
"might span several <literal>Transaction</literal>s in some cases. However, "
"transaction demarcation, either using the underlying API or "
"<literal>Transaction</literal>, is never optional."
msgstr ""
"(옵션) 작업의 원자 단위를 지정하기 위해 어플리케이션에 의해 사용되는 단일 쓰"
"레드이고, 수명이 짧은 객체. 기본 JDBC, JTA 또는 CORBA 트랜잭션으로부터 어플리"
"케이션을 추상화 시킨다. 몇몇 경우들에서 하나의 <literal>Session</literal>은 "
"여러 개의 <literal>Transaction</literal>들에 걸칠 수 있다. 하지만 기본 API 또"
"는 <literal>Transaction</literal>을 사용하는 트랜잭션 경계 설정은 결코 옵션"
"이 아니다!"

#. Tag: term
#: architecture.xml:157
#, no-c-format
msgid ""
"ConnectionProvider (<literal>org.hibernate.connection.ConnectionProvider</"
"literal>)"
msgstr ""
"ConnectionProvider (<literal>org.hibernate.connection.ConnectionProvider</"
"literal>)"

#. Tag: para
#: architecture.xml:159
#, fuzzy, no-c-format
msgid ""
"(Optional) A factory for, and pool of, JDBC connections. It abstracts the "
"application from underlying <literal>Datasource</literal> or "
"<literal>DriverManager</literal>. It is not exposed to application, but it "
"can be extended and/or implemented by the developer."
msgstr ""
"(옵션) JDBC 커넥션들에 대한 팩토리(그리고 그것들의 pool). 기본 "
"<literal>Datasource</literal> 또는 <literal>DriverManager</literal>로부터 어"
"플리케이션을 추상화 시킨다. 어플리케이션에 노출되지는 않지만 개발자에 의해 확"
"장/구현 된다."

#. Tag: term
#: architecture.xml:167
#, no-c-format
msgid ""
"TransactionFactory (<literal>org.hibernate.TransactionFactory</literal>)"
msgstr ""
"TransactionFactory (<literal>org.hibernate.TransactionFactory</literal>)"

#. Tag: para
#: architecture.xml:169
#, fuzzy, no-c-format
msgid ""
"(Optional) A factory for <literal>Transaction</literal> instances. It is not "
"exposed to the application, but it can be extended and/or implemented by the "
"developer."
msgstr ""
"(옵션) <literal>Transaction</literal> 인스턴스들에 대한 팩토리. 어플리케이션"
"에 노출되지는 않지만 개발자에 의해 확장/구현 된다."

#. Tag: emphasis
#: architecture.xml:176
#, no-c-format
msgid "Extension Interfaces"
msgstr "Extension Interfaces"

#. Tag: para
#: architecture.xml:178
#, fuzzy, no-c-format
msgid ""
"Hibernate offers a range of optional extension interfaces you can implement "
"to customize the behavior of your persistence layer. See the API "
"documentation for details."
msgstr ""
"Hibernate는 당신의 영속 계층의 특성을 맞춤화 시키기 위해 당신이 구현할 수 있"
"는 선택적인 확장 인터페이스들을 제공한다. 상세한 것은 API 문서를 보라."

#. Tag: para
#: architecture.xml:187
#, fuzzy, no-c-format
msgid ""
"Given a \"minimal\" architecture, the application bypasses the "
"<literal>Transaction</literal>/<literal>TransactionFactory</literal> and/or "
"<literal>ConnectionProvider</literal> APIs to communicate with JTA or JDBC "
"directly."
msgstr ""
"주어진 \"경량급\" 아키텍처의 경우, 어플리케이션은 JTA 또는 JDBC와 직접 대화하"
"기 위해서 <literal>Transaction</literal>/<literal>TransactionFactory</"
"literal> 그리고/또는 <literal>ConnectionProvider</literal> API들을 무시한다."

#. Tag: title
#: architecture.xml:195
#, no-c-format
msgid "Instance states"
msgstr "인스턴스 상태들"

#. Tag: para
#: architecture.xml:196
#, fuzzy, no-c-format
msgid ""
"An instance of a persistent class can be in one of three different states. "
"These states are defined in relation to a <emphasis>persistence context</"
"emphasis>. The Hibernate <literal>Session</literal> object is the "
"persistence context. The three different states are as follows:"
msgstr ""
"영속 클래스들의 인스턴스는 세개의 상태들 중 하나 일 수 있다. 그것들(상태들)"
"은 영속 컨텍스트(<emphasis>persistence context</emphasis>)에 대해 정의된다. "
"Hibernate <literal>Session</literal> 객체는 영속 컨텍스트이다:"

#. Tag: term
#: architecture.xml:204
#, no-c-format
msgid "transient"
msgstr "transient"

#. Tag: para
#: architecture.xml:206
#, fuzzy, no-c-format
msgid ""
"The instance is not associated with any persistence context. It has no "
"persistent identity or primary key value."
msgstr ""
"인스턴스는 임의의 컨텍스트와 연관되어 있지 않고, 결코 연관된 적이 없었다. 그"
"것은 영속 식별자(프라이머리 키 값)을 갖지 않는다."

#. Tag: term
#: architecture.xml:214
#, no-c-format
msgid "persistent"
msgstr "persistent"

#. Tag: para
#: architecture.xml:216
#, fuzzy, no-c-format
msgid ""
"The instance is currently associated with a persistence context. It has a "
"persistent identity (primary key value) and can have a corresponding row in "
"the database. For a particular persistence context, Hibernate "
"<emphasis>guarantees</emphasis> that persistent identity is equivalent to "
"Java identity in relation to the in-memory location of the object."
msgstr ""
"인스턴스는 현재 영속 컨텍스트와 연관되어 있다. 그것은 영속 식별자(프라이머리 "
"키 값) 그리고 아마 데이터베이스 내에 있는 대응하는 행을 갖는다. 특별한 영속 "
"컨텍스트의 경우, Hibernate는 영속 identity가 Java identity(객체의 메모리 내 "
"위치)와 같다는 점을 <emphasis>보증한다</emphasis>."

#. Tag: term
#: architecture.xml:228
#, no-c-format
msgid "detached"
msgstr "detached"

#. Tag: para
#: architecture.xml:230
#, fuzzy, no-c-format
msgid ""
"The instance was once associated with a persistence context, but that "
"context was closed, or the instance was serialized to another process. It "
"has a persistent identity and can have a corresponding row in the database. "
"For detached instances, Hibernate does not guarantee the relationship "
"between persistent identity and Java identity."
msgstr ""
"인스턴스는 영속 컨텍스트와 한번 연관되었지만, 그 컨텍스트가 닫혔거나, 그 인스"
"턴스가 또 다른 프로세스로 직렬화 되었다. 그것은 영속 identity 그리고, 아마 데"
"이터베이스 내에 대응하는 행을 갖는다. detached 인스턴스들의 경우, Hibernate"
"는 영속 identity과 Java identity 사이의 관계를 보증하지 않는다."

#. Tag: title
#: architecture.xml:245
#, no-c-format
msgid "JMX Integration"
msgstr "JMX 통합"

#. Tag: para
#: architecture.xml:247
#, fuzzy, no-c-format
msgid ""
"JMX is the J2EE standard for the management of Java components. Hibernate "
"can be managed via a JMX standard service. AN MBean implementation is "
"provided in the distribution: <literal>org.hibernate.jmx.HibernateService</"
"literal>."
msgstr ""
"JMX는 자바 컴포넌트 관리를 위한 J2EE 표준이다. Hibernate는 JMX 표준 서비스를 "
"통해 관리될 수도 있다. 우리는 배포본 내에 MBean 구현, <literal>org.hibernate."
"jmx.HibernateService</literal>를 제공한다."

#. Tag: para
#: architecture.xml:253
#, fuzzy, no-c-format
msgid ""
"For an example of how to deploy Hibernate as a JMX service on the JBoss "
"Application Server, please see the JBoss User Guide. JBoss AS also provides "
"these benefits if you deploy using JMX:"
msgstr ""
"JBoss 어플리케이션 서버 상에 Hibernae를 JMX 서비스로서 배치하는 방법에 대한 "
"예제는 JBoss 사용자 가이드를 보길 바란다. JBoss 어플리케이션 서버 상에서, 만"
"일 당신이 JMX를 사용하여 배치할 경우 당신은 또한 다음 이점들을 얻는다:"

#. Tag: para
#: architecture.xml:261
#, fuzzy, no-c-format
msgid ""
"<emphasis>Session Management</emphasis>: the Hibernate <literal>Session</"
"literal>'s life cycle can be automatically bound to the scope of a JTA "
"transaction. This means that you no longer have to manually open and close "
"the <literal>Session</literal>; this becomes the job of a JBoss EJB "
"interceptor. You also do not have to worry about transaction demarcation in "
"your code (if you would like to write a portable persistence layer use the "
"optional Hibernate <literal>Transaction</literal> API for this). You call "
"the <literal>HibernateContext</literal> to access a <literal>Session</"
"literal>."
msgstr ""
"<emphasis>Session 관리:</emphasis> Hibernate <literal>Session</literal>의 생"
"명주기가 JTA 트랜잭션의 영역 내에 자동적으로 바인드 될 수 있다. 이것은 당신"
"이 더이상 <literal>Session</literal>을 수작업으로 열고 닫지 않아도 됨을 의미"
"하고, 이것은 JBoss EJB 인터셉터의 업무가 된다. 당신은 또한 더 이상 당신의 코"
"드 어느 곳에서든 트랜잭션 경계설정에 대해 걱정하지 않아도 된다(당신이 물론 이"
"식성 있는 영속 계층을 작성하고자 원하지 않는한, 이를 위해 옵션 Hibernate "
"<literal>Transaction</literal> API를 사용하라). 당신은 <literal>Session</"
"literal>에 접근하기 위해 <literal>HibernateContext</literal>를 호출한다."

#. Tag: para
#: architecture.xml:273
#, fuzzy, no-c-format
msgid ""
"<emphasis>HAR deployment</emphasis>: the Hibernate JMX service is deployed "
"using a JBoss service deployment descriptor in an EAR and/or SAR file, as it "
"supports all the usual configuration options of a Hibernate "
"<literal>SessionFactory</literal>. However, you still need to name all your "
"mapping files in the deployment descriptor. If you use the optional HAR "
"deployment, JBoss will automatically detect all mapping files in your HAR "
"file."
msgstr ""
"<emphasis>HAR 배치:</emphasis> 대개 당신은 JBoss 서비스 배치 디스크립터를 사"
"용하여 Hibernate JMX 서비스를 (EAR 과/또는 SAR 파일로) 배치하고, 그것은 "
"Hibernate <literal>SessionFactory</literal>의 통상적인 구성 옵션들 모두를 지"
"원한다. 하지만 당신은 여전히 모든 당신의 매핑 파일들을 배치 디스크립터 속에 "
"명명해야 한다. 만일 당신이 옵션 HAR 배치를 사용하고자 결정하는 경우, JBoss는 "
"당신의 HAR 파일 내에 있는 모든 매핑 파일들을 자동적으로 검출해낼 것이다."

#. Tag: para
#: architecture.xml:284
#, no-c-format
msgid ""
"Consult the JBoss AS user guide for more information about these options."
msgstr ""
"이들 옵션들에 대한 추가 정보는 JBoss 어플리케이션 서버 사용자 가이드를 참조하"
"라."

#. Tag: para
#: architecture.xml:288
#, fuzzy, no-c-format
msgid ""
"Another feature available as a JMX service is runtime Hibernate statistics. "
"See <xref linkend=\"configuration-optional-statistics\"/> for more "
"information."
msgstr ""
"JMX 서비스로서 이용 가능한 또다른 특징은 런타임 Hibernate 통계이다. <xref "
"linkend=\"configuration-optional-statistics\"/>를 보라."

#. Tag: title
#: architecture.xml:295
#, no-c-format
msgid "JCA Support"
msgstr "JCA 지원"

#. Tag: para
#: architecture.xml:296
#, fuzzy, no-c-format
msgid ""
"Hibernate can also be configured as a JCA connector. Please see the website "
"for more information. Please note, however, that at this stage Hibernate JCA "
"support is under development."
msgstr ""
"Hibernate는 JCA 커넥터로서 구성될 수도 있다. 상세한 것은 웹 사이트를 보길 바"
"란다. Hibernate JCA 지원은 여전히 실험적으로 검토 중에 있음을 노트하길 바란"
"다."

#. Tag: title
#: architecture.xml:303
#, fuzzy, no-c-format
msgid "Contextual sessions"
msgstr "컨텍스트 상의 세션들"

#. Tag: para
#: architecture.xml:304
#, fuzzy, no-c-format
msgid ""
"Most applications using Hibernate need some form of \"contextual\" session, "
"where a given session is in effect throughout the scope of a given context. "
"However, across applications the definition of what constitutes a context is "
"typically different; different contexts define different scopes to the "
"notion of current. Applications using Hibernate prior to version 3.0 tended "
"to utilize either home-grown <literal>ThreadLocal</literal>-based contextual "
"sessions, helper classes such as <literal>HibernateUtil</literal>, or "
"utilized third-party frameworks, such as Spring or Pico, which provided "
"proxy/interception-based contextual sessions."
msgstr ""
"Hibernate를 사용하는 대부분의 어플리케이션들은 어떤 양식의 \"컨텍스트상의"
"(contextual)\" 세션들을 필요로 한다. 여기서 주어진 세션은 주어진 컨텍스트의 "
"영역에 걸쳐 활동을 한다. 하지만 어플리케이션들을 가로질러 컨텍스트를 구성하"
"는 것에 대한 정의는 일반적으로 다르다; 그리고 다른 컨텍스트들은 현재라고 하"
"는 개념에 대해 다른 영역들을 정의한다. 버전 3.0 전의 Hibernate를 사용하는 어"
"플리케이션들은 자가생산된 <literal>ThreadLocal</literal>-기반의 컨텍스상의 세"
"션들, <literal>HibernateUtil</literal>과 같은 helper 클래스들을 활용했거나 프"
"락시/인터셉션 기반의 컨텍스트상의 세션들을 제공해주었던 (Spring 또는 Pico와 "
"같은 )제 3의 프레임웍들을 활용하는 경향이 있었다."

#. Tag: para
#: architecture.xml:313
#, fuzzy, no-c-format
msgid ""
"Starting with version 3.0.1, Hibernate added the <literal>SessionFactory."
"getCurrentSession()</literal> method. Initially, this assumed usage of "
"<literal>JTA</literal> transactions, where the <literal>JTA</literal> "
"transaction defined both the scope and context of a current session. Given "
"the maturity of the numerous stand-alone <literal>JTA TransactionManager</"
"literal> implementations, most, if not all, applications should be using "
"<literal>JTA</literal> transaction management, whether or not they are "
"deployed into a <literal>J2EE</literal> container. Based on that, the "
"<literal>JTA</literal>-based contextual sessions are all you need to use."
msgstr ""
"버전 3.0.1에서부터 시작하여, Hibernate는 <literal>SessionFactory."
"getCurrentSession()</literal> 메소드를 추가했다. 초기에 이것은 <literal>JTA</"
"literal> 트랜잭션들을 사용하는 것을 전제했다. 여기서 <literal>JTA</literal> "
"트랜잭션은 현재 세션의 영역과 컨텍스트를 정의했다. Hibernate 팀은 성숙된 다수"
"의 스탠드얼론 <literal>JTA TransactionManager</literal> 구현들이 발표되면, "
"(전부는 아니겠지만) 대부분의 어플리케이션들이 그것들이 <literal>J2EE</"
"literal> 컨테이너 내로 배치되든 그렇지 않든 간에 <literal>JTA</literal> 트랜"
"잭션 관리를 사용하게 될 것이라고 주장한다. 그것에 기초하여, <literal>JTA</"
"literal>에 기반한 컨텍스트상의 세션들은 언젠가 당신이 사용을 필요로 하게 될 "
"전부다."

#. Tag: para
#: architecture.xml:323
#, fuzzy, no-c-format
msgid ""
"However, as of version 3.1, the processing behind <literal>SessionFactory."
"getCurrentSession()</literal> is now pluggable. To that end, a new extension "
"interface, <literal>org.hibernate.context.CurrentSessionContext</literal>, "
"and a new configuration parameter, <literal>hibernate."
"current_session_context_class</literal>, have been added to allow "
"pluggability of the scope and context of defining current sessions."
msgstr ""
"하지만 버전 3.1 이후로 <literal>SessionFactory.getCurrentSession()</literal> "
"이면의 처리과정은 이제 플러그 가능하다. 그것을 끝내기 위해, 하나의 새로운 확"
"장 인터페이스 (<literal>org.hibernate.context.CurrentSessionContext</"
"literal>)와 하나의 새로운 구성 파라미터(<literal>hibernate."
"current_session_context_class</literal>)가 현재 세션들을 정의하는 영역과 컨텍"
"스트의 플러그 가능성을 허용하기 위해 추가되었다."

#. Tag: para
#: architecture.xml:330
#, fuzzy, no-c-format
msgid ""
"See the Javadocs for the <literal>org.hibernate.context."
"CurrentSessionContext</literal> interface for a detailed discussion of its "
"contract. It defines a single method, <literal>currentSession()</literal>, "
"by which the implementation is responsible for tracking the current "
"contextual session. Out-of-the-box, Hibernate comes with three "
"implementations of this interface:"
msgstr ""
"그것의 계약에 대한 상세한 논의는 <literal>org.hibernate.context."
"CurrentSessionContext</literal> 인터페이스에 관한 javadocs를 보라. 그것은 하"
"나의 메소드, <literal>currentSession()</literal>를 정의하며, 그 구현은 현재"
"의 컨텍스트 상의 세션을 추적할 책임이 있다. 비공식적으로, Hibernate는 이 인터"
"페이스에 대한 세 개의 구현들을 부수적으로 포함하고 있다."

#. Tag: para
#: architecture.xml:340
#, fuzzy, no-c-format
msgid ""
"<literal>org.hibernate.context.JTASessionContext</literal>: current sessions "
"are tracked and scoped by a <literal>JTA</literal> transaction. The "
"processing here is exactly the same as in the older JTA-only approach. See "
"the Javadocs for details."
msgstr ""
"<literal>org.hibernate.context.JTASessionContext</literal> - 현재의 세션들은 "
"하나의 <literal>JTA</literal>에 의해 추적되고 영역화 된다. 여기서 처리과정은 "
"이전의 JTA-전용 접근과 정확하게 동일하다. 상세한 것은 javadocs를 보라."

#. Tag: para
#: architecture.xml:348
#, fuzzy, no-c-format
msgid ""
"<literal>org.hibernate.context.ThreadLocalSessionContext</literal>:current "
"sessions are tracked by thread of execution. See the Javadocs for details."
msgstr ""
"<literal>org.hibernate.context.ThreadLocalSessionContext</literal> - 현재의 "
"세션들은 실행 쓰레드에 의해 추적된다. 상세한 것은 다시 javadocs를 보라."

#. Tag: para
#: architecture.xml:354
#, fuzzy, no-c-format
msgid ""
"<literal>org.hibernate.context.ManagedSessionContext</literal>: current "
"sessions are tracked by thread of execution. However, you are responsible to "
"bind and unbind a <literal>Session</literal> instance with static methods on "
"this class: it does not open, flush, or close a <literal>Session</literal>."
msgstr ""
"NOT TRANSLATED! <literal>org.hibernate.context.ManagedSessionContext</"
"literal> - current sessions are tracked by thread of execution. However, you "
"are responsible to bind and unbind a <literal>Session</literal> instance "
"with static methods on this class, it does never open, flush, or close a "
"<literal>Session</literal>."

#. Tag: para
#: architecture.xml:363
#, fuzzy, no-c-format
msgid ""
"The first two implementations provide a \"one session - one database "
"transaction\" programming model. This is also also known and used as "
"<emphasis>session-per-request</emphasis>. The beginning and end of a "
"Hibernate session is defined by the duration of a database transaction. If "
"you use programmatic transaction demarcation in plain JSE without JTA, you "
"are advised to use the Hibernate <literal>Transaction</literal> API to hide "
"the underlying transaction system from your code. If you use JTA, you can "
"utilize the JTA interfaces to demarcate transactions. If you execute in an "
"EJB container that supports CMT, transaction boundaries are defined "
"declaratively and you do not need any transaction or session demarcation "
"operations in your code. Refer to <xref linkend=\"transactions\"/> for more "
"information and code examples."
msgstr ""
"처음의 두 구현들은 <emphasis>session-per-request</emphasis>로 알려지고 사용되"
"고 있는 \"하나의 세션 - 하나의 데이터베이스 트랜잭션\" 프로그래밍 모형을 제공"
"한다. 하나의 Hibernate 세션의 시작과 끝은 데이터베이스 트랜잭션의 존속 기간"
"에 의해 정의된다. 만일 (예를 들면 순수 J2SE에서 또는 JTA/UserTransaction/BMT"
"의 경우에) 당신이 프로그램 상의 트랜잭션 경계구분을 사용할 경우, 당신은 당신"
"의 코드로부터 기본 트랜잭션 시스템을 은폐시키는데 Hibernate "
"<literal>Transaction</literal> API를 사용하는 것이 권장된다. 만일 당신이 CMT"
"를 지원하는 하나의 EJB 컨테이너에서 실행할 경우, 트랜잭션 경계들이 선언적으"
"로 정의되고 당신은 당신의 코드 내에 어떤 트랜잭션도 세션 경계구분 오퍼레이션"
"들을 필요로 하지 않는다. 추가 정보와 코드 예제들은 <xref linkend="
"\"transactions\"/>를 참조하라."

#. Tag: para
#: architecture.xml:375
#, fuzzy, no-c-format
msgid ""
"The <literal>hibernate.current_session_context_class</literal> configuration "
"parameter defines which <literal>org.hibernate.context."
"CurrentSessionContext</literal> implementation should be used. For backwards "
"compatibility, if this configuration parameter is not set but a <literal>org."
"hibernate.transaction.TransactionManagerLookup</literal> is configured, "
"Hibernate will use the <literal>org.hibernate.context.JTASessionContext</"
"literal>. Typically, the value of this parameter would just name the "
"implementation class to use. For the three out-of-the-box implementations, "
"however, there are three corresponding short names: \"jta\", \"thread\", and "
"\"managed\"."
msgstr ""
"<literal>hibernate.current_session_context_class</literal> 구성 파라미터는 "
"<literal>org.hibernate.context.CurrentSessionContext</literal> 구현이 사용될 "
"것임을 정의한다. 역호환을 위해. 만일 이 구성 파라미터가 설정되지 않았지만 하"
"나의 <literal>org.hibernate.transaction.TransactionManagerLookup</literal>이 "
"구성되어 있을 경우, Hibernate는 <literal>org.hibernate.context."
"JTASessionContext</literal>를 사용할 것임을 노트하라. 일반적으로, 이 파라미터"
"의 값은 단지 사용할 구현 클래스를 명명할 것이다; 하지만 두 가지 비공식적인 구"
"현들로서 두 개의 대응하는 짧은 이름들 \"jta\"와 \"thread\"이 존재한다."
