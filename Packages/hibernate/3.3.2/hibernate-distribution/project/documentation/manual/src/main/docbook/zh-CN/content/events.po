msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-06-10 21:02+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: events.xml:29
#, no-c-format
msgid "Interceptors and events"
msgstr "拦截器与事件(Interceptors and events)"

#. Tag: para
#: events.xml:31
#, fuzzy, no-c-format
msgid ""
"It is useful for the application to react to certain events that occur "
"inside Hibernate. This allows for the implementation of generic "
"functionality and the extension of Hibernate functionality."
msgstr ""
"应用程序能够响应Hibernate内部产生的特定事件是非常有用的。这样就允许实现某些通"
"用的功能 以及允许对Hibernate功能进行扩展。"

#. Tag: title
#: events.xml:38
#, no-c-format
msgid "Interceptors"
msgstr "拦截器(Interceptors)"

#. Tag: para
#: events.xml:40
#, fuzzy, no-c-format
msgid ""
"The <literal>Interceptor</literal> interface provides callbacks from the "
"session to the application, allowing the application to inspect and/or "
"manipulate properties of a persistent object before it is saved, updated, "
"deleted or loaded. One possible use for this is to track auditing "
"information. For example, the following <literal>Interceptor</literal> "
"automatically sets the <literal>createTimestamp</literal> when an "
"<literal>Auditable</literal> is created and updates the "
"<literal>lastUpdateTimestamp</literal> property when an <literal>Auditable</"
"literal> is updated."
msgstr ""
"<literal>Interceptor</literal>接口提供了从会话(session)回调(callback)应用程序"
"(application)的机制， 这种回调机制可以允许应用程序在持久化对象被保存、更新、"
"删除或是加载之前，检查并（或）修改其 属性。一个可能的用途，就是用来跟踪审核"
"(auditing)信息。例如：下面的这个<literal>拦截器</literal>，会在一个实现了 "
"<literal>Auditable</literal>接口的对象被创建时自动地设置"
"<literal>createTimestamp</literal>属性，并在实现了 <literal>Auditable</"
"literal>接口的对象被更新时，同步更新<literal>lastUpdateTimestamp</literal>属"
"性。"

#. Tag: para
#: events.xml:51
#, fuzzy, no-c-format
msgid ""
"You can either implement <literal>Interceptor</literal> directly or extend "
"<literal>EmptyInterceptor</literal>."
msgstr ""
"你可以直接实现<literal>Interceptor</literal>接口，也可以（最好）继承自"
"<literal>EmptyInterceptor</literal>。"

#. Tag: programlisting
#: events.xml:56
#, no-c-format
msgid ""
"<![CDATA[package org.hibernate.test;\n"
"\n"
"import java.io.Serializable;\n"
"import java.util.Date;\n"
"import java.util.Iterator;\n"
"\n"
"import org.hibernate.EmptyInterceptor;\n"
"import org.hibernate.Transaction;\n"
"import org.hibernate.type.Type;\n"
"\n"
"public class AuditInterceptor extends EmptyInterceptor {\n"
"\n"
"    private int updates;\n"
"    private int creates;\n"
"    private int loads;\n"
"\n"
"    public void onDelete(Object entity,\n"
"                         Serializable id,\n"
"                         Object[] state,\n"
"                         String[] propertyNames,\n"
"                         Type[] types) {\n"
"        // do nothing\n"
"    }\n"
"\n"
"    public boolean onFlushDirty(Object entity,\n"
"                                Serializable id,\n"
"                                Object[] currentState,\n"
"                                Object[] previousState,\n"
"                                String[] propertyNames,\n"
"                                Type[] types) {\n"
"\n"
"        if ( entity instanceof Auditable ) {\n"
"            updates++;\n"
"            for ( int i=0; i < propertyNames.length; i++ ) {\n"
"                if ( \"lastUpdateTimestamp\".equals( propertyNames[i] ) ) {\n"
"                    currentState[i] = new Date();\n"
"                    return true;\n"
"                }\n"
"            }\n"
"        }\n"
"        return false;\n"
"    }\n"
"\n"
"    public boolean onLoad(Object entity,\n"
"                          Serializable id,\n"
"                          Object[] state,\n"
"                          String[] propertyNames,\n"
"                          Type[] types) {\n"
"        if ( entity instanceof Auditable ) {\n"
"            loads++;\n"
"        }\n"
"        return false;\n"
"    }\n"
"\n"
"    public boolean onSave(Object entity,\n"
"                          Serializable id,\n"
"                          Object[] state,\n"
"                          String[] propertyNames,\n"
"                          Type[] types) {\n"
"\n"
"        if ( entity instanceof Auditable ) {\n"
"            creates++;\n"
"            for ( int i=0; i<propertyNames.length; i++ ) {\n"
"                if ( \"createTimestamp\".equals( propertyNames[i] ) ) {\n"
"                    state[i] = new Date();\n"
"                    return true;\n"
"                }\n"
"            }\n"
"        }\n"
"        return false;\n"
"    }\n"
"\n"
"    public void afterTransactionCompletion(Transaction tx) {\n"
"        if ( tx.wasCommitted() ) {\n"
"            System.out.println(\"Creations: \" + creates + \", Updates: \" + "
"updates, \"Loads: \" + loads);\n"
"        }\n"
"        updates=0;\n"
"        creates=0;\n"
"        loads=0;\n"
"    }\n"
"\n"
"}]]>"
msgstr ""

#. Tag: para
#: events.xml:58
#, fuzzy, no-c-format
msgid ""
"There are two kinds of inteceptors: <literal>Session</literal>-scoped and "
"<literal>SessionFactory</literal>-scoped."
msgstr ""
"拦截器可以有两种:<literal>Session</literal>范围内的，和"
"<literal>SessionFactory</literal>范围内的。"

#. Tag: para
#: events.xml:63
#, no-c-format
msgid ""
"A <literal>Session</literal>-scoped interceptor is specified when a session "
"is opened using one of the overloaded SessionFactory.openSession() methods "
"accepting an <literal>Interceptor</literal>."
msgstr ""
"当使用某个重载的SessionFactory.openSession()使用<literal>Interceptor</"
"literal>作为参数调用打开一个session的时候，就指定了<literal>Session</literal>"
"范围内的拦截器。"

#. Tag: programlisting
#: events.xml:69
#, no-c-format
msgid "<![CDATA[Session session = sf.openSession( new AuditInterceptor() );]]>"
msgstr ""

#. Tag: para
#: events.xml:71
#, fuzzy, no-c-format
msgid ""
"A <literal>SessionFactory</literal>-scoped interceptor is registered with "
"the <literal>Configuration</literal> object prior to building the "
"<literal>SessionFactory</literal>. Unless a session is opened explicitly "
"specifying the interceptor to use, the supplied interceptor will be applied "
"to all sessions opened from that <literal>SessionFactory</literal>. "
"<literal>SessionFactory</literal>-scoped interceptors must be thread safe. "
"Ensure that you do not store session-specific states, since multiple "
"sessions will use this interceptor potentially concurrently."
msgstr ""
"<literal>SessionFactory</literal>范围内的拦截器要通过<literal>Configuration</"
"literal>中注册，而这必须在创建<literal>SessionFactory</literal>之前。在这种情"
"况下，给出的拦截器会被这个<literal>SessionFactory</literal>所打开的所有"
"session使用了；除非session打开时明确指明了使用的拦截器。"
"<literal>SessionFactory</literal>范围内的拦截器，必须是线程安全的，因为多个"
"session可能并发使用这个拦截器，要因此小心不要保存与session相关的状态。"

#. Tag: programlisting
#: events.xml:80
#, no-c-format
msgid ""
"<![CDATA[new Configuration().setInterceptor( new AuditInterceptor() );]]>"
msgstr ""

#. Tag: title
#: events.xml:85
#, no-c-format
msgid "Event system"
msgstr "事件系统(Event system)"

#. Tag: para
#: events.xml:87
#, fuzzy, no-c-format
msgid ""
"If you have to react to particular events in your persistence layer, you can "
"also use the Hibernate3 <emphasis>event</emphasis> architecture. The event "
"system can be used in addition, or as a replacement, for interceptors."
msgstr ""
"如果需要响应持久层的某些特殊事件，你也可以使用Hibernate3的事件框架。 该事件系"
"统可以用来替代拦截器，也可以作为拦截器的补充来使用。"

#. Tag: para
#: events.xml:93
#, fuzzy, no-c-format
msgid ""
"All the methods of the <literal>Session</literal> interface correlate to an "
"event. You have a <literal>LoadEvent</literal>, a <literal>FlushEvent</"
"literal>, etc. Consult the XML configuration-file DTD or the <literal>org."
"hibernate.event</literal> package for the full list of defined event types. "
"When a request is made of one of these methods, the Hibernate "
"<literal>Session</literal> generates an appropriate event and passes it to "
"the configured event listeners for that type. Out-of-the-box, these "
"listeners implement the same processing in which those methods always "
"resulted. However, you are free to implement a customization of one of the "
"listener interfaces (i.e., the <literal>LoadEvent</literal> is processed by "
"the registered implementation of the <literal>LoadEventListener</literal> "
"interface), in which case their implementation would be responsible for "
"processing any <literal>load()</literal> requests made of the "
"<literal>Session</literal>."
msgstr ""
"基本上，<literal>Session</literal>接口的每个方法都有相对应的事件。比如 "
"<literal>LoadEvent</literal>，<literal>FlushEvent</literal>，等等（查阅XML配"
"置文件 的DTD，以及<literal>org.hibernate.event</literal>包来获得所有已定义的"
"事件的列表）。当某个方 法被调用时，Hibernate <literal>Session</literal>会生成"
"一个相对应的事件并激活所 有配置好的事件监听器。系统预设的监听器实现的处理过程"
"就是被监听的方法要做的（被监听的方法所做的其实仅仅是激活监听器， “实际”的工作"
"是由监听器完成的）。不过，你可以自由地选择实现 一个自己定制的监听器（比如，实"
"现并注册用来处理处理<literal>LoadEvent</literal>的"
"<literal>LoadEventListener</literal>接口）， 来负责处理所有的调用"
"<literal>Session</literal>的<literal>load()</literal>方法的请求。"

#. Tag: para
#: events.xml:108
#, fuzzy, no-c-format
msgid ""
"The listeners should be considered singletons. This means they are shared "
"between requests, and should not save any state as instance variables."
msgstr ""
"监听器应该被看作是单例(singleton)对象，也就是说，所有同类型的事件的处理共享同"
"一个监听器实例，因此监听器 不应该保存任何状态（也就是不应该使用成员变量）。"

#. Tag: para
#: events.xml:113
#, fuzzy, no-c-format
msgid ""
"A custom listener implements the appropriate interface for the event it "
"wants to process and/or extend one of the convenience base classes (or even "
"the default event listeners used by Hibernate out-of-the-box as these are "
"declared non-final for this purpose). Custom listeners can either be "
"registered programmatically through the <literal>Configuration</literal> "
"object, or specified in the Hibernate configuration XML. Declarative "
"configuration through the properties file is not supported. Here is an "
"example of a custom load event listener:"
msgstr ""
"用户定制的监听器应该实现与所要处理的事件相对应的接口，或者从一个合适的基类继"
"承（甚至是从Hibernate自带的默认事件监听器类继承， 为了方便你这样做，这些类都"
"被声明成non-final的了）。用户定制的监听器可以通过编程使用"
"<literal>Configuration</literal>对象 来注册，也可以在Hibernate的XML格式的配置"
"文件中进行声明（不支持在Properties格式的配置文件声明监听器）。 下面是一个用户"
"定制的加载事件(load event)的监听器："

#. Tag: programlisting
#: events.xml:123
#, no-c-format
msgid ""
"<![CDATA[public class MyLoadListener implements LoadEventListener {\n"
"    // this is the single method defined by the LoadEventListener interface\n"
"    public void onLoad(LoadEvent event, LoadEventListener.LoadType "
"loadType)\n"
"            throws HibernateException {\n"
"        if ( !MySecurity.isAuthorized( event.getEntityClassName(), event."
"getEntityId() ) ) {\n"
"            throw MySecurityException(\"Unauthorized access\");\n"
"        }\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: events.xml:125
#, no-c-format
msgid ""
"You also need a configuration entry telling Hibernate to use the listener in "
"addition to the default listener:"
msgstr ""
"你还需要修改一处配置，来告诉Hibernate，除了默认的监听器，还要附加选定的监听"
"器。"

#. Tag: programlisting
#: events.xml:130
#, no-c-format
msgid ""
"<![CDATA[<hibernate-configuration>\n"
"    <session-factory>\n"
"        ...\n"
"        <event type=\"load\">\n"
"            <listener class=\"com.eg.MyLoadListener\"/>\n"
"            <listener class=\"org.hibernate.event.def."
"DefaultLoadEventListener\"/>\n"
"        </event>\n"
"    </session-factory>\n"
"</hibernate-configuration>]]>"
msgstr ""

#. Tag: para
#: events.xml:132
#, fuzzy, no-c-format
msgid "Instead, you can register it programmatically:"
msgstr "看看用另一种方式，通过编程的方式来注册它。"

#. Tag: programlisting
#: events.xml:136
#, no-c-format
msgid ""
"<![CDATA[Configuration cfg = new Configuration();\n"
"LoadEventListener[] stack = { new MyLoadListener(), new "
"DefaultLoadEventListener() };\n"
"cfg.EventListeners().setLoadEventListeners(stack);]]>"
msgstr ""

#. Tag: para
#: events.xml:138
#, fuzzy, no-c-format
msgid ""
"Listeners registered declaratively cannot share instances. If the same class "
"name is used in multiple <literal>&lt;listener/&gt;</literal> elements, each "
"reference will result in a separate instance of that class. If you need to "
"share listener instances between listener types you must use the "
"programmatic registration approach."
msgstr ""
"通过在XML配置文件声明而注册的监听器不能共享实例。如果在多个<literal>&lt;"
"listener/&gt;</literal>节点中使用 了相同的类的名字，则每一个引用都将会产生一"
"个独立的实例。如果你需要在多个监听器类型之间共享 监听器的实例，则你必须使用编"
"程的方式来进行注册。"

#. Tag: para
#: events.xml:146
#, fuzzy, no-c-format
msgid ""
"Why implement an interface and define the specific type during "
"configuration? A listener implementation could implement multiple event "
"listener interfaces. Having the type additionally defined during "
"registration makes it easier to turn custom listeners on or off during "
"configuration."
msgstr ""
"为什么我们实现了特定监听器的接口，在注册的时候还要明确指出我们要注册哪个事件"
"的监听器呢？ 这是因为一个类可能实现多个监听器的接口。在注册的时候明确指定要监"
"听的事件，可以让启用或者禁用对某个事件的监听的配置工作简单些。"

#. Tag: title
#: events.xml:156
#, no-c-format
msgid "Hibernate declarative security"
msgstr "Hibernate的声明式安全机制"

#. Tag: para
#: events.xml:157
#, fuzzy, no-c-format
msgid ""
"Usually, declarative security in Hibernate applications is managed in a "
"session facade layer. Hibernate3 allows certain actions to be permissioned "
"via JACC, and authorized via JAAS. This is an optional functionality that is "
"built on top of the event architecture."
msgstr ""
"通常，Hibernate应用程序的声明式安全机制由会话外观层(session facade)所管理。 "
"现在，Hibernate3允许某些特定的行为由JACC进行许可管理，由JAAS进行授权管理。 本"
"功能是一个建立在事件框架之上的可选的功能。"

#. Tag: para
#: events.xml:163
#, no-c-format
msgid ""
"First, you must configure the appropriate event listeners, to enable the use "
"of JAAS authorization."
msgstr ""
"首先，你必须要配置适当的事件监听器（event listener），来激活使用JAAS管理授权"
"的功能。"

#. Tag: programlisting
#: events.xml:168
#, no-c-format
msgid ""
"<![CDATA[<listener type=\"pre-delete\" class=\"org.hibernate.secure."
"JACCPreDeleteEventListener\"/>\n"
"<listener type=\"pre-update\" class=\"org.hibernate.secure."
"JACCPreUpdateEventListener\"/>\n"
"<listener type=\"pre-insert\" class=\"org.hibernate.secure."
"JACCPreInsertEventListener\"/>\n"
"<listener type=\"pre-load\" class=\"org.hibernate.secure."
"JACCPreLoadEventListener\"/>]]>"
msgstr ""

#. Tag: para
#: events.xml:170
#, fuzzy, no-c-format
msgid ""
"Note that <literal>&lt;listener type=\"...\" class=\"...\"/&gt;</literal> is "
"shorthand for <literal>&lt;event type=\"...\"&gt;&lt;listener class=\"...\"/"
"&gt;&lt;/event&gt;</literal> when there is exactly one listener for a "
"particular event type."
msgstr ""
"注意，<literal>&lt;listener type=\"...\" class=\"...\"/&gt;</literal>只是"
"<literal>&lt;event type=\"...\"&gt;&lt;listener class=\"...\"/&gt;&lt;/"
"event&gt;</literal>的简写，对每一个事件类型都必须严格的有一个监听器与之对应。"

#. Tag: para
#: events.xml:176
#, fuzzy, no-c-format
msgid ""
"Next, while still in <literal>hibernate.cfg.xml</literal>, bind the "
"permissions to roles:"
msgstr ""
"接下来，仍然在<literal>hibernate.cfg.xml</literal>文件中，绑定角色的权限："

#. Tag: programlisting
#: events.xml:180
#, no-c-format
msgid ""
"<![CDATA[<grant role=\"admin\" entity-name=\"User\" actions=\"insert,update,"
"read\"/>\n"
"<grant role=\"su\" entity-name=\"User\" actions=\"*\"/>]]>"
msgstr ""

#. Tag: para
#: events.xml:182
#, no-c-format
msgid "The role names are the roles understood by your JACC provider."
msgstr "这些角色的名字就是你的JACC provider所定义的角色的名字。"
