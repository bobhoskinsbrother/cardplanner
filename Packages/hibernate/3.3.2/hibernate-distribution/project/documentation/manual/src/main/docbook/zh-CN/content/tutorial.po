msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-06-23 18:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: tutorial.xml:31
#, no-c-format
msgid "Tutorial"
msgstr ""

#. Tag: para
#: tutorial.xml:33
#, no-c-format
msgid ""
"Intended for new users, this chapter provides an step-by-step introduction "
"to Hibernate, starting with a simple application using an in-memory "
"database. The tutorial is based on an earlier tutorial developed by Michael "
"Gloegl. All code is contained in the <filename>tutorials/web</filename> "
"directory of the project source."
msgstr ""

#. Tag: para
#: tutorial.xml:42
#, no-c-format
msgid ""
"This tutorial expects the user have knowledge of both Java and SQL. If you "
"have a limited knowledge of JAVA or SQL, it is advised that you start with a "
"good introduction to that technology prior to attempting to learn Hibernate."
msgstr ""

#. Tag: para
#: tutorial.xml:51
#, no-c-format
msgid ""
"The distribution contains another example application under the "
"<filename>tutorial/eg</filename> project source directory."
msgstr ""

#. Tag: title
#: tutorial.xml:59
#, no-c-format
msgid "Part 1 - The first Hibernate Application"
msgstr "第一部分 － 第一个Hibernate应用程序"

#. Tag: para
#: tutorial.xml:61
#, fuzzy, no-c-format
msgid ""
"For this example, we will set up a small database application that can store "
"events we want to attend and information about the host(s) of these events."
msgstr ""
"假设我们希望有一个小应用程序可以保存我们希望参加的活动（events）和这些活动主"
"办方的相关信息。 （译者注：在本教程的后面部分，我们将直接使用event而不是它的"
"中文翻译“活动”，以免混淆。）"

#. Tag: para
#: tutorial.xml:67
#, no-c-format
msgid ""
"Although you can use whatever database you feel comfortable using, we will "
"use <ulink url=\"http://hsqldb.org/\">HSQLDB</ulink> (an in-memory, Java "
"database) to avoid describing installation/setup of any particular database "
"servers."
msgstr ""

#. Tag: title
#: tutorial.xml:76
#, no-c-format
msgid "Setup"
msgstr ""

#. Tag: para
#: tutorial.xml:78
#, no-c-format
msgid ""
"The first thing we need to do is to set up the development environment. We "
"will be using the \"standard layout\" advocated by alot of build tools such "
"as <ulink url=\"http://maven.org\">Maven</ulink>. Maven, in particular, has "
"a good resource describing this <ulink url=\"http://maven.apache.org/guides/"
"introduction/introduction-to-the-standard-directory-layout.html\">layout</"
"ulink>. As this tutorial is to be a web application, we will be creating and "
"making use of <filename>src/main/java</filename>, <filename>src/main/"
"resources</filename> and <filename>src/main/webapp</filename> directories."
msgstr ""

#. Tag: para
#: tutorial.xml:88
#, no-c-format
msgid ""
"We will be using Maven in this tutorial, taking advantage of its transitive "
"dependency management capabilities as well as the ability of many IDEs to "
"automatically set up a project for us based on the maven descriptor."
msgstr ""

#. Tag: programlisting
#: tutorial.xml:94
#, no-c-format
msgid ""
"<![CDATA[<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven."
"apache.org/xsd/maven-4.0.0.xsd\">\n"
"\n"
"    <modelVersion>4.0.0</modelVersion>\n"
"\n"
"    <groupId>org.hibernate.tutorials</groupId>\n"
"    <artifactId>hibernate-tutorial</artifactId>\n"
"    <version>1.0.0-SNAPSHOT</version>\n"
"    <name>First Hibernate Tutorial</name>\n"
"\n"
"    <build>\n"
"         <!-- we dont want the version to be part of the generated war file "
"name -->\n"
"         <finalName>${artifactId}</finalName>\n"
"    </build>\n"
"\n"
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>org.hibernate</groupId>\n"
"            <artifactId>hibernate-core</artifactId>\n"
"        </dependency>\n"
"\n"
"        <!-- Because this is a web app, we also have a dependency on the "
"servlet api. -->\n"
"        <dependency>\n"
"            <groupId>javax.servlet</groupId>\n"
"            <artifactId>servlet-api</artifactId>\n"
"        </dependency>\n"
"\n"
"        <!-- Hibernate uses slf4j for logging, for our purposes here use the "
"simple backend -->\n"
"        <dependency>\n"
"            <groupId>org.slf4j</groupId>\n"
"            <artifactId>slf4j-simple</artifactId>\n"
"        </dependency>\n"
"\n"
"        <!-- Hibernate gives you a choice of bytecode providers between "
"cglib and javassist -->\n"
"        <dependency>\n"
"            <groupId>javassist</groupId>\n"
"            <artifactId>javassist</artifactId>\n"
"        </dependency>\n"
"    </dependencies>\n"
"\n"
"</project>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:97
#, no-c-format
msgid ""
"It is not a requirement to use Maven. If you wish to use something else to "
"build this tutoial (such as Ant), the layout will remain the same. The only "
"change is that you will need to manually account for all the needed "
"dependencies. If you use something like <ulink url=\"http://ant.apache.org/"
"ivy/\">Ivy</ulink> providing transitive dependency management you would "
"still use the dependencies mentioned below. Otherwise, you'd need to grab "
"<emphasis>all</emphasis> dependencies, both explicit and transitive, and add "
"them to the project's classpath. If working from the Hibernate distribution "
"bundle, this would mean <filename>hibernate3.jar</filename>, all artifacts "
"in the <filename>lib/required</filename> directory and all files from either "
"the <filename>lib/bytecode/cglib</filename> or <filename>lib/bytecode/"
"javassist</filename> directory; additionally you will need both the servlet-"
"api jar and one of the slf4j logging backends."
msgstr ""

#. Tag: para
#: tutorial.xml:114
#, no-c-format
msgid ""
"Save this file as <filename>pom.xml</filename> in the project root directory."
msgstr ""

#. Tag: title
#: tutorial.xml:121
#, no-c-format
msgid "The first class"
msgstr "第一个class"

#. Tag: para
#: tutorial.xml:123
#, fuzzy, no-c-format
msgid ""
"Next, we create a class that represents the event we want to store in the "
"database; it is a simple JavaBean class with some properties:"
msgstr "接下来我们创建一个类，用来代表那些我们希望储存在数据库里的event。"

#. Tag: programlisting
#: tutorial.xml:128
#, no-c-format
msgid ""
"<![CDATA[package org.hibernate.tutorial.domain;\n"
"\n"
"import java.util.Date;\n"
"\n"
"public class Event {\n"
"    private Long id;\n"
"\n"
"    private String title;\n"
"    private Date date;\n"
"\n"
"    public Event() {}\n"
"\n"
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
"\n"
"    private void setId(Long id) {\n"
"        this.id = id;\n"
"    }\n"
"\n"
"    public Date getDate() {\n"
"        return date;\n"
"    }\n"
"\n"
"    public void setDate(Date date) {\n"
"        this.date = date;\n"
"    }\n"
"\n"
"    public String getTitle() {\n"
"        return title;\n"
"    }\n"
"\n"
"    public void setTitle(String title) {\n"
"        this.title = title;\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:130
#, fuzzy, no-c-format
msgid ""
"This class uses standard JavaBean naming conventions for property getter and "
"setter methods, as well as private visibility for the fields. Although this "
"is the recommended design, it is not required. Hibernate can also access "
"fields directly, the benefit of accessor methods is robustness for "
"refactoring."
msgstr ""
"你可以看到这个类对属性的存取方法（getter and setter method）使用了标准"
"JavaBean命名约定，同时把类属性（field）的访问级别设成私有的（private）。这是"
"推荐的设计，但并不是必须的。Hibernate也可以直接访问这些field，而使用访问方法"
"（accessor method）的好处是提供了重构时的健壮性（robustness）。为了通过反射机"
"制（Reflection）来实例化这个类的对象，我们需要提供一个无参的构造器（no-"
"argument constructor)。"

#. Tag: para
#: tutorial.xml:138
#, fuzzy, no-c-format
msgid ""
"The <literal>id</literal> property holds a unique identifier value for a "
"particular event. All persistent entity classes (there are less important "
"dependent classes as well) will need such an identifier property if we want "
"to use the full feature set of Hibernate. In fact, most applications, "
"especially web applications, need to distinguish objects by identifier, so "
"you should consider this a feature rather than a limitation. However, we "
"usually do not manipulate the identity of an object, hence the setter method "
"should be private. Only Hibernate will assign identifiers when an object is "
"saved. Hibernate can access public, private, and protected accessor methods, "
"as well as public, private and protected fields directly. The choice is up "
"to you and you can match it to fit your application design."
msgstr ""
"对一特定的event, <literal>id</literal> 属性持有唯一的标识符（identifier）的"
"值。如果我们希望使用Hibernate提供的所有特性，那么所有的持久化实体"
"（persistent entity）类（这里也包括一些次要依赖类）都需要一个这样的标识符属"
"性。而事实上，大多数应用程序（特别是web应用程序）都需要通过标识符来区别对象，"
"所以你应该考虑使用标识符属性而不是把它当作一种限制。然而，我们通常不会操作对"
"象的标识（identity），因此它的setter方法的访问级别应该声明private。这样当对象"
"被保存的时候，只有Hibernate可以为它分配标识符值。你可看到Hibernate可以直接访"
"问public，private和protected的访问方法和field。所以选择哪种方式完全取决于你，"
"你可以使你的选择与你的应用程序设计相吻合。"

#. Tag: para
#: tutorial.xml:153
#, fuzzy, no-c-format
msgid ""
"The no-argument constructor is a requirement for all persistent classes; "
"Hibernate has to create objects for you, using Java Reflection. The "
"constructor can be private, however package or public visibility is required "
"for runtime proxy generation and efficient data retrieval without bytecode "
"instrumentation."
msgstr ""
"所有的持久化类（persistent classes）都要求有无参的构造器，因为Hibernate必须使"
"用Java反射机制来为你创建对象。构造器（constructor）的访问级别可以是private，"
"然而当生成运行时代理（runtime proxy）的时候则要求使用至少是package 级别的访问"
"控制，这样在没有字节码指令（bytecode instrumentation）的情况下，从持久化类里"
"获取数据会更有效率。"

#. Tag: para
#: tutorial.xml:161
#, no-c-format
msgid ""
"Save this file to the <filename>src/main/java/org/hibernate/tutorial/domain</"
"filename> directory."
msgstr ""

#. Tag: title
#: tutorial.xml:168
#, no-c-format
msgid "The mapping file"
msgstr "映射文件"

#. Tag: para
#: tutorial.xml:170
#, no-c-format
msgid ""
"Hibernate needs to know how to load and store objects of the persistent "
"class. This is where the Hibernate mapping file comes into play. The mapping "
"file tells Hibernate what table in the database it has to access, and what "
"columns in that table it should use."
msgstr ""
"Hibernate需要知道怎样去加载（load）和存储（store）持久化类的对象。这正是"
"Hibernate映射文件发挥作用的地方。映射文件告诉Hibernate它，应该访问数据库"
"(database)里面的哪个表（table）及应该使用表里面的哪些字段（column）。"

#. Tag: para
#: tutorial.xml:178
#, no-c-format
msgid "The basic structure of a mapping file looks like this:"
msgstr "一个映射文件的基本结构看起来像这样："

#. Tag: programlisting
#: tutorial.xml:182
#, no-c-format
msgid ""
"<![CDATA[<?xml version=\"1.0\"?>\n"
"<!DOCTYPE hibernate-mapping PUBLIC\n"
"        \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n"
"        \"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd\">\n"
"\n"
"<hibernate-mapping package=\"org.hibernate.tutorial.domain\">\n"
"[...]\n"
"</hibernate-mapping>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:184
#, fuzzy, no-c-format
msgid ""
"Hibernate DTD is sophisticated. You can use it for auto-completion of XML "
"mapping elements and attributes in your editor or IDE. Opening up the DTD "
"file in your text editor is the easiest way to get an overview of all "
"elements and attributes, and to view the defaults, as well as some comments. "
"Hibernate will not load the DTD file from the web, but first look it up from "
"the classpath of the application. The DTD file is included in "
"<filename>hibernate-core.jar</filename> (it is also included in the "
"<filename>hibernate3.jar</filename>, if using the distribution bundle)."
msgstr ""
"注意Hibernate的DTD是非常复杂的。你的编辑器或者IDE里使用它来自动完成那些用来映"
"射的XML元素（element）和属性（attribute）。你也可以在文本编辑器里打开DTD－这"
"是最简单的方式来概览所有的元素和attribute，并查看它们的缺省值以及注释。注意"
"Hibernate不会从web加载DTD文件，但它会首先在应用程序的classpath中查找。DTD文件"
"已包括在<literal>hibernate3.jar</literal>里，同时也在Hibernate发布包的"
"<literal>src/</literal>目录下。"

#. Tag: para
#: tutorial.xml:197
#, fuzzy, no-c-format
msgid ""
"We will omit the DTD declaration in future examples to shorten the code. It "
"is, of course, not optional."
msgstr ""
"为缩短代码长度，在以后的例子里我们会省略DTD的声明。当然，在实际的应用程序中，"
"DTD声明是必须的。"

#. Tag: para
#: tutorial.xml:203
#, fuzzy, no-c-format
msgid ""
"Between the two <literal>hibernate-mapping</literal> tags, include a "
"<literal>class</literal> element. All persistent entity classes (again, "
"there might be dependent classes later on, which are not first-class "
"entities) need a mapping to a table in the SQL database:"
msgstr ""
"在<literal>hibernate-mapping</literal>标签（tag）之间, 含有一个"
"<literal>class</literal>元素。所有的持久化实体类（再次声明，或许接下来会有依"
"赖类，就是那些次要的实体）都需要一个这样的映射，来把类对象映射到SQL数据库里的"
"表。"

#. Tag: programlisting
#: tutorial.xml:210
#, no-c-format
msgid ""
"<![CDATA[<hibernate-mapping package=\"org.hibernate.tutorial.domain\">\n"
"\n"
"    <class name=\"Event\" table=\"EVENTS\">\n"
"\n"
"    </class>\n"
"\n"
"</hibernate-mapping>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:212
#, fuzzy, no-c-format
msgid ""
"So far we have told Hibernate how to persist and load object of class "
"<literal>Event</literal> to the table <literal>EVENTS</literal>. Each "
"instance is now represented by a row in that table. Now we can continue by "
"mapping the unique identifier property to the tables primary key. As we do "
"not want to care about handling this identifier, we configure Hibernate's "
"identifier generation strategy for a surrogate primary key column:"
msgstr ""
"到目前为止，我们告诉了Hibernate怎样把<literal>Events</literal>类的对象持久化"
"到数据库的<literal>EVENTS</literal>表里，以及怎样从<literal>EVENTS</literal>"
"表加载到<literal>Events</literal>类的对象。每个实例对应着数据库表中的一行。现"
"在我们将继续讨论有关唯一标识符属性到数据库表的映射。另外，由于我们不关心怎样"
"处理这个标识符，我们就配置由Hibernate的标识符生成策略来产生代理主键字段。"

#. Tag: programlisting
#: tutorial.xml:222
#, no-c-format
msgid ""
"<![CDATA[<hibernate-mapping package=\"org.hibernate.tutorial.domain\">\n"
"\n"
"    <class name=\"Event\" table=\"EVENTS\">\n"
"        <id name=\"id\" column=\"EVENT_ID\">\n"
"            <generator class=\"native\"/>\n"
"        </id>\n"
"    </class>\n"
"\n"
"</hibernate-mapping>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:224
#, no-c-format
msgid ""
"The <literal>id</literal> element is the declaration of the identifier "
"property. The <literal>name=\"id\"</literal> mapping attribute declares the "
"name of the JavaBean property and tells Hibernate to use the <literal>getId()"
"</literal> and <literal>setId()</literal> methods to access the property. "
"The column attribute tells Hibernate which column of the <literal>EVENTS</"
"literal> table holds the primary key value."
msgstr ""

#. Tag: para
#: tutorial.xml:234
#, no-c-format
msgid ""
"The nested <literal>generator</literal> element specifies the identifier "
"generation strategy (aka how are identifier values generated?). In this case "
"we choose <literal>native</literal>, which offers a level of portability "
"depending on the configured database dialect. Hibernate supports database "
"generated, globally unique, as well as application assigned, identifiers. "
"Identifier value generation is also one of Hibernate's many extension points "
"and you can plugin in your own strategy."
msgstr ""

#. Tag: para
#: tutorial.xml:246
#, no-c-format
msgid ""
"<literal>native</literal> is no longer consider the best strategy in terms "
"of portability. for further discussion, see"
msgstr ""

#. Tag: para
#: tutorial.xml:252
#, fuzzy, no-c-format
msgid ""
"Lastly, we need to tell Hibernate about the remaining entity class "
"properties. By default, no properties of the class are considered persistent:"
msgstr ""
"最后我们在映射文件里面包含需要持久化属性的声明。默认情况下，类里面的属性都被"
"视为非持久化的："

#. Tag: programlisting
#: tutorial.xml:258
#, no-c-format
msgid ""
"<![CDATA[\n"
"<hibernate-mapping package=\"org.hibernate.tutorial.domain\">\n"
"\n"
"    <class name=\"Event\" table=\"EVENTS\">\n"
"        <id name=\"id\" column=\"EVENT_ID\">\n"
"            <generator class=\"native\"/>\n"
"        </id>\n"
"        <property name=\"date\" type=\"timestamp\" column=\"EVENT_DATE\"/>\n"
"        <property name=\"title\"/>\n"
"    </class>\n"
"\n"
"</hibernate-mapping>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:260
#, fuzzy, no-c-format
msgid ""
"Similar to the <literal>id</literal> element, the <literal>name</literal> "
"attribute of the <literal>property</literal> element tells Hibernate which "
"getter and setter methods to use. In this case, Hibernate will search for "
"<literal>getDate()</literal>, <literal>setDate()</literal>, <literal>getTitle"
"()</literal> and <literal>setTitle()</literal> methods."
msgstr ""
"和<literal>id</literal>元素一样，<literal>property</literal>元素的"
"<literal>name</literal>属性告诉Hibernate使用哪个getter和setter方法。在此例"
"中，Hibernate会寻找<literal>getDate()/setDate()</literal>, 以及"
"<literal>getTitle()/setTitle()</literal>。"

#. Tag: para
#: tutorial.xml:271
#, fuzzy, no-c-format
msgid ""
"Why does the <literal>date</literal> property mapping include the "
"<literal>column</literal> attribute, but the <literal>title</literal> does "
"not? Without the <literal>column</literal> attribute, Hibernate by default "
"uses the property name as the column name. This works for <literal>title</"
"literal>, however, <literal>date</literal> is a reserved keyword in most "
"databases so you will need to map it to a different name."
msgstr ""
"为什么<literal>date</literal>属性的映射含有<literal>column</literal> "
"attribute，而<literal>title</literal>却没有？当没有设定<literal>column</"
"literal> attribute 的时候，Hibernate缺省地使用JavaBean的属性名作为字段名。对"
"于<literal>title</literal>，这样工作得很好。然而，<literal>date</literal>在多"
"数的数据库里，是一个保留关键字，所以我们最好把它映射成一个不同的名字。"

#. Tag: para
#: tutorial.xml:281
#, fuzzy, no-c-format
msgid ""
"The <literal>title</literal> mapping also lacks a <literal>type</literal> "
"attribute. The types declared and used in the mapping files are not Java "
"data types; they are not SQL database types either. These types are called "
"<emphasis>Hibernate mapping types</emphasis>, converters which can translate "
"from Java to SQL data types and vice versa. Again, Hibernate will try to "
"determine the correct conversion and mapping type itself if the "
"<literal>type</literal> attribute is not present in the mapping. In some "
"cases this automatic detection using Reflection on the Java class might not "
"have the default you expect or need. This is the case with the "
"<literal>date</literal> property. Hibernate cannot know if the property, "
"which is of <literal>java.util.Date</literal>, should map to a SQL "
"<literal>date</literal>, <literal>timestamp</literal>, or <literal>time</"
"literal> column. Full date and time information is preserved by mapping the "
"property with a <literal>timestamp</literal> converter."
msgstr ""
"另一有趣的事情是<literal>title</literal>属性缺少一个<literal>type</literal> "
"attribute。我们在映射文件里声明并使用的类型，却不是我们期望的那样，是Java数据"
"类型，同时也不是SQL数据库的数据类型。这些类型就是所谓的Hibernate 映射类型"
"<emphasis>（mapping types）</emphasis>，它们能把Java数据类型转换到SQL数据类"
"型，反之亦然。再次重申，如果在映射文件中没有设置<literal>type</literal>属性的"
"话，Hibernate会自己试着去确定正确的转换类型和它的映射类型。在某些情况下这个自"
"动检测机制（在Java 类上使用反射机制）不会产生你所期待或需要的缺省值。"
"<literal>date</literal>属性就是个很好的例子，Hibernate无法知道这个属性"
"（<literal>java.util.Date</literal>类型的）应该被映射成：SQL <literal>date</"
"literal>，或<literal>timestamp</literal>，还是<literal>time</literal> 字段。"
"在此例中，把这个属性映射成<literal>timestamp</literal> 转换器，这样我们预留了"
"日期和时间的全部信息。"

#. Tag: para
#: tutorial.xml:297
#, no-c-format
msgid ""
"Hibernate makes this mapping type determination using reflection when the "
"mapping files are processed. This can take time and resources, so if startup "
"performance is important you should consider explicitly defining the type to "
"use."
msgstr ""

#. Tag: para
#: tutorial.xml:304
#, no-c-format
msgid ""
"Save this mapping file as <filename>src/main/resources/org/hibernate/"
"tutorial/domain/Event.hbm.xml</filename>."
msgstr ""

#. Tag: title
#: tutorial.xml:312
#, no-c-format
msgid "Hibernate configuration"
msgstr "Hibernate配置"

#. Tag: para
#: tutorial.xml:314
#, no-c-format
msgid ""
"At this point, you should have the persistent class and its mapping file in "
"place. It is now time to configure Hibernate. First let's set up HSQLDB to "
"run in \"server mode\""
msgstr ""

#. Tag: para
#: tutorial.xml:321
#, no-c-format
msgid "We do this do that the data remains between runs."
msgstr ""

#. Tag: para
#: tutorial.xml:326
#, fuzzy, no-c-format
msgid ""
"We will utilize the Maven exec plugin to launch the HSQLDB server by "
"running: <command> mvn exec:java -Dexec.mainClass=\"org.hsqldb.Server\" -"
"Dexec.args=\"-database.0 file:target/data/tutorial\"</command> You will see "
"it start up and bind to a TCP/IP socket; this is where our application will "
"connect later. If you want to start with a fresh database during this "
"tutorial, shutdown HSQLDB, delete all files in the <filename>target/data</"
"filename> directory, and start HSQLDB again."
msgstr ""
"在开发的根目录下创建一个<literal>data</literal>目录 － 这是HSQL DB存储数据文"
"件的地方。此时在data目录中运行<literal>java -classpath ../lib/hsqldb.jar org."
"hsqldb.Server</literal>就可启动数据库。你可以在log中看到它的启动，及绑定到"
"TCP/IP套结字，这正是我们的应用程序稍后会连接的地方。如果你希望在本例中运行一"
"个全新的数据库，就在窗口中按下<literal>CTRL + C</literal>来关闭HSQL数据库，并"
"删除<literal>data/</literal>目录下的所有文件，再重新启动HSQL数据库。"

#. Tag: para
#: tutorial.xml:337
#, no-c-format
msgid ""
"Hibernate will be connecting to the database on behalf of your application, "
"so it needs to know how to obtain connections. For this tutorial we will be "
"using a standalone connection pool (as opposed to a <interfacename>javax.sql."
"DataSource</interfacename>). Hibernate comes with support for two third-"
"party open source JDBC connection pools: <ulink url=\"https://sourceforge."
"net/projects/c3p0\">c3p0</ulink> and <ulink url=\"http://proxool.sourceforge."
"net/\">proxool</ulink>. However, we will be using the Hibernate built-in "
"connection pool for this tutorial."
msgstr ""

#. Tag: para
#: tutorial.xml:348
#, no-c-format
msgid ""
"The built-in Hibernate connection pool is in no way intended for production "
"use. It lacks several features found on any decent connection pool."
msgstr ""

#. Tag: para
#: tutorial.xml:354
#, fuzzy, no-c-format
msgid ""
"For Hibernate's configuration, we can use a simple <literal>hibernate."
"properties</literal> file, a more sophisticated <literal>hibernate.cfg.xml</"
"literal> file, or even complete programmatic setup. Most users prefer the "
"XML configuration file:"
msgstr ""
"为了保存Hibernate的配置，我们可以使用一个简单的<literal>hibernate."
"properties</literal>文件，或者一个稍微复杂的<literal>hibernate.cfg.xml</"
"literal>，甚至可以完全使用程序来配置Hibernate。多数用户更喜欢使用XML配置文"
"件："

#. Tag: programlisting
#: tutorial.xml:360
#, no-c-format
msgid ""
"<![CDATA[<?xml version='1.0' encoding='utf-8'?>\n"
"<!DOCTYPE hibernate-configuration PUBLIC\n"
"        \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"\n"
"        \"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"
"\">\n"
"\n"
"<hibernate-configuration>\n"
"\n"
"    <session-factory>\n"
"\n"
"        <!-- Database connection settings -->\n"
"        <property name=\"connection.driver_class\">org.hsqldb.jdbcDriver</"
"property>\n"
"        <property name=\"connection.url\">jdbc:hsqldb:hsql://localhost</"
"property>\n"
"        <property name=\"connection.username\">sa</property>\n"
"        <property name=\"connection.password\"></property>\n"
"\n"
"        <!-- JDBC connection pool (use the built-in) -->\n"
"        <property name=\"connection.pool_size\">1</property>\n"
"\n"
"        <!-- SQL dialect -->\n"
"        <property name=\"dialect\">org.hibernate.dialect.HSQLDialect</"
"property>\n"
"\n"
"        <!-- Enable Hibernate's automatic session context management -->\n"
"        <property name=\"current_session_context_class\">thread</property>\n"
"\n"
"        <!-- Disable the second-level cache  -->\n"
"        <property name=\"cache.provider_class\">org.hibernate.cache."
"NoCacheProvider</property>\n"
"\n"
"        <!-- Echo all executed SQL to stdout -->\n"
"        <property name=\"show_sql\">true</property>\n"
"\n"
"        <!-- Drop and re-create the database schema on startup -->\n"
"        <property name=\"hbm2ddl.auto\">update</property>\n"
"\n"
"        <mapping resource=\"org/hibernate/tutorial/domain/Event.hbm.xml\"/>\n"
"\n"
"    </session-factory>\n"
"\n"
"</hibernate-configuration>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:363
#, no-c-format
msgid "Notice that this configuration file specifies a different DTD"
msgstr ""

#. Tag: para
#: tutorial.xml:366
#, fuzzy, no-c-format
msgid ""
"You configure Hibernate's <literal>SessionFactory</literal>. SessionFactory "
"is a global factory responsible for a particular database. If you have "
"several databases, for easier startup you should use several <literal>&lt;"
"session-factory&gt;</literal> configurations in several configuration files."
msgstr ""
"注意这个XML配置使用了一个不同的DTD。在这里，我们配置了Hibernate的"
"<literal>SessionFactory</literal>－一个关联于特定数据库全局的工厂"
"（factory）。如果你要使用多个数据库，就要用多个的<literal>&lt;session-"
"factory&gt;</literal>，通常把它们放在多个配置文件中（为了更容易启动）。"

#. Tag: para
#: tutorial.xml:373
#, no-c-format
msgid ""
"The first four <literal>property</literal> elements contain the necessary "
"configuration for the JDBC connection. The dialect <literal>property</"
"literal> element specifies the particular SQL variant Hibernate generates."
msgstr ""

#. Tag: para
#: tutorial.xml:380
#, no-c-format
msgid ""
"In most cases, Hibernate is able to properly determine which dialect to use. "
"See <xref linkend=\"portability-dialectresolver\"/> for more information."
msgstr ""

#. Tag: para
#: tutorial.xml:386
#, fuzzy, no-c-format
msgid ""
"Hibernate's automatic session management for persistence contexts is "
"particularly useful in this context. The <literal>hbm2ddl.auto</literal> "
"option turns on automatic generation of database schemas directly into the "
"database. This can also be turned off by removing the configuration option, "
"or redirected to a file with the help of the <literal>SchemaExport</literal> "
"Ant task. Finally, add the mapping file(s) for persistent classes to the "
"configuration."
msgstr ""
"最开始的4个<literal>property</literal>元素包含必要的JDBC连接信息。方言"
"（dialect）的<literal>property</literal>元素指明Hibernate 生成的特定SQL变量。"
"你很快会看到，Hibernate对持久化上下文的自动session管理就会派上用场。 打开"
"<literal>hbm2ddl.auto</literal>选项将自动生成数据库模式（schema）－ 直接加入"
"数据库中。当然这个选项也可以被关闭（通过去除这个配置选项）或者通过Ant任务"
"<literal>SchemaExport</literal>的帮助来把数据库schema重定向到文件中。最后，在"
"配置中为持久化类加入映射文件。"

#. Tag: para
#: tutorial.xml:395
#, no-c-format
msgid ""
"Save this file as <filename>hibernate.cfg.xml</filename> into the "
"<filename>src/main/resources</filename> directory."
msgstr ""

#. Tag: title
#: tutorial.xml:403
#, fuzzy, no-c-format
msgid "Building with Maven"
msgstr "用Ant构建"

#. Tag: para
#: tutorial.xml:405
#, no-c-format
msgid ""
"We will now build the tutorial with Maven. You will need to have Maven "
"installed; it is available from the <ulink url=\"http://maven.apache.org/"
"download.html\">Maven download page</ulink>. Maven will read the <filename>/"
"pom.xml</filename> file we created earlier and know how to perform some "
"basic project tasks. First, lets run the <literal>compile</literal> goal to "
"make sure we can compile everything so far:"
msgstr ""

#. Tag: programlisting
#: tutorial.xml:415
#, no-c-format
msgid ""
"<![CDATA[[hibernateTutorial]$ mvn compile\n"
"[INFO] Scanning for projects...\n"
"[INFO] "
"------------------------------------------------------------------------\n"
"[INFO] Building First Hibernate Tutorial\n"
"[INFO]    task-segment: [compile]\n"
"[INFO] "
"------------------------------------------------------------------------\n"
"[INFO] [resources:resources]\n"
"[INFO] Using default encoding to copy filtered resources.\n"
"[INFO] [compiler:compile]\n"
"[INFO] Compiling 1 source file to /home/steve/projects/sandbox/"
"hibernateTutorial/target/classes\n"
"[INFO] "
"------------------------------------------------------------------------\n"
"[INFO] BUILD SUCCESSFUL\n"
"[INFO] "
"------------------------------------------------------------------------\n"
"[INFO] Total time: 2 seconds\n"
"[INFO] Finished at: Tue Jun 09 12:25:25 CDT 2009\n"
"[INFO] Final Memory: 5M/547M\n"
"[INFO] "
"------------------------------------------------------------------------]]>"
msgstr ""

#. Tag: title
#: tutorial.xml:420
#, no-c-format
msgid "Startup and helpers"
msgstr "启动和辅助类"

#. Tag: para
#: tutorial.xml:422
#, fuzzy, no-c-format
msgid ""
"It is time to load and store some <literal>Event</literal> objects, but "
"first you have to complete the setup with some infrastructure code. You have "
"to startup Hibernate by building a global <interfacename>org.hibernate."
"SessionFactory</interfacename> object and storing it somewhere for easy "
"access in application code. A <interfacename>org.hibernate.SessionFactory</"
"interfacename> is used to obtain <interfacename>org.hibernate.Session</"
"interfacename> instances. A <interfacename>org.hibernate.Session</"
"interfacename> represents a single-threaded unit of work. The "
"<interfacename>org.hibernate.SessionFactory</interfacename> is a thread-safe "
"global object that is instantiated once."
msgstr ""
"是时候来加载和储存一些<literal>Event</literal>对象了，但首先我们得编写一些基"
"础的代码以完成设置。我们必须启动Hibernate，此过程包括创建一个全局的"
"<literal>SessoinFactory</literal>，并把它储存在应用程序代码容易访问的地方。"
"<literal>SessionFactory</literal>可以创建并打开新的<literal>Session</"
"literal>。一个<literal>Session</literal>代表一个单线程的单元操作，"
"<literal>SessionFactory</literal>则是个线程安全的全局对象，只需要被实例化一"
"次。"

#. Tag: para
#: tutorial.xml:436
#, fuzzy, no-c-format
msgid ""
"We will create a <literal>HibernateUtil</literal> helper class that takes "
"care of startup and makes accessing the <interfacename>org.hibernate."
"SessionFactory</interfacename> more convenient."
msgstr ""
"我们将创建一个<literal>HibernateUtil</literal>辅助类（helper class）来负责启"
"动Hibernate和更方便地操作<literal>SessionFactory</literal>。让我们来看一下它"
"的实现："

#. Tag: programlisting
#: tutorial.xml:442
#, no-c-format
msgid ""
"<![CDATA[package org.hibernate.tutorial.util;\n"
"\n"
"import org.hibernate.SessionFactory;\n"
"import org.hibernate.cfg.Configuration;\n"
"\n"
"public class HibernateUtil {\n"
"\n"
"    private static final SessionFactory sessionFactory = buildSessionFactory"
"();\n"
"\n"
"    private static SessionFactory buildSessionFactory() {\n"
"        try {\n"
"            // Create the SessionFactory from hibernate.cfg.xml\n"
"            return new Configuration().configure().buildSessionFactory();\n"
"        }\n"
"        catch (Throwable ex) {\n"
"            // Make sure you log the exception, as it might be swallowed\n"
"            System.err.println(\"Initial SessionFactory creation failed.\" + "
"ex);\n"
"            throw new ExceptionInInitializerError(ex);\n"
"        }\n"
"    }\n"
"\n"
"    public static SessionFactory getSessionFactory() {\n"
"        return sessionFactory;\n"
"    }\n"
"\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:444
#, no-c-format
msgid ""
"Save this code as <filename>src/main/java/org/hibernate/tutorial/util/"
"HibernateUtil.java</filename>"
msgstr ""

#. Tag: para
#: tutorial.xml:449
#, fuzzy, no-c-format
msgid ""
"This class not only produces the global <interfacename>org.hibernate."
"SessionFactory</interfacename> reference in its static initializer; it also "
"hides the fact that it uses a static singleton. We might just as well have "
"looked up the <interfacename>org.hibernate.SessionFactory</interfacename> "
"reference from JNDI in an application server or any other location for that "
"matter."
msgstr ""
"这个类不但在它的静态初始化过程（仅当加载这个类的时候被JVM执行一次）中产生全局"
"的<literal>SessionFactory</literal>，而且隐藏了它使用了静态singleton的事实。"
"它也可能在应用程序服务器中的JNDI查找<literal>SessionFactory</literal>。"

#. Tag: para
#: tutorial.xml:458
#, fuzzy, no-c-format
msgid ""
"If you give the <interfacename>org.hibernate.SessionFactory</interfacename> "
"a name in your configuration, Hibernate will try to bind it to JNDI under "
"that name after it has been built. Another, better option is to use a JMX "
"deployment and let the JMX-capable container instantiate and bind a "
"<literal>HibernateService</literal> to JNDI. Such advanced options are "
"discussed later."
msgstr ""
"如果你在配置文件中给<literal>SessionFactory</literal>一个名字，在"
"<literal>SessionFactory</literal>创建后，Hibernate会试着把它绑定到JNDI。要完"
"全避免这样的代码，你也可以使用JMX部署，让具有JMX能力的容器来实例化"
"<literal>HibernateService</literal>并把它绑定到JNDI。这些高级可选项在后面的章"
"节中会讨论到。"

#. Tag: para
#: tutorial.xml:467
#, fuzzy, no-c-format
msgid ""
"You now need to configure a logging system. Hibernate uses commons logging "
"and provides two choices: Log4j and JDK 1.4 logging. Most developers prefer "
"Log4j: copy <literal>log4j.properties</literal> from the Hibernate "
"distribution in the <literal>etc/</literal> directory to your <literal>src</"
"literal> directory, next to <literal>hibernate.cfg.xml</literal>. If you "
"prefer to have more verbose output than that provided in the example "
"configuration, you can change the settings. By default, only the Hibernate "
"startup message is shown on stdout."
msgstr ""
"再次编译这个应用程序应该不会有问题。最后我们需要配置一个日志（logging)系统 "
"－ Hibernate使用通用日志接口，允许你在Log4j和JDK 1.4 日志之间进行选择。多数开"
"发者更喜欢Log4j：从Hibernate的发布包中（它在<literal>etc/</literal>目录下）拷"
"贝<literal>log4j.properties</literal>到你的<literal>src</literal>目录，与"
"<literal>hibernate.cfg.xml</literal>.放在一起。看一下配置示例，如果你希望看到"
"更加详细的输出信息，你可以修改配置。默认情况下，只有Hibernate的启动信息才会显"
"示在标准输出上。"

#. Tag: para
#: tutorial.xml:477
#, fuzzy, no-c-format
msgid ""
"The tutorial infrastructure is complete and you are now ready to do some "
"real work with Hibernate."
msgstr "示例的基本框架完成了 － 现在我们可以用Hibernate来做些真正的工作。"

#. Tag: title
#: tutorial.xml:485
#, no-c-format
msgid "Loading and storing objects"
msgstr "加载并存储对象"

#. Tag: para
#: tutorial.xml:487
#, fuzzy, no-c-format
msgid ""
"We are now ready to start doing some real worjk with Hibernate. Let's start "
"by writing an <literal>EventManager</literal> class with a <literal>main()</"
"literal> method:"
msgstr ""
"我们终于可以使用Hibernate来加载和存储对象了，编写一个带有<literal>main()</"
"literal>方法的<literal>EventManager</literal>类："

#. Tag: programlisting
#: tutorial.xml:493
#, no-c-format
msgid ""
"<![CDATA[package org.hibernate.tutorial;\n"
"\n"
"import org.hibernate.Session;\n"
"\n"
"import java.util.*;\n"
"\n"
"import org.hibernate.tutorial.domain.Event;\n"
"import org.hibernate.tutorial.util.HibernateUtil;\n"
"\n"
"public class EventManager {\n"
"\n"
"    public static void main(String[] args) {\n"
"        EventManager mgr = new EventManager();\n"
"\n"
"        if (args[0].equals(\"store\")) {\n"
"            mgr.createAndStoreEvent(\"My Event\", new Date());\n"
"        }\n"
"\n"
"        HibernateUtil.getSessionFactory().close();\n"
"    }\n"
"\n"
"    private void createAndStoreEvent(String title, Date theDate) {\n"
"        Session session = HibernateUtil.getSessionFactory().getCurrentSession"
"();\n"
"        session.beginTransaction();\n"
"\n"
"        Event theEvent = new Event();\n"
"        theEvent.setTitle(title);\n"
"        theEvent.setDate(theDate);\n"
"        session.save(theEvent);\n"
"\n"
"        session.getTransaction().commit();\n"
"    }\n"
"\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:495
#, fuzzy, no-c-format
msgid ""
"In <literal>createAndStoreEvent()</literal> we created a new <literal>Event</"
"literal> object and handed it over to Hibernate. At that point, Hibernate "
"takes care of the SQL and executes an <literal>INSERT</literal> on the "
"database."
msgstr ""
"我们创建了个新的<literal>Event</literal>对象并把它传递给Hibernate。现在"
"Hibernate负责与SQL打交道，并把<literal>INSERT</literal>命令传给数据库。在运行"
"之前，让我们看一下处理<literal>Session</literal>和<literal>Transaction</"
"literal>的代码。"

#. Tag: para
#: tutorial.xml:502
#, fuzzy, no-c-format
msgid ""
"A <interface>org.hibernate.Session</interface> is designed to represent a "
"single unit of work (a single atmoic piece of work to be performed). For now "
"we will keep things simple and assume a one-to-one granularity between a "
"Hibernate <interface>org.hibernate.Session</interface> and a database "
"transaction. To shield our code from the actual underlying transaction "
"system we use the Hibernate <interfacename>org.hibernate.Transaction</"
"interfacename> API. In this particular case we are using JDBC-based "
"transactional semantics, but it could also run with JTA."
msgstr ""
"一个<literal>Session</literal>就是个单一的工作单元。我们暂时让事情简单一些，"
"并假设Hibernate<literal>Session</literal>和数据库事务是一一对应的。为了让我们"
"的代码从底层的事务系统中脱离出来（此例中是JDBC，但也可能是JTA），我们使用"
"Hibernate <literal>Session</literal>中的<literal>Transaction</literal> API。"

#. Tag: para
#: tutorial.xml:515
#, fuzzy, no-c-format
msgid ""
"What does <literal>sessionFactory.getCurrentSession()</literal> do? First, "
"you can call it as many times and anywhere you like once you get hold of "
"your <interfacename>org.hibernate.SessionFactory</interfacename>. The "
"<literal>getCurrentSession()</literal> method always returns the \"current\" "
"unit of work. Remember that we switched the configuration option for this "
"mechanism to \"thread\" in our <filename>src/main/resources/hibernate.cfg."
"xml</filename>? Due to that setting, the context of a current unit of work "
"is bound to the current Java thread that executes the application."
msgstr ""
"<literal>sessionFactory.getCurrentSession()</literal>是干什么的呢？首先，只要"
"你持有<literal>SessionFactory</literal>（幸亏我们有<literal>HibernateUtil</"
"literal>，可以随时获得），大可在任何时候、任何地点调用这个方法。"
"<literal>getCurrentSession()</literal>方法总会返回“当前的”工作单元。记得我们"
"在<literal>hibernate.cfg.xml</literal>中把这一配置选项调整为\"thread\"了吗？"
"因此，因此，当前工作单元被绑定到当前执行我们应用程序的Java线程。但是，这并非"
"是完全准确的,你还得考虑工作单元的生命周期范围 (scope),它何时开始,又何时结束."

#. Tag: para
#: tutorial.xml:529
#, no-c-format
msgid ""
"Hibernate offers three methods of current session tracking. The \"thread\" "
"based method is not intended for production use; it is merely useful for "
"prototyping and tutorials such as this one. Current session tracking is "
"discussed in more detail later on."
msgstr ""

#. Tag: para
#: tutorial.xml:538
#, fuzzy, no-c-format
msgid ""
"A <interface>org.hibernate.Session</interface> begins when the first call to "
"<literal>getCurrentSession()</literal> is made for the current thread. It is "
"then bound by Hibernate to the current thread. When the transaction ends, "
"either through commit or rollback, Hibernate automatically unbinds the "
"<interface>org.hibernate.Session</interface> from the thread and closes it "
"for you. If you call <literal>getCurrentSession()</literal> again, you get a "
"new <interface>org.hibernate.Session</interface> and can start a new unit of "
"work."
msgstr ""
"<literal>Session</literal>在第一次被使用的时候,即第一次调用"
"<literal>getCurrentSession()</literal>的时候,其生命周期就开始。然后它被"
"Hibernate绑定到当前线程。当事务结束的时候，不管是提交还是回滚，Hibernate会自"
"动把<literal>Session</literal>从当前线程剥离，并且关闭它。假若你再次调用"
"<literal>getCurrentSession()</literal>，你会得到一个新的<literal>Session</"
"literal>，并且开始一个新的工作单元。这种<emphasis>线程绑定(thread-bound)</"
"emphasis>的编程模型（model）是使用Hibernate的最广泛的方式,因为它支持对你的代"
"码灵活分层(事务划分可以和你的数据访问代码分离开来,在本教程的后面部分就会这么"
"做)。"

#. Tag: para
#: tutorial.xml:551
#, fuzzy, no-c-format
msgid ""
"Related to the unit of work scope, should the Hibernate <interface>org."
"hibernate.Session</interface> be used to execute one or several database "
"operations? The above example uses one <interface>org.hibernate.Session</"
"interface> for one operation. However this is pure coincidence; the example "
"is just not complex enough to show any other approach. The scope of a "
"Hibernate <interface>org.hibernate.Session</interface> is flexible but you "
"should never design your application to use a new Hibernate <interface>org."
"hibernate.Session</interface> for <emphasis>every</emphasis> database "
"operation. Even though it is used in the following examples, consider "
"<emphasis>session-per-operation</emphasis> an anti-pattern. A real web "
"application is shown later in the tutorial which will help illustrate this."
msgstr ""
"和工作单元的生命周期这个话题相关，Hibernate <literal>Session</literal>是否被"
"应该用来执行多次数据库操作？上面的例子对每一次操作使用了一个"
"<literal>Session</literal>，这完全是巧合，这个例子不是很复杂，无法展示其他方"
"式。Hibernate <literal>Session</literal>的生命周期可以很灵活，但是你绝不要把"
"你的应用程序设计成为<emphasis>每一次</emphasis>数据库操作都用一个新的"
"Hibernate <literal>Session</literal>。因此就算下面的例子（它们都很简单）中你"
"可以看到这种用法，记住<emphasis>每次操作一个session</emphasis>是一个反模式。"
"在本教程的后面会展示一个真正的(web)程序。"

#. Tag: para
#: tutorial.xml:568
#, fuzzy, no-c-format
msgid ""
"See <xref linkend=\"transactions\"/> for more information about transaction "
"handling and demarcation. The previous example also skipped any error "
"handling and rollback."
msgstr ""
"关于事务处理及事务边界界定的详细信息，请参看<xref linkend=\"transactions\"/"
">。在上面的例子中，我们也忽略了所有的错误与回滚的处理。"

#. Tag: para
#: tutorial.xml:574
#, no-c-format
msgid ""
"To run this, we will make use of the Maven exec plugin to call our class "
"with the necessary classpath setup: <command>mvn exec:java -Dexec.mainClass="
"\"org.hibernate.tutorial.EventManager\" -Dexec.args=\"store\"</command>"
msgstr ""

#. Tag: para
#: tutorial.xml:581
#, no-c-format
msgid "You may need to perform <command>mvn compile</command> first."
msgstr ""

#. Tag: para
#: tutorial.xml:586
#, fuzzy, no-c-format
msgid ""
"You should see Hibernate starting up and, depending on your configuration, "
"lots of log output. Towards the end, the following line will be displayed:"
msgstr ""
"你应该会看到，编译以后，Hibernate根据你的配置启动，并产生一大堆的输出日志。在"
"日志最后你会看到下面这行："

#. Tag: programlisting
#: tutorial.xml:591
#, no-c-format
msgid ""
"<![CDATA[[java] Hibernate: insert into EVENTS (EVENT_DATE, title, EVENT_ID) "
"values (?, ?, ?)]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:593
#, no-c-format
msgid "This is the <literal>INSERT</literal> executed by Hibernate."
msgstr ""

#. Tag: para
#: tutorial.xml:597
#, fuzzy, no-c-format
msgid "To list stored events an option is added to the main method:"
msgstr ""
"我们想要列出所有已经被存储的events，就要增加一个条件分支选项到main方法中去。"

#. Tag: programlisting
#: tutorial.xml:601
#, no-c-format
msgid ""
"<![CDATA[        if (args[0].equals(\"store\")) {\n"
"            mgr.createAndStoreEvent(\"My Event\", new Date());\n"
"        }\n"
"        else if (args[0].equals(\"list\")) {\n"
"            List events = mgr.listEvents();\n"
"            for (int i = 0; i < events.size(); i++) {\n"
"                Event theEvent = (Event) events.get(i);\n"
"                System.out.println(\n"
"                        \"Event: \" + theEvent.getTitle() + \" Time: \" + "
"theEvent.getDate()\n"
"                );\n"
"            }\n"
"        }]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:603
#, fuzzy, no-c-format
msgid "A new <literal>listEvents() method is also added</literal>:"
msgstr "我们也增加一个新的<literal>listEvents()</literal>方法:"

#. Tag: programlisting
#: tutorial.xml:607
#, no-c-format
msgid ""
"<![CDATA[    private List listEvents() {\n"
"        Session session = HibernateUtil.getSessionFactory().getCurrentSession"
"();\n"
"        session.beginTransaction();\n"
"        List result = session.createQuery(\"from Event\").list();\n"
"        session.getTransaction().commit();\n"
"        return result;\n"
"    }]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:609
#, fuzzy, no-c-format
msgid ""
"Here, we are using a Hibernate Query Language (HQL) query to load all "
"existing <literal>Event</literal> objects from the database. Hibernate will "
"generate the appropriate SQL, send it to the database and populate "
"<literal>Event</literal> objects with the data. You can create more complex "
"queries with HQL. See <xref linkend=\"queryhql\"/> for more information."
msgstr ""
"我们在这里是用一个HQL（Hibernate Query Language－Hibernate查询语言）查询语句"
"来从数据库中加载所有存在的<literal>Event</literal>对象。Hibernate会生成适当的"
"SQL，把它发送到数据库，并操作从查询得到数据的<literal>Event</literal>对象。当"
"然，你可以使用HQL来创建更加复杂的查询。"

#. Tag: para
#: tutorial.xml:617
#, no-c-format
msgid ""
"Now we can call our new functionality, again using the Maven exec plugin: "
"<command>mvn exec:java -Dexec.mainClass=\"org.hibernate.tutorial.EventManager"
"\" -Dexec.args=\"list\"</command>"
msgstr ""

#. Tag: title
#: tutorial.xml:627
#, no-c-format
msgid "Part 2 - Mapping associations"
msgstr "第二部分 － 关联映射"

#. Tag: para
#: tutorial.xml:629
#, fuzzy, no-c-format
msgid ""
"So far we have mapped a single persistent entity class to a table in "
"isolation. Let's expand on that a bit and add some class associations. We "
"will add people to the application and store a list of events in which they "
"participate."
msgstr ""
"我们已经映射了一个持久化实体类到表上。让我们在这个基础上增加一些类之间的关"
"联。首先我们往应用程序里增加人（people）的概念，并存储他们所参与的一个Event列"
"表。（译者注：与Event一样，我们在后面将直接使用person来表示“人”而不是它的中文"
"翻译）"

#. Tag: title
#: tutorial.xml:637
#, no-c-format
msgid "Mapping the Person class"
msgstr "映射Person类"

#. Tag: para
#: tutorial.xml:639
#, fuzzy, no-c-format
msgid "The first cut of the <literal>Person</literal> class looks like this:"
msgstr "最初简单的<literal>Person</literal>类："

#. Tag: programlisting
#: tutorial.xml:643
#, no-c-format
msgid ""
"<![CDATA[package org.hibernate.tutorial.domain;\n"
"\n"
"public class Person {\n"
"\n"
"    private Long id;\n"
"    private int age;\n"
"    private String firstname;\n"
"    private String lastname;\n"
"\n"
"    public Person() {}\n"
"\n"
"    // Accessor methods for all properties, private setter for 'id'\n"
"\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:645
#, no-c-format
msgid ""
"Save this to a file named <filename>src/main/java/org/hibernate/tutorial/"
"domain/Person.java</filename>"
msgstr ""

#. Tag: para
#: tutorial.xml:650
#, no-c-format
msgid ""
"Next, create the new mapping file as <filename>src/main/resources/org/"
"hibernate/tutorial/domain/Person.hbm.xml</filename>"
msgstr ""

#. Tag: programlisting
#: tutorial.xml:655
#, no-c-format
msgid ""
"<![CDATA[<hibernate-mapping package=\"org.hibernate.tutorial.domain\">\n"
"\n"
"    <class name=\"Person\" table=\"PERSON\">\n"
"        <id name=\"id\" column=\"PERSON_ID\">\n"
"            <generator class=\"native\"/>\n"
"        </id>\n"
"        <property name=\"age\"/>\n"
"        <property name=\"firstname\"/>\n"
"        <property name=\"lastname\"/>\n"
"    </class>\n"
"\n"
"</hibernate-mapping>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:657
#, no-c-format
msgid "Finally, add the new mapping to Hibernate's configuration:"
msgstr "最后，把新的映射加入到Hibernate的配置中："

#. Tag: programlisting
#: tutorial.xml:661
#, no-c-format
msgid ""
"<![CDATA[<mapping resource=\"events/Event.hbm.xml\"/>\n"
"<mapping resource=\"events/Person.hbm.xml\"/>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:663
#, fuzzy, no-c-format
msgid ""
"Create an association between these two entities. Persons can participate in "
"events, and events have participants. The design questions you have to deal "
"with are: directionality, multiplicity, and collection behavior."
msgstr ""
"现在我们在这两个实体之间创建一个关联。显然，persons可以参与一系列events，而"
"events也有不同的参加者（persons）。我们需要处理的设计问题是关联方向"
"（directionality），阶数（multiplicity）和集合（collection）的行为。"

#. Tag: title
#: tutorial.xml:673
#, no-c-format
msgid "A unidirectional Set-based association"
msgstr "单向Set-based的关联"

#. Tag: para
#: tutorial.xml:675
#, fuzzy, no-c-format
msgid ""
"By adding a collection of events to the <literal>Person</literal> class, you "
"can easily navigate to the events for a particular person, without executing "
"an explicit query - by calling <literal>Person#getEvents</literal>. Multi-"
"valued associations are represented in Hibernate by one of the Java "
"Collection Framework contracts; here we choose a <interfacename>java.util."
"Set</interfacename> because the collection will not contain duplicate "
"elements and the ordering is not relevant to our examples:"
msgstr ""
"我们将向<literal>Person</literal>类增加一连串的events。那样，通过调用"
"<literal>aPerson.getEvents()</literal>，就可以轻松地导航到特定person所参与的"
"events，而不用去执行一个显式的查询。我们使用Java的集合类（collection）："
"<literal>Set</literal>，因为set 不包含重复的元素及与我们无关的排序。"

#. Tag: programlisting
#: tutorial.xml:686
#, no-c-format
msgid ""
"<![CDATA[public class Person {\n"
"\n"
"    private Set events = new HashSet();\n"
"\n"
"    public Set getEvents() {\n"
"        return events;\n"
"    }\n"
"\n"
"    public void setEvents(Set events) {\n"
"        this.events = events;\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:688
#, fuzzy, no-c-format
msgid ""
"Before mapping this association, let's consider the other side. We could "
"just keep this unidirectional or create another collection on the "
"<literal>Event</literal>, if we wanted to be able to navigate it from both "
"directions. This is not necessary, from a functional perspective. You can "
"always execute an explicit query to retrieve the participants for a "
"particular event. This is a design choice left to you, but what is clear "
"from this discussion is the multiplicity of the association: \"many\" valued "
"on both sides is called a <emphasis>many-to-many</emphasis> association. "
"Hence, we use Hibernate's many-to-many mapping:"
msgstr ""
"在映射这个关联之前，先考虑一下此关联的另外一端。很显然，我们可以保持这个关联"
"是单向的。或者，我们可以在<literal>Event</literal>里创建另外一个集合，如果希"
"望能够双向地导航，如：<literal>anEvent.getParticipants()</literal>。从功能的"
"角度来说，这并不是必须的。因为你总可以显式地执行一个查询，以获得某个特定event"
"的所有参与者。这是个在设计时需要做出的选择，完全由你来决定，但此讨论中关于关"
"联的阶数是清楚的：即两端都是“多”值的，我们把它叫做<emphasis>多对多(many-to-"
"many)</emphasis>关联。因而，我们使用Hibernate的多对多映射："

#. Tag: programlisting
#: tutorial.xml:701
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Person\" table=\"PERSON\">\n"
"    <id name=\"id\" column=\"PERSON_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <property name=\"age\"/>\n"
"    <property name=\"firstname\"/>\n"
"    <property name=\"lastname\"/>\n"
"\n"
"    <set name=\"events\" table=\"PERSON_EVENT\">\n"
"        <key column=\"PERSON_ID\"/>\n"
"        <many-to-many column=\"EVENT_ID\" class=\"Event\"/>\n"
"    </set>\n"
"\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:703
#, fuzzy, no-c-format
msgid ""
"Hibernate supports a broad range of collection mappings, a <literal>set</"
"literal> being most common. For a many-to-many association, or <emphasis>n:"
"m</emphasis> entity relationship, an association table is required. Each row "
"in this table represents a link between a person and an event. The table "
"name is decalred using the <literal>table</literal> attribute of the "
"<literal>set</literal> element. The identifier column name in the "
"association, for the person side, is defined with the <literal>key</literal> "
"element, the column name for the event's side with the <literal>column</"
"literal> attribute of the <literal>many-to-many</literal>. You also have to "
"tell Hibernate the class of the objects in your collection (the class on the "
"other side of the collection of references)."
msgstr ""
"Hibernate支持各种各样的集合映射，<literal>&lt;set&gt;</literal>使用的最为普"
"遍。对于多对多关联（或叫<emphasis>n:m</emphasis>实体关系）, 需要一个关联表"
"（association table）。<literal>表</literal>里面的每一行代表从person到event的"
"一个关联。表名是由<literal>set</literal>元素的<literal>table</literal>属性配"
"置的。关联里面的标识符字段名，对于person的一端，是由<literal>&lt;key&gt;</"
"literal>元素定义，而event一端的字段名是由<literal>&lt;many-to-many&gt;</"
"literal>元素的<literal>column</literal>属性定义。你也必须告诉Hibernate集合中"
"对象的类（也就是位于这个集合所代表的关联另外一端的类）。"

#. Tag: para
#: tutorial.xml:719
#, no-c-format
msgid "The database schema for this mapping is therefore:"
msgstr "因而这个映射的数据库schema是："

#. Tag: programlisting
#: tutorial.xml:723
#, no-c-format
msgid ""
"<![CDATA[\n"
"    _____________        __________________\n"
"   |             |      |                  |       _____________\n"
"   |   EVENTS    |      |   PERSON_EVENT   |      |             |\n"
"   |_____________|      |__________________|      |    PERSON   |\n"
"   |             |      |                  |      |_____________|\n"
"   | *EVENT_ID   | <--> | *EVENT_ID        |      |             |\n"
"   |  EVENT_DATE |      | *PERSON_ID       | <--> | *PERSON_ID  |\n"
"   |  TITLE      |      |__________________|      |  AGE        |\n"
"   |_____________|                                |  FIRSTNAME  |\n"
"                                                  |  LASTNAME   |\n"
"                                                  |_____________|\n"
" ]]>"
msgstr ""

#. Tag: title
#: tutorial.xml:728
#, no-c-format
msgid "Working the association"
msgstr "使关联工作"

#. Tag: para
#: tutorial.xml:730
#, fuzzy, no-c-format
msgid ""
"Now we will bring some people and events together in a new method in "
"<literal>EventManager</literal>:"
msgstr ""
"我们把一些people和events 一起放到<literal>EventManager</literal>的新方法中："

#. Tag: programlisting
#: tutorial.xml:734
#, no-c-format
msgid ""
"<![CDATA[    private void addPersonToEvent(Long personId, Long eventId) {\n"
"        Session session = HibernateUtil.getSessionFactory().getCurrentSession"
"();\n"
"        session.beginTransaction();\n"
"\n"
"        Person aPerson = (Person) session.load(Person.class, personId);\n"
"        Event anEvent = (Event) session.load(Event.class, eventId);\n"
"        aPerson.getEvents().add(anEvent);\n"
"\n"
"        session.getTransaction().commit();\n"
"    }]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:736
#, fuzzy, no-c-format
msgid ""
"After loading a <literal>Person</literal> and an <literal>Event</literal>, "
"simply modify the collection using the normal collection methods. There is "
"no explicit call to <literal>update()</literal> or <literal>save()</"
"literal>; Hibernate automatically detects that the collection has been "
"modified and needs to be updated. This is called <emphasis>automatic dirty "
"checking</emphasis>. You can also try it by modifying the name or the date "
"property of any of your objects. As long as they are in "
"<emphasis>persistent</emphasis> state, that is, bound to a particular "
"Hibernate <interfacename>org.hibernate.Session</interfacename>, Hibernate "
"monitors any changes and executes SQL in a write-behind fashion. The process "
"of synchronizing the memory state with the database, usually only at the end "
"of a unit of work, is called <emphasis>flushing</emphasis>. In our code, the "
"unit of work ends with a commit, or rollback, of the database transaction."
msgstr ""
"在加载一<literal>Person</literal>和<literal>Event</literal>后，使用普通的集合"
"方法就可容易地修改我们定义的集合。如你所见，没有显式的<literal>update()</"
"literal>或<literal>save()</literal>，Hibernate会自动检测到集合已经被修改并需"
"要更新回数据库。这叫做自动脏检查（<emphasis>automatic dirty checking</"
"emphasis>），你也可以尝试修改任何对象的name或者date属性，只要他们处于"
"<emphasis>持久化</emphasis>状态，也就是被绑定到某个Hibernate 的"
"<literal>Session</literal>上（如：他们刚刚在一个单元操作被加载或者保存），"
"Hibernate监视任何改变并在后台隐式写的方式执行SQL。同步内存状态和数据库的过"
"程，通常只在单元操作结束的时候发生，称此过程为清理缓存<emphasis>（flushing）"
"</emphasis>。在我们的代码中，工作单元由数据库事务的提交（或者回滚）来结束——这"
"是由<literal>CurrentSessionContext</literal>类的<literal>thread</literal>配置"
"选项定义的。"

#. Tag: para
#: tutorial.xml:755
#, fuzzy, no-c-format
msgid ""
"You can load person and event in different units of work. Or you can modify "
"an object outside of a <interfacename>org.hibernate.Session</interfacename>, "
"when it is not in persistent state (if it was persistent before, this state "
"is called <emphasis>detached</emphasis>). You can even modify a collection "
"when it is detached:"
msgstr ""
"当然，你也可以在不同的单元操作里面加载person和event。或在<literal>Session</"
"literal>以外修改不是处在持久化（persistent）状态下的对象（如果该对象以前曾经"
"被持久化，那么我们称这个状态为<emphasis>脱管（detached）</emphasis>）。你甚至"
"可以在一个集合被脱管时修改它："

#. Tag: programlisting
#: tutorial.xml:764
#, no-c-format
msgid ""
"<![CDATA[    private void addPersonToEvent(Long personId, Long eventId) {\n"
"        Session session = HibernateUtil.getSessionFactory().getCurrentSession"
"();\n"
"        session.beginTransaction();\n"
"\n"
"        Person aPerson = (Person) session\n"
"                .createQuery(\"select p from Person p left join fetch p."
"events where p.id = :pid\")\n"
"                .setParameter(\"pid\", personId)\n"
"                .uniqueResult(); // Eager fetch the collection so we can use "
"it detached\n"
"        Event anEvent = (Event) session.load(Event.class, eventId);\n"
"\n"
"        session.getTransaction().commit();\n"
"\n"
"        // End of first unit of work\n"
"\n"
"        aPerson.getEvents().add(anEvent); // aPerson (and its collection) is "
"detached\n"
"\n"
"        // Begin second unit of work\n"
"\n"
"        Session session2 = HibernateUtil.getSessionFactory()."
"getCurrentSession();\n"
"        session2.beginTransaction();\n"
"        session2.update(aPerson); // Reattachment of aPerson\n"
"\n"
"        session2.getTransaction().commit();\n"
"    }]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:766
#, fuzzy, no-c-format
msgid ""
"The call to <literal>update</literal> makes a detached object persistent "
"again by binding it to a new unit of work, so any modifications you made to "
"it while detached can be saved to the database. This includes any "
"modifications (additions/deletions) you made to a collection of that entity "
"object."
msgstr ""
"对<literal>update</literal>的调用使一个脱管对象重新持久化，你可以说它被绑定到"
"一个新的单元操作上，所以在脱管状态下对它所做的任何修改都会被保存到数据库里。"
"这也包括你对这个实体对象的集合所作的任何改动（增加/删除）。"

#. Tag: para
#: tutorial.xml:775
#, fuzzy, no-c-format
msgid ""
"This is not much use in our example, but it is an important concept you can "
"incorporate into your own application. Complete this exercise by adding a "
"new action to the main method of the <literal>EventManager</literal> and "
"call it from the command line. If you need the identifiers of a person and "
"an event - the <literal>save()</literal> method returns it (you might have "
"to modify some of the previous methods to return that identifier):"
msgstr ""
"这对我们当前的情形不是很有用，但它是非常重要的概念，你可以把它融入到你自己的"
"应用程序设计中。在<literal>EventManager</literal>的main方法中添加一个新的动"
"作，并从命令行运行它来完成我们所做的练习。如果你需要person及event的标识符 — "
"那就用<literal>save()</literal>方法返回它（你可能需要修改前面的一些方法来返回"
"那个标识符）："

#. Tag: programlisting
#: tutorial.xml:783
#, no-c-format
msgid ""
"<![CDATA[        else if (args[0].equals(\"addpersontoevent\")) {\n"
"            Long eventId = mgr.createAndStoreEvent(\"My Event\", new Date"
"());\n"
"            Long personId = mgr.createAndStorePerson(\"Foo\", \"Bar\");\n"
"            mgr.addPersonToEvent(personId, eventId);\n"
"            System.out.println(\"Added person \" + personId + \" to event \" "
"+ eventId);\n"
"        }]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:785
#, fuzzy, no-c-format
msgid ""
"This is an example of an association between two equally important classes : "
"two entities. As mentioned earlier, there are other classes and types in a "
"typical model, usually \"less important\". Some you have already seen, like "
"an <literal>int</literal> or a <classname>java.lang.String</classname>. We "
"call these classes <emphasis>value types</emphasis>, and their instances "
"<emphasis>depend</emphasis> on a particular entity. Instances of these types "
"do not have their own identity, nor are they shared between entities. Two "
"persons do not reference the same <literal>firstname</literal> object, even "
"if they have the same first name. Value types cannot only be found in the "
"JDK , but you can also write dependent classes yourself such as an "
"<literal>Address</literal> or <literal>MonetaryAmount</literal> class. In "
"fact, in a Hibernate application all JDK classes are considered value types."
msgstr ""
"上面是个关于两个同等重要的实体类间关联的例子。像前面所提到的那样，在特定的模"
"型中也存在其它的类和类型，这些类和类型通常是“次要的”。你已看到过其中的一些，"
"像<literal>int</literal>或<literal>String</literal>。我们称这些类为<emphasis>"
"值类型（value type）</emphasis>，它们的实例<emphasis>依赖（depend）</"
"emphasis>在某个特定的实体上。这些类型的实例没有它们自己的标识（identity），也"
"不能在实体间被共享（比如，两个person不能引用同一个<literal>firstname</"
"literal>对象，即使他们有相同的first name）。当然，值类型并不仅仅在JDK中存在"
"（事实上，在一个Hibernate应用程序中，所有的JDK类都被视为值类型），而且你也可"
"以编写你自己的依赖类，例如<literal>Address</literal>，"
"<literal>MonetaryAmount</literal>。"

#. Tag: para
#: tutorial.xml:803
#, fuzzy, no-c-format
msgid ""
"You can also design a collection of value types. This is conceptually "
"different from a collection of references to other entities, but looks "
"almost the same in Java."
msgstr ""
"你也可以设计一个值类型的集合，这在概念上与引用其它实体的集合有很大的不同，但"
"是在Java里面看起来几乎是一样的。"

#. Tag: title
#: tutorial.xml:812
#, no-c-format
msgid "Collection of values"
msgstr "值类型的集合"

#. Tag: para
#: tutorial.xml:814
#, no-c-format
msgid ""
"Let's add a collection of email addresses to the <literal>Person</literal> "
"entity. This will be represented as a <interfacename>java.util.Set</"
"interfacename> of <classname>java.lang.String</classname> instances:"
msgstr ""

#. Tag: programlisting
#: tutorial.xml:820
#, no-c-format
msgid ""
"<![CDATA[    private Set emailAddresses = new HashSet();\n"
"\n"
"    public Set getEmailAddresses() {\n"
"        return emailAddresses;\n"
"    }\n"
"\n"
"    public void setEmailAddresses(Set emailAddresses) {\n"
"        this.emailAddresses = emailAddresses;\n"
"    }]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:822
#, fuzzy, no-c-format
msgid "The mapping of this <literal>Set</literal> is as follows:"
msgstr "这个<literal>Set</literal>的映射"

#. Tag: programlisting
#: tutorial.xml:826
#, no-c-format
msgid ""
"<![CDATA[        <set name=\"emailAddresses\" table=\"PERSON_EMAIL_ADDR\">\n"
"            <key column=\"PERSON_ID\"/>\n"
"            <element type=\"string\" column=\"EMAIL_ADDR\"/>\n"
"        </set>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:828
#, fuzzy, no-c-format
msgid ""
"The difference compared with the earlier mapping is the use of the "
"<literal>element</literal> part which tells Hibernate that the collection "
"does not contain references to another entity, but is rather a collection "
"whose elements are values types, here specifically of type <literal>string</"
"literal>. The lowercase name tells you it is a Hibernate mapping type/"
"converter. Again the <literal>table</literal> attribute of the <literal>set</"
"literal> element determines the table name for the collection. The "
"<literal>key</literal> element defines the foreign-key column name in the "
"collection table. The <literal>column</literal> attribute in the "
"<literal>element</literal> element defines the column name where the email "
"address values will actually be stored."
msgstr ""
"比较这次和此前映射的差别，主要在于<literal>element</literal>部分，这次并没有"
"包含对其它实体引用的集合，而是元素类型为<literal>String</literal>的集合（在映"
"射中使用小写的名字”string“是向你表明它是一个Hibernate的映射类型或者类型转换"
"器）。和之前一样，<literal>set</literal>元素的<literal>table</literal>属性决"
"定了用于集合的表名。<literal>key</literal>元素定义了在集合表中外键的字段名。"
"<literal>element</literal>元素的<literal>column</literal>属性定义用于实际保存"
"<literal>String</literal>值的字段名。"

#. Tag: para
#: tutorial.xml:844
#, fuzzy, no-c-format
msgid "Here is the updated schema:"
msgstr "看一下修改后的数据库schema。"

#. Tag: programlisting
#: tutorial.xml:848
#, no-c-format
msgid ""
"<![CDATA[\n"
"  _____________        __________________\n"
" |             |      |                  |       _____________\n"
" |   EVENTS    |      |   PERSON_EVENT   |      |             |       "
"___________________\n"
" |_____________|      |__________________|      |    PERSON   |      "
"|                   |\n"
" |             |      |                  |      |_____________|      | "
"PERSON_EMAIL_ADDR |\n"
" | *EVENT_ID   | <--> | *EVENT_ID        |      |             |      |"
"___________________|\n"
" |  EVENT_DATE |      | *PERSON_ID       | <--> | *PERSON_ID  | <--> |  "
"*PERSON_ID       |\n"
" |  TITLE      |      |__________________|      |  AGE        |      |  "
"*EMAIL_ADDR      |\n"
" |_____________|                                |  FIRSTNAME  |      |"
"___________________|\n"
"                                                |  LASTNAME   |\n"
"                                                |_____________|\n"
" ]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:850
#, fuzzy, no-c-format
msgid ""
"You can see that the primary key of the collection table is in fact a "
"composite key that uses both columns. This also implies that there cannot be "
"duplicate email addresses per person, which is exactly the semantics we need "
"for a set in Java."
msgstr ""
"你可以看到集合表的主键实际上是个复合主键，同时使用了2个字段。这也暗示了对于同"
"一个person不能有重复的email地址，这正是Java里面使用Set时候所需要的语义（Set里"
"元素不能重复）。"

#. Tag: para
#: tutorial.xml:856
#, fuzzy, no-c-format
msgid ""
"You can now try to add elements to this collection, just like we did before "
"by linking persons and events. It is the same code in Java:"
msgstr ""
"你现在可以试着把元素加入到这个集合，就像我们在之前关联person和event的那样。其"
"实现的Java代码是相同的："

#. Tag: programlisting
#: tutorial.xml:861
#, no-c-format
msgid ""
"<![CDATA[    private void addEmailToPerson(Long personId, String "
"emailAddress) {\n"
"        Session session = HibernateUtil.getSessionFactory().getCurrentSession"
"();\n"
"        session.beginTransaction();\n"
"\n"
"        Person aPerson = (Person) session.load(Person.class, personId);\n"
"        // adding to the emailAddress collection might trigger a lazy load "
"of the collection\n"
"        aPerson.getEmailAddresses().add(emailAddress);\n"
"\n"
"        session.getTransaction().commit();\n"
"    }]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:863
#, fuzzy, no-c-format
msgid ""
"This time we did not use a <emphasis>fetch</emphasis> query to initialize "
"the collection. Monitor the SQL log and try to optimize this with an eager "
"fetch."
msgstr ""
"这次我们没有使用<emphasis>fetch</emphasis>查询来初始化集合。因此，调用其"
"getter方法会触发另一附加的select来初始化集合，这样我们才能把元素添加进去。检"
"查SQL log，试着通过预先抓取来优化它。"

#. Tag: title
#: tutorial.xml:872
#, no-c-format
msgid "Bi-directional associations"
msgstr "双向关联"

#. Tag: para
#: tutorial.xml:874
#, fuzzy, no-c-format
msgid ""
"Next you will map a bi-directional association. You will make the "
"association between person and event work from both sides in Java. The "
"database schema does not change, so you will still have many-to-many "
"multiplicity."
msgstr ""
"接下来我们将映射双向关联（bi-directional association）－ 在Java里让person和"
"event可以从关联的任何一端访问另一端。当然，数据库schema没有改变，我们仍然需要"
"多对多的阶数。一个关系型数据库要比网络编程语言 更加灵活，所以它并不需要任何像"
"导航方向（navigation direction）的东西 － 数据可以用任何可能的方式进行查看和"
"获取。"

#. Tag: para
#: tutorial.xml:882
#, no-c-format
msgid ""
"A relational database is more flexible than a network programming language, "
"in that it does not need a navigation direction; data can be viewed and "
"retrieved in any possible way."
msgstr ""

#. Tag: para
#: tutorial.xml:890
#, fuzzy, no-c-format
msgid ""
"First, add a collection of participants to the <literal>Event</literal> "
"class:"
msgstr "首先，把一个参与者（person）的集合加入<literal>Event</literal>类中："

#. Tag: programlisting
#: tutorial.xml:895
#, no-c-format
msgid ""
"<![CDATA[    private Set participants = new HashSet();\n"
"\n"
"    public Set getParticipants() {\n"
"        return participants;\n"
"    }\n"
"\n"
"    public void setParticipants(Set participants) {\n"
"        this.participants = participants;\n"
"    }]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:897
#, fuzzy, no-c-format
msgid ""
"Now map this side of the association in <literal>Event.hbm.xml</literal>."
msgstr "在<literal>Event.hbm.xml</literal>里面也映射这个关联。"

#. Tag: programlisting
#: tutorial.xml:901
#, no-c-format
msgid ""
"<![CDATA[        <set name=\"participants\" table=\"PERSON_EVENT\" inverse="
"\"true\">\n"
"            <key column=\"EVENT_ID\"/>\n"
"            <many-to-many column=\"PERSON_ID\" class=\"events.Person\"/>\n"
"        </set>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:903
#, fuzzy, no-c-format
msgid ""
"These are normal <literal>set</literal> mappings in both mapping documents. "
"Notice that the column names in <literal>key</literal> and <literal>many-to-"
"many</literal> swap in both mapping documents. The most important addition "
"here is the <literal>inverse=\"true\"</literal> attribute in the "
"<literal>set</literal> element of the <literal>Event</literal>'s collection "
"mapping."
msgstr ""
"如你所见，两个映射文件里都有普通的<literal>set</literal>映射。注意在两个映射"
"文件中，互换了<literal>key</literal>和<literal>many-to-many</literal>的字段"
"名。这里最重要的是<literal>Event</literal>映射文件里增加了<literal>set</"
"literal>元素的<literal>inverse=\"true\"</literal>属性。"

#. Tag: para
#: tutorial.xml:911
#, fuzzy, no-c-format
msgid ""
"What this means is that Hibernate should take the other side, the "
"<literal>Person</literal> class, when it needs to find out information about "
"the link between the two. This will be a lot easier to understand once you "
"see how the bi-directional link between our two entities is created."
msgstr ""
"这意味着在需要的时候，Hibernate能在关联的另一端 － <literal>Person</literal>"
"类得到两个实体间关联的信息。这将会极大地帮助你理解双向关联是如何在两个实体间"
"被创建的。"

#. Tag: title
#: tutorial.xml:920
#, no-c-format
msgid "Working bi-directional links"
msgstr "使双向连起来"

#. Tag: para
#: tutorial.xml:922
#, fuzzy, no-c-format
msgid ""
"First, keep in mind that Hibernate does not affect normal Java semantics. "
"How did we create a link between a <literal>Person</literal> and an "
"<literal>Event</literal> in the unidirectional example? You add an instance "
"of <literal>Event</literal> to the collection of event references, of an "
"instance of <literal>Person</literal>. If you want to make this link bi-"
"directional, you have to do the same on the other side by adding a "
"<literal>Person</literal> reference to the collection in an <literal>Event</"
"literal>. This process of \"setting the link on both sides\" is absolutely "
"necessary with bi-directional links."
msgstr ""
"首先请记住，Hibernate并不影响通常的Java语义。 在单向关联的例子中，我们是怎样"
"在<literal>Person</literal>和<literal>Event</literal>之间创建联系的？我们把"
"<literal>Event</literal>实例添加到<literal>Person</literal>实例内的event引用"
"集合里。因此很显然，如果我们要让这个关联可以双向地工作，我们需要在另外一端做"
"同样的事情 － 把<literal>Person</literal>实例加入<literal>Event</literal>类内"
"的Person引用集合。这“在关联的两端设置联系”是完全必要的而且你都得这么做。"

#. Tag: para
#: tutorial.xml:932
#, fuzzy, no-c-format
msgid ""
"Many developers program defensively and create link management methods to "
"correctly set both sides (for example, in <literal>Person</literal>):"
msgstr ""
"许多开发人员防御式地编程，创建管理关联的方法来保证正确的设置了关联的两端，比"
"如在<literal>Person</literal>里："

#. Tag: programlisting
#: tutorial.xml:937
#, no-c-format
msgid ""
"<![CDATA[    protected Set getEvents() {\n"
"        return events;\n"
"    }\n"
"\n"
"    protected void setEvents(Set events) {\n"
"        this.events = events;\n"
"    }\n"
"\n"
"    public void addToEvent(Event event) {\n"
"        this.getEvents().add(event);\n"
"        event.getParticipants().add(this);\n"
"    }\n"
"\n"
"    public void removeFromEvent(Event event) {\n"
"        this.getEvents().remove(event);\n"
"        event.getParticipants().remove(this);\n"
"    }]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:939
#, fuzzy, no-c-format
msgid ""
"The get and set methods for the collection are now protected. This allows "
"classes in the same package and subclasses to still access the methods, but "
"prevents everybody else from altering the collections directly. Repeat the "
"steps for the collection on the other side."
msgstr ""
"注意现在对于集合的get和set方法的访问级别是protected - 这允许在位于同一个包"
"（package）中的类以及继承自这个类的子类可以访问这些方法，但禁止其他任何人的直"
"接访问，避免了集合内容的混乱。你应尽可能地在另一端也把集合的访问级别设成"
"protected。"

#. Tag: para
#: tutorial.xml:946
#, fuzzy, no-c-format
msgid ""
"What about the <literal>inverse</literal> mapping attribute? For you, and "
"for Java, a bi-directional link is simply a matter of setting the references "
"on both sides correctly. Hibernate, however, does not have enough "
"information to correctly arrange SQL <literal>INSERT</literal> and "
"<literal>UPDATE</literal> statements (to avoid constraint violations). "
"Making one side of the association <literal>inverse</literal> tells "
"Hibernate to consider it a <emphasis>mirror</emphasis> of the other side. "
"That is all that is necessary for Hibernate to resolve any issues that arise "
"when transforming a directional navigation model to a SQL database schema. "
"The rules are straightforward: all bi-directional associations need one side "
"as <literal>inverse</literal>. In a one-to-many association it has to be the "
"many-side, and in many-to-many association you can select either side."
msgstr ""
"<literal>inverse</literal>映射属性究竟表示什么呢？对于你和Java来说，一个双向"
"关联仅仅是在两端简单地正确设置引用。然而，Hibernate并没有足够的信息去正确地执"
"行<literal>INSERT</literal>和<literal>UPDATE</literal>语句（以避免违反数据库"
"约束），所以它需要一些帮助来正确的处理双向关联。把关联的一端设置为"
"<literal>inverse</literal>将告诉Hibernate忽略关联的这一端，把这端看成是另外一"
"端的一个<emphasis>镜象（mirror）</emphasis>。这就是所需的全部信息，Hibernate"
"利用这些信息来处理把一个有向导航模型转移到数据库schema时的所有问题。你只需要"
"记住这个直观的规则：所有的双向关联需要有一端被设置为<literal>inverse</"
"literal>。在一对多关联中它必须是代表多（many）的那端。而在多对多（many-to-"
"many）关联中，你可以任意选取一端，因为两端之间并没有差别。"

#. Tag: title
#: tutorial.xml:962
#, no-c-format
msgid "Part 3 - The EventManager web application"
msgstr "第三部分 - EventManager web应用程序"

#. Tag: para
#: tutorial.xml:964
#, fuzzy, no-c-format
msgid ""
"A Hibernate web application uses <literal>Session</literal> and "
"<literal>Transaction</literal> almost like a standalone application. "
"However, some common patterns are useful. You can now write an "
"<literal>EventManagerServlet</literal>. This servlet can list all events "
"stored in the database, and it provides an HTML form to enter new events."
msgstr ""
"Hibernate web应用程序使用<literal>Session</literal> 和<literal>Transaction</"
"literal>的方式几乎和独立应用程序是一样的。但是，有一些常见的模式（pattern）非"
"常有用。现在我们编写一个<literal>EventManagerServlet</literal>。这个servlet可"
"以列出数据库中保存的所有的events，还提供一个HTML表单来增加新的events。"

#. Tag: title
#: tutorial.xml:972
#, no-c-format
msgid "Writing the basic servlet"
msgstr "编写基本的servlet"

#. Tag: para
#: tutorial.xml:974
#, fuzzy, no-c-format
msgid ""
"First we need create our basic processing servlet. Since our servlet only "
"handles HTTP <literal>GET</literal> requests, we will only implement the "
"<literal>doGet()</literal> method:"
msgstr ""
"我们后面会用到<literal>dateFormatter</literal> 的工具， 它把<literal>Date</"
"literal>对象转换为字符串。只要一个formatter作为servlet的成员就可以了。"

#. Tag: programlisting
#: tutorial.xml:980
#, no-c-format
msgid ""
"<![CDATA[package org.hibernate.tutorial.web;\n"
"\n"
"// Imports\n"
"\n"
"public class EventManagerServlet extends HttpServlet {\n"
"\n"
"    protected void doGet(\n"
"            HttpServletRequest request,\n"
"            HttpServletResponse response) throws ServletException, "
"IOException {\n"
"\n"
"        SimpleDateFormat dateFormatter = new SimpleDateFormat( \"dd.MM.yyyy"
"\" );\n"
"\n"
"        try {\n"
"            // Begin unit of work\n"
"            HibernateUtil.getSessionFactory().getCurrentSession()."
"beginTransaction();\n"
"\n"
"            // Process request and render page...\n"
"\n"
"            // End unit of work\n"
"            HibernateUtil.getSessionFactory().getCurrentSession()."
"getTransaction().commit();\n"
"        }\n"
"        catch (Exception ex) {\n"
"            HibernateUtil.getSessionFactory().getCurrentSession()."
"getTransaction().rollback();\n"
"            if ( ServletException.class.isInstance( ex ) ) {\n"
"                throw ( ServletException ) ex;\n"
"            }\n"
"            else {\n"
"                throw new ServletException( ex );\n"
"            }\n"
"        }\n"
"    }\n"
"\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:982
#, no-c-format
msgid ""
"Save this servlet as <filename>src/main/java/org/hibernate/tutorial/web/"
"EventManagerServlet.java</filename>"
msgstr ""

#. Tag: para
#: tutorial.xml:987
#, fuzzy, no-c-format
msgid ""
"The pattern applied here is called <emphasis>session-per-request</emphasis>. "
"When a request hits the servlet, a new Hibernate <literal>Session</literal> "
"is opened through the first call to <literal>getCurrentSession()</literal> "
"on the <literal>SessionFactory</literal>. A database transaction is then "
"started. All data access occurs inside a transaction irrespective of whether "
"the data is read or written. Do not use the auto-commit mode in applications."
msgstr ""
"这个servlet只处理 HTTP <literal>GET</literal> 请求，因此，我们要实现的是"
"<literal>doGet()</literal>方法："

#. Tag: para
#: tutorial.xml:996
#, no-c-format
msgid ""
"Do <emphasis>not</emphasis> use a new Hibernate <literal>Session</literal> "
"for every database operation. Use one Hibernate <literal>Session</literal> "
"that is scoped to the whole request. Use <literal>getCurrentSession()</"
"literal>, so that it is automatically bound to the current Java thread."
msgstr ""
"我们称这里应用的模式为每次请求一个session<emphasis>(session-per-request)</"
"emphasis>。当有请求到达这个servlet的时候，通过对<literal>SessionFactory</"
"literal>的第一次调用，打开一个新的Hibernate <literal>Session</literal>。然后"
"启动一个数据库事务&mdash;所有的数据访问都是在事务中进行，不管是读还是写（我们"
"在应用程序中不使用auto-commit模式）。"

#. Tag: para
#: tutorial.xml:1003
#, fuzzy, no-c-format
msgid ""
"Next, the possible actions of the request are processed and the response "
"HTML is rendered. We will get to that part soon."
msgstr ""
"<emphasis>不要</emphasis>为每次数据库操作都使用一个新的Hibernate "
"<literal>Session</literal>。将Hibernate <literal>Session</literal>的范围设置"
"为整个请求。要用<literal>getCurrentSession()</literal>，这样它自动会绑定到当"
"前Java线程。"

#. Tag: para
#: tutorial.xml:1008
#, fuzzy, no-c-format
msgid ""
"Finally, the unit of work ends when processing and rendering are complete. "
"If any problems occurred during processing or rendering, an exception will "
"be thrown and the database transaction rolled back. This completes the "
"<literal>session-per-request</literal> pattern. Instead of the transaction "
"demarcation code in every servlet, you could also write a servlet filter. "
"See the Hibernate website and Wiki for more information about this pattern "
"called <emphasis>Open Session in View</emphasis>. You will need it as soon "
"as you consider rendering your view in JSP, not in a servlet."
msgstr ""
"下一步，对请求的可能动作进行处理，渲染出反馈的HTML。我们很快就会涉及到那部"
"分。"

#. Tag: title
#: tutorial.xml:1022
#, no-c-format
msgid "Processing and rendering"
msgstr ""
"最后，当处理与渲染都结束的时候，这个工作单元就结束了。假若在处理或渲染的时候"
"有任何错误发生，会抛出一个异常，回滚数据库事务。这样，<literal>session-per-"
"request</literal>模式就完成了。为了避免在每个servlet中都编写事务边界界定的代"
"码，可以考虑写一个servlet 过滤器（filter）来更好地解决。关于这一模式的更多信"
"息，请参阅Hibernate网站和Wiki，这一模式叫做<emphasis>Open Session in View</"
"emphasis>&mdash;只要你考虑用JSP来渲染你的视图（view），而不是在servlet中，你"
"就会很快用到它。"

#. Tag: para
#: tutorial.xml:1024
#, fuzzy, no-c-format
msgid ""
"Now you can implement the processing of the request and the rendering of the "
"page."
msgstr "处理与渲染"

#. Tag: programlisting
#: tutorial.xml:1028
#, no-c-format
msgid ""
"<![CDATA[        // Write HTML header\n"
"        PrintWriter out = response.getWriter();\n"
"        out.println(\"<html><head><title>Event Manager</title></head><body>"
"\");\n"
"\n"
"        // Handle actions\n"
"        if ( \"store\".equals(request.getParameter(\"action\")) ) {\n"
"\n"
"            String eventTitle = request.getParameter(\"eventTitle\");\n"
"            String eventDate = request.getParameter(\"eventDate\");\n"
"\n"
"            if ( \"\".equals(eventTitle) || \"\".equals(eventDate) ) {\n"
"                out.println(\"<b><i>Please enter event title and date.</i></"
"b>\");\n"
"            }\n"
"            else {\n"
"                createAndStoreEvent(eventTitle, dateFormatter.parse"
"(eventDate));\n"
"                out.println(\"<b><i>Added event.</i></b>\");\n"
"            }\n"
"        }\n"
"\n"
"        // Print page\n"
"       printEventForm(out);\n"
"       listEvents(out, dateFormatter);\n"
"\n"
"       // Write HTML footer\n"
"       out.println(\"</body></html>\");\n"
"       out.flush();\n"
"       out.close();]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:1030
#, fuzzy, no-c-format
msgid ""
"This coding style, with a mix of Java and HTML, would not scale in a more "
"complex application&mdash;keep in mind that we are only illustrating basic "
"Hibernate concepts in this tutorial. The code prints an HTML header and a "
"footer. Inside this page, an HTML form for event entry and a list of all "
"events in the database are printed. The first method is trivial and only "
"outputs HTML:"
msgstr "我们来实现处理请求以及渲染页面的工作。"

#. Tag: programlisting
#: tutorial.xml:1039
#, no-c-format
msgid ""
"<![CDATA[    private void printEventForm(PrintWriter out) {\n"
"        out.println(\"<h2>Add new event:</h2>\");\n"
"        out.println(\"<form>\");\n"
"        out.println(\"Title: <input name='eventTitle' length='50'/><br/>"
"\");\n"
"        out.println(\"Date (e.g. 24.12.2009): <input name='eventDate' "
"length='10'/><br/>\");\n"
"        out.println(\"<input type='submit' name='action' value='store'/>"
"\");\n"
"        out.println(\"</form>\");\n"
"    }]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:1041
#, no-c-format
msgid ""
"The <literal>listEvents()</literal> method uses the Hibernate "
"<literal>Session</literal> bound to the current thread to execute a query:"
msgstr ""
"<literal>listEvents()</literal>方法使用绑定到当前线程的Hibernate "
"<literal>Session</literal>来执行查询："

#. Tag: programlisting
#: tutorial.xml:1047
#, no-c-format
msgid ""
"<![CDATA[    private void listEvents(PrintWriter out, SimpleDateFormat "
"dateFormatter) {\n"
"\n"
"        List result = HibernateUtil.getSessionFactory()\n"
"                .getCurrentSession().createCriteria(Event.class).list();\n"
"        if (result.size() > 0) {\n"
"            out.println(\"<h2>Events in database:</h2>\");\n"
"            out.println(\"<table border='1'>\");\n"
"            out.println(\"<tr>\");\n"
"            out.println(\"<th>Event title</th>\");\n"
"            out.println(\"<th>Event date</th>\");\n"
"            out.println(\"</tr>\");\n"
"            Iterator it = result.iterator();\n"
"            while (it.hasNext()) {\n"
"                Event event = (Event) it.next();\n"
"                out.println(\"<tr>\");\n"
"                out.println(\"<td>\" + event.getTitle() + \"</td>\");\n"
"                out.println(\"<td>\" + dateFormatter.format(event.getDate()) "
"+ \"</td>\");\n"
"                out.println(\"</tr>\");\n"
"            }\n"
"            out.println(\"</table>\");\n"
"        }\n"
"    }]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:1049
#, no-c-format
msgid ""
"Finally, the <literal>store</literal> action is dispatched to the "
"<literal>createAndStoreEvent()</literal> method, which also uses the "
"<literal>Session</literal> of the current thread:"
msgstr ""
"最后，<literal>store</literal>动作会被导向到<literal>createAndStoreEvent()</"
"literal>方法，它也使用当前线程的<literal>Session</literal>:"

#. Tag: programlisting
#: tutorial.xml:1055
#, no-c-format
msgid ""
"<![CDATA[    protected void createAndStoreEvent(String title, Date theDate) "
"{\n"
"        Event theEvent = new Event();\n"
"        theEvent.setTitle(title);\n"
"        theEvent.setDate(theDate);\n"
"\n"
"        HibernateUtil.getSessionFactory()\n"
"                .getCurrentSession().save(theEvent);\n"
"    }]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:1057
#, fuzzy, no-c-format
msgid ""
"The servlet is now complete. A request to the servlet will be processed in a "
"single <literal>Session</literal> and <literal>Transaction</literal>. As "
"earlier in the standalone application, Hibernate can automatically bind "
"these objects to the current thread of execution. This gives you the freedom "
"to layer your code and access the <literal>SessionFactory</literal> in any "
"way you like. Usually you would use a more sophisticated design and move the "
"data access code into data access objects (the DAO pattern). See the "
"Hibernate Wiki for more examples."
msgstr ""
"大功告成，这个servlet写完了。Hibernate会在单一的<literal>Session</literal> 和"
"<literal>Transaction</literal>中处理到达的servlet请求。如同在前面的独立应用程"
"序中那样，Hibernate可以自动的把这些对象绑定到当前运行的线程中。这给了你用任何"
"你喜欢的方式来对代码分层及访问<literal>SessionFactory</literal>的自由。通常，"
"你会用更加完备的设计，把数据访问代码转移到数据访问对象中(DAO模式）。请参见"
"Hibernate Wiki，那里有更多的例子。"

#. Tag: title
#: tutorial.xml:1071
#, no-c-format
msgid "Deploying and testing"
msgstr "部署与测试"

#. Tag: para
#: tutorial.xml:1073
#, no-c-format
msgid ""
"To deploy this application for testing we must create a Web ARchive (WAR). "
"First we must define the WAR descriptor as <filename>src/main/webapp/WEB-INF/"
"web.xml</filename>"
msgstr ""

#. Tag: programlisting
#: tutorial.xml:1079
#, no-c-format
msgid ""
"<![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<web-app version=\"2.4\"\n"
"    xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"    xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/"
"xml/ns/j2ee/web-app_2_4.xsd\">\n"
"\n"
"    <servlet>\n"
"        <servlet-name>Event Manager</servlet-name>\n"
"        <servlet-class>org.hibernate.tutorial.web.EventManagerServlet</"
"servlet-class>\n"
"    </servlet>\n"
"\n"
"    <servlet-mapping>\n"
"        <servlet-name>Event Manager</servlet-name>\n"
"        <url-pattern>/eventmanager</url-pattern>\n"
"    </servlet-mapping>\n"
"</web-app>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:1081
#, fuzzy, no-c-format
msgid ""
"To build and deploy call <literal>mvn package</literal> in your project "
"directory and copy the <filename>hibernate-tutorial.war</filename> file into "
"your Tomcat <filename>webapps</filename> directory."
msgstr ""
"在你的开发目录中，调用<literal>ant war</literal>来构建、打包，然后把"
"<literal>hibernate-tutorial.war</literal>文件拷贝到你的tomcat的"
"<literal>webapps</literal>目录下。假若你还没安装Tomcat，就去下载一个，按照指"
"南来安装。对此应用的发布，你不需要修改任何Tomcat的配置。"

#. Tag: para
#: tutorial.xml:1088
#, no-c-format
msgid ""
"If you do not have Tomcat installed, download it from <ulink url=\"http://"
"tomcat.apache.org/\"></ulink> and follow the installation instructions. Our "
"application requires no changes to the standard Tomcat configuration."
msgstr ""

#. Tag: para
#: tutorial.xml:1096
#, no-c-format
msgid ""
"Once deployed and Tomcat is running, access the application at "
"<literal>http://localhost:8080/hibernate-tutorial/eventmanager</literal>. "
"Make sure you watch the Tomcat log to see Hibernate initialize when the "
"first request hits your servlet (the static initializer in "
"<literal>HibernateUtil</literal> is called) and to get the detailed output "
"if any exceptions occurs."
msgstr ""
"在部署完，启动Tomcat之后，通过<literal>http://localhost:8080/hibernate-"
"tutorial/eventmanager</literal>进行访问你的应用，在第一次servlet 请求发生时，"
"请在Tomcat log中确认你看到Hibernate被初始化了（<literal>HibernateUtil</"
"literal>的静态初始化器被调用），假若有任何异常抛出，也可以看到详细的输出。"

#. Tag: title
#: tutorial.xml:1109
#, no-c-format
msgid "Summary"
msgstr "总结"

#. Tag: para
#: tutorial.xml:1111
#, fuzzy, no-c-format
msgid ""
"This tutorial covered the basics of writing a simple standalone Hibernate "
"application and a small web application. More tutorials are available from "
"the Hibernate <ulink url=\"http://hibernate.org\">website</ulink>."
msgstr ""
"本章覆盖了如何编写一个简单独立的Hibernate命令行应用程序及小型的Hibernate web"
"应用程序的基本要素。"

#~ msgid "Introduction to Hibernate"
#~ msgstr "Hibernate入门"

#~ msgid "Preface"
#~ msgstr "前言"

#~ msgid ""
#~ "This chapter is an introductory tutorial for new users of Hibernate. We "
#~ "start with a simple command line application using an in-memory database "
#~ "and develop it in easy to understand steps."
#~ msgstr ""
#~ "本章是面向Hibernate初学者的一个入门教程。我们从一个使用驻留内存式(in-"
#~ "memory)数据库的简单命令行应用程序开始, 用易于理解的方式逐步开发。"

#~ msgid ""
#~ "This tutorial is intended for new users of Hibernate but requires Java "
#~ "and SQL knowledge. It is based on a tutorial by Michael Gloegl, the third-"
#~ "party libraries we name are for JDK 1.4 and 5.0. You might need others "
#~ "for JDK 1.3."
#~ msgstr ""
#~ "本章面向Hibernate初学者，但需要Java和SQL知识。它是在Michael Goegl所写的指"
#~ "南的基础上完成的。在这里，我们称第三方库文件是指JDK 1.4和5.0。若使用"
#~ "JDK1.3，你可能需要其它的库文件。"

#~ msgid ""
#~ "The source code for the tutorial is included in the distribution in the "
#~ "<literal>doc/reference/tutorial/</literal> directory."
#~ msgstr ""
#~ "本章的源代码已包含在发布包中，位于<literal>doc/reference/tutorial/</"
#~ "literal>目录下。"

#~ msgid ""
#~ "First, we'll create a simple console-based Hibernate application. We use "
#~ "an Java database (HSQL DB), so we do not have to install any database "
#~ "server."
#~ msgstr ""
#~ "首先我们将创建一个简单的基于控制台的(console-based)Hibernate应用程序。由于"
#~ "我们使用Java数据库(HSQL DB)，所以不必安装任何数据库服务器。"

#~ msgid ""
#~ "The first thing we do, is set up our development directory and put all "
#~ "the Java libraries we need into it. Download the Hibernate distribution "
#~ "from the Hibernate website. Extract the package and place all required "
#~ "libraries found in <literal>/lib</literal> into into the <literal>/lib</"
#~ "literal> directory of your new development working directory. It should "
#~ "look like this:"
#~ msgstr ""
#~ "我们所做的第一件事就是创建我们的开发目录，并且把所有需要用到的Java库文件放"
#~ "进去。解压缩从Hibernate网站下载的Hibernate发布包，并把<literal>/lib</"
#~ "literal>目录下所有需要的库文件拷到我们新建开发目录下的<literal>/lib</"
#~ "literal>目录下。看起来就像这样："

#~ msgid ""
#~ "This is the minimum set of required libraries (note that we also copied "
#~ "hibernate3.jar, the main archive) for Hibernate <emphasis>at the time of "
#~ "writing</emphasis>. The Hibernate release you are using might require "
#~ "more or less libraries. See the <literal>README.txt</literal> file in the "
#~ "<literal>lib/</literal> directory of the Hibernate distribution for more "
#~ "information about required and optional third-party libraries. (Actually, "
#~ "Log4j is not required but preferred by many developers.)"
#~ msgstr ""
#~ "<emphasis>到编写本文时为止</emphasis>，这些是Hibernate运行所需要的最小库文"
#~ "件集合（注意我们也拷贝了 Hibernate3.jar，这个是最主要的文件）。你正使用的"
#~ "Hibernate版本可能需要比这更多或少一些的库文件。请参见发布包中的"
#~ "<literal>lib/</literal>目录下的<literal>README.txt</literal>，以获取更多关"
#~ "于所需和可选的第三方库文件信息（事实上，Log4j并不是必须的库文件，但被许多"
#~ "开发者所喜欢）。"

#~ msgid ""
#~ "Our first persistent class is a simple JavaBean class with some "
#~ "properties:"
#~ msgstr ""
#~ "我们的第一个持久化类是一个带有一些属性（property）的简单JavaBean类："

#~ msgid ""
#~ "Place this Java source file in a directory called <literal>src</literal> "
#~ "in the development folder, and in its correct package. The directory "
#~ "should now look like this:"
#~ msgstr ""
#~ "把这个Java源代码文件放到开发目录下的<literal>src</literal>目录里，注意包位"
#~ "置要正确。 现在这个目录看起来应该像这样："

#~ msgid "In the next step, we tell Hibernate about this persistent class."
#~ msgstr "下一步，我们把这个持久化类的信息告诉Hibernate。"

#~ msgid ""
#~ "The <literal>id</literal> element is the declaration of the identifer "
#~ "property, <literal>name=\"id\"</literal> declares the name of the Java "
#~ "property - Hibernate will use the getter and setter methods to access the "
#~ "property. The column attribute tells Hibernate which column of the "
#~ "<literal>EVENTS</literal> table we use for this primary key. The nested "
#~ "<literal>generator</literal> element specifies the identifier generation "
#~ "strategy, in this case we used <literal>native</literal>, which picks the "
#~ "best strategy depending on the configured database (dialect). Hibernate "
#~ "supports database generated, globally unique, as well as application "
#~ "assigned identifiers (or any strategy you have written an extension for)."
#~ msgstr ""
#~ "<literal>id</literal>元素是标识符属性的声明，<literal>name=\"id\"</"
#~ "literal> 声明了Java属性的名字 － Hibernate会使用<literal>getId()</literal>"
#~ "和<literal>setId()</literal>来访问它。 <literal>column</literal>属性则告诉"
#~ "Hibernate, 我们使用<literal>EVENTS</literal>表的哪个字段作为主键。嵌套的"
#~ "<literal>generator</literal>元素指定了标识符生成策略，在这里我们指定"
#~ "<literal>native</literal>，它根据已配置的数据库（方言）自动选择最佳的标识"
#~ "符生成策略。Hibernate支持由数据库生成，全局唯一性（globally unique）和应用"
#~ "程序指定（或者你自己为任何已有策略所写的扩展）这些策略来生成标识符。"

#~ msgid ""
#~ "This mapping file should be saved as <literal>Event.hbm.xml</literal>, "
#~ "right in the directory next to the <literal>Event</literal> Java class "
#~ "source file. The naming of mapping files can be arbitrary, however the "
#~ "<literal>hbm.xml</literal> suffix is a convention in the Hibernate "
#~ "developer community. The directory structure should now look like this:"
#~ msgstr ""
#~ "应该把这个映射文件保存为<literal>Event.hbm.xml</literal>，且就在"
#~ "<literal>Event</literal>Java类的源文件目录下。映射文件可随意地命名，但"
#~ "<literal>hbm.xml</literal>的后缀已成为Hibernate开发者社区的约定。现在目录"
#~ "结构看起来应该像这样："

#~ msgid "We continue with the main configuration of Hibernate."
#~ msgstr "我们继续进行Hibernate的主要配置。"

#~ msgid ""
#~ "We now have a persistent class and its mapping file in place. It is time "
#~ "to configure Hibernate. Before we do this, we will need a database. HSQL "
#~ "DB, a java-based SQL DBMS, can be downloaded from the HSQL DB website"
#~ "(http://hsqldb.org/). Actually, you only need the <literal>hsqldb.jar</"
#~ "literal> from this download. Place this file in the <literal>lib/</"
#~ "literal> directory of the development folder."
#~ msgstr ""
#~ "现在我们已经有了一个持久化类和它的映射文件，该是配置Hibernate的时候了。在"
#~ "此之前，我们需要一个数据库。 HSQL DB是种基于Java 的SQL数据库管理系统"
#~ "（DBMS），可以从HSQL DB的网站上下载。实际上，你只需下载的包中的"
#~ "<literal>hsqldb.jar</literal>文件，并把这个文件放在开发文件夹的"
#~ "<literal>lib/</literal>目录下即可。"

#~ msgid ""
#~ "Hibernate is the layer in your application which connects to this "
#~ "database, so it needs connection information. The connections are made "
#~ "through a JDBC connection pool, which we also have to configure. The "
#~ "Hibernate distribution contains several open source JDBC connection "
#~ "pooling tools, but will use the Hibernate built-in connection pool for "
#~ "this tutorial. Note that you have to copy the required library into your "
#~ "classpath and use different connection pooling settings if you want to "
#~ "use a production-quality third party JDBC pooling software."
#~ msgstr ""
#~ "Hibernate是你的应用程序里连接数据库的那层，所以它需要连接用的信息。连接"
#~ "（connection）是通过一个也由我们配置的JDBC连接池（connection pool）来完成"
#~ "的。Hibernate的发布包里包含了许多开源的（open source）连接池，但在我们例子"
#~ "中使用Hibernate内置的连接池。注意，如果你希望使用一个产品级(production-"
#~ "quality)的第三方连接池软件，你必须拷贝所需的库文件到你的classpath下，并使"
#~ "用不同的连接池设置。"

#~ msgid ""
#~ "Copy this file into the source directory, so it will end up in the root "
#~ "of the classpath. Hibernate automatically looks for a file called "
#~ "<literal>hibernate.cfg.xml</literal> in the root of the classpath, on "
#~ "startup."
#~ msgstr ""
#~ "把这个文件拷贝到源代码目录下面，这样它就位于classpath的根目录的最后。"
#~ "Hibernate在启动时会自动在classpath的根目录查找名为<literal>hibernate.cfg."
#~ "xml</literal>的配置文件。"

#~ msgid ""
#~ "We'll now build the tutorial with Ant. You will need to have Ant "
#~ "installed - get it from the <ulink url=\"http://ant.apache.org/"
#~ "bindownload.cgi\">Ant download page</ulink>. How to install Ant will not "
#~ "be covered here. Please refer to the <ulink url=\"http://ant.apache.org/"
#~ "manual/index.html\">Ant manual</ulink>. After you have installed Ant, we "
#~ "can start to create the buildfile. It will be called <literal>build.xml</"
#~ "literal> and placed directly in the development directory."
#~ msgstr ""
#~ "现在我们用Ant来构建应用程序。你必须先安装Ant－可以从<ulink url=\"http://"
#~ "ant.apache.org/bindownload.cgi\">Ant 下载页面</ulink>得到它。怎样安装Ant就"
#~ "不在这里介绍了，请参考<ulink url=\"http://ant.apache.org/manual/index.html"
#~ "\">Ant 用户手册</ulink>。当你安装完了Ant，就可以开始创建<literal>build."
#~ "xml</literal>文件，把它直接放在开发目录下面。"

#~ msgid "A basic build file looks like this:"
#~ msgstr "一个简单的build文件看起来像这样："

#~ msgid ""
#~ "This will tell Ant to add all files in the lib directory ending with "
#~ "<literal>.jar</literal> to the classpath used for compilation. It will "
#~ "also copy all non-Java source files to the target directory, e.g. "
#~ "configuration and Hibernate mapping files. If you now run Ant, you should "
#~ "get this output:"
#~ msgstr ""
#~ "这将告诉Ant把所有在lib目录下以<literal>.jar</literal>结尾的文件拷贝到"
#~ "classpath中以供编译之用。它也把所有的非Java源代码文件，例如配置和Hibernate"
#~ "映射文件，拷贝到目标目录。如果你现在运行Ant，会得到以下输出："

#~ msgid ""
#~ "Place <literal>HibernateUtil.java</literal> in the development source "
#~ "directory, in a package next to <literal>events</literal>:"
#~ msgstr ""
#~ "把<literal>HibernateUtil.java</literal>放在开发目录的源代码路径下，与放"
#~ "<literal>events</literal>的包并列："

#~ msgid ""
#~ "To run this first routine we have to add a callable target to the Ant "
#~ "build file:"
#~ msgstr ""
#~ "为第一次运行我们的程序，我们得在Ant的build文件中增加一个可以调用得到的"
#~ "target。"

#~ msgid ""
#~ "The value of the <literal>action</literal> argument is set on the command "
#~ "line when calling the target:"
#~ msgstr ""
#~ "<literal>action</literal>参数（argument）的值是通过命令行调用这个target的"
#~ "时候设置的："

#~ msgid ""
#~ "This is the <literal>INSERT</literal> executed by Hibernate, the question "
#~ "marks represent JDBC bind parameters. To see the values bound as "
#~ "arguments, or to reduce the verbosity of the log, check your "
#~ "<literal>log4j.properties</literal>."
#~ msgstr ""
#~ "这是Hibernate执行的<literal>INSERT</literal>命令，问号代表JDBC的绑定参数。"
#~ "如果想要看到绑定参数的值或者减少日志的长度，就要调整你在<literal>log4j."
#~ "properties</literal>文件里的设置。"

#~ msgid "Now, to execute and test all of this, follow these steps:"
#~ msgstr "现在，根据以下步骤来执行并测试以上各项："

#~ msgid ""
#~ "Run <literal>ant run -Daction=store</literal> to store something into the "
#~ "database and, of course, to generate the database schema before through "
#~ "hbm2ddl."
#~ msgstr ""
#~ "运行<literal>ant run -Daction=store</literal>来保存一些内容到数据库。当"
#~ "然，先得用hbm2ddl来生成数据库schema。"

#~ msgid ""
#~ "Now disable hbm2ddl by commenting out the property in your "
#~ "<literal>hibernate.cfg.xml</literal> file. Usually you only leave it "
#~ "turned on in continous unit testing, but another run of hbm2ddl would "
#~ "<emphasis>drop</emphasis> everything you have stored - the "
#~ "<literal>create</literal> configuration setting actually translates into "
#~ "\"drop all tables from the schema, then re-create all tables, when the "
#~ "SessionFactory is build\"."
#~ msgstr ""
#~ "现在把<literal>hibernate.cfg.xml</literal>文件中hbm2ddl属性注释掉，这样我"
#~ "们就取消了在启动时用hbm2ddl来生成数据库schema。通常只有在不断重复进行单元"
#~ "测试的时候才需要打开它，但再次运行hbm2ddl会把你保存的一切都删掉"
#~ "（<emphasis>drop</emphasis>）——<literal>create</literal>配置的真实含义"
#~ "是：“在创建SessionFactory的时候，从schema 中drop 掉所有的表，再重新创建它"
#~ "们”。"

#~ msgid ""
#~ "If you now call Ant with <literal>-Daction=list</literal>, you should see "
#~ "the events you have stored so far. You can of course also call the "
#~ "<literal>store</literal> action a few times more."
#~ msgstr ""
#~ "如果你现在使用命令行参数<literal>-Daction=list</literal>运行Ant，你会看到"
#~ "那些至今为止我们所储存的events。当然，你也可以多调用几次<literal>store</"
#~ "literal>以保存更多的envents。"

#~ msgid ""
#~ "Note: Most new Hibernate users fail at this point and we see questions "
#~ "about <emphasis>Table not found</emphasis> error messages regularly. "
#~ "However, if you follow the steps outlined above you will not have this "
#~ "problem, as hbm2ddl creates the database schema on the first run, and "
#~ "subsequent application restarts will use this schema. If you change the "
#~ "mapping and/or database schema, you have to re-enable hbm2ddl once again."
#~ msgstr ""
#~ "注意，很多Hibernate新手在这一步会失败，我们不时看到关于<emphasis>Table "
#~ "not found</emphasis>错误信息的提问。但是，只要你根据上面描述的步骤来执行，"
#~ "就不会有这个问题，因为hbm2ddl会在第一次运行的时候创建数据库schema，后继的"
#~ "应用程序重起后还能继续使用这个schema。假若你修改了映射，或者修改了数据库"
#~ "schema，你必须把hbm2ddl重新打开一次。"

#~ msgid ""
#~ "Create a new mapping file called <literal>Person.hbm.xml</literal> (don't "
#~ "forget the DTD reference at the top):"
#~ msgstr ""
#~ "创建一个名为<literal>Person.hbm.xml</literal>的新映射文件（别忘了最上面的"
#~ "DTD引用）："

#~ msgid ""
#~ "We need a unidirectional, many-valued associations, implemented with a "
#~ "<literal>Set</literal>. Let's write the code for this in the Java classes "
#~ "and then map it:"
#~ msgstr ""
#~ "我们需要用set 实现一个单向多值关联。让我们在Java类里为这个关联编码，接着映"
#~ "射它："

#~ msgid ""
#~ "We add a collection of value typed objects to the <literal>Person</"
#~ "literal> entity. We want to store email addresses, so the type we use is "
#~ "<literal>String</literal>, and the collection is again a <literal>Set</"
#~ "literal>:"
#~ msgstr ""
#~ "我们把一个值类型对象的集合加入<literal>Person</literal>实体中。我们希望保"
#~ "存email地址，所以使用<literal>String</literal>类型，而且这次的集合类型又是"
#~ "<literal>Set</literal>："

#~ msgid "Let's turn this into a small web application."
#~ msgstr "让我们把进入一个小型的web应用程序。"

#~ msgid ""
#~ "Create a new class in your source directory, in the <literal>events</"
#~ "literal> package:"
#~ msgstr "在你的源代码目录的<literal>events</literal>包中创建一个新的类："

#~ msgid ""
#~ "To deploy this application you have to create a web archive, a WAR. Add "
#~ "the following Ant target to your <literal>build.xml</literal>:"
#~ msgstr ""
#~ "要发布这个程序，你得把它打成web发布包：WAR文件。把下面的脚本加入到你的"
#~ "<literal>build.xml</literal>中："

#~ msgid ""
#~ "This target creates a file called <literal>hibernate-tutorial.war</"
#~ "literal> in your project directory. It packages all libraries and the "
#~ "<literal>web.xml</literal> descriptor, which is expected in the base "
#~ "directory of your project:"
#~ msgstr ""
#~ "这段代码在你的开发目录中创建一个<literal>hibernate-tutorial.war</literal>"
#~ "的文件。它把所有的类库和<literal>web.xml</literal>描述文件都打包进去，web."
#~ "xml 文件应该位于你的开发根目录中："

#~ msgid ""
#~ "Before you compile and deploy the web application, note that an "
#~ "additional library is required: <literal>jsdk.jar</literal>. This is the "
#~ "Java servlet development kit, if you don't have this library already, get "
#~ "it from the Sun website and copy it to your library directory. However, "
#~ "it will be only used for compliation and excluded from the WAR package."
#~ msgstr ""
#~ "请注意在你编译和部署web应用程之前，需要一个附加的类库：<literal>jsdk.jar</"
#~ "literal>。这是Java Servlet开发包，假若你还没有，可以从Sun网站上下载，把它"
#~ "copy到你的lib目录。但是，它仅仅是在编译时需要，不会被打入WAR包。"

#~ msgid ""
#~ "If you already feel confident with Hibernate, continue browsing through "
#~ "the reference documentation table of contents for topics you find "
#~ "interesting - most asked are transactional processing (<xref linkend="
#~ "\"transactions\"/>), fetch performance (<xref linkend=\"performance\"/>), "
#~ "or the usage of the API (<xref linkend=\"objectstate\"/>) and the query "
#~ "features (<xref linkend=\"objectstate-querying\"/>)."
#~ msgstr ""
#~ "如果你已经对Hibernate感到自信，通过开发指南目录，继续浏览你感兴趣的内容－"
#~ "那些会被问到的问题大多是事务处理 (<xref linkend=\"transactions\"/>)，抓取"
#~ "（fetch）的效率 (<xref linkend=\"performance\"/>)，或者API的使用 (<xref "
#~ "linkend=\"objectstate\"/>)和查询的特性(<xref linkend=\"objectstate-"
#~ "querying\"/>)。"

#~ msgid ""
#~ "Don't forget to check the Hibernate website for more (specialized) "
#~ "tutorials."
#~ msgstr "别忘了去Hibernate的网站查看更多（有针对性的）示例。"
