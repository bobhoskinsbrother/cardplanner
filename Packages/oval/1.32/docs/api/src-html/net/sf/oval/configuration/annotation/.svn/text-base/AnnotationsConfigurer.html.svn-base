<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /*******************************************************************************<a name="line.1"></a>
<FONT color="green">002</FONT>     * Portions created by Sebastian Thomschke are copyright (c) 2005-2009 Sebastian<a name="line.2"></a>
<FONT color="green">003</FONT>     * Thomschke.<a name="line.3"></a>
<FONT color="green">004</FONT>     * <a name="line.4"></a>
<FONT color="green">005</FONT>     * All Rights Reserved. This program and the accompanying materials<a name="line.5"></a>
<FONT color="green">006</FONT>     * are made available under the terms of the Eclipse Public License v1.0<a name="line.6"></a>
<FONT color="green">007</FONT>     * which accompanies this distribution, and is available at<a name="line.7"></a>
<FONT color="green">008</FONT>     * http://www.eclipse.org/legal/epl-v10.html<a name="line.8"></a>
<FONT color="green">009</FONT>     * <a name="line.9"></a>
<FONT color="green">010</FONT>     * Contributors:<a name="line.10"></a>
<FONT color="green">011</FONT>     *     Sebastian Thomschke - initial implementation.<a name="line.11"></a>
<FONT color="green">012</FONT>     *******************************************************************************/<a name="line.12"></a>
<FONT color="green">013</FONT>    package net.sf.oval.configuration.annotation;<a name="line.13"></a>
<FONT color="green">014</FONT>    <a name="line.14"></a>
<FONT color="green">015</FONT>    import static net.sf.oval.Validator.getCollectionFactory;<a name="line.15"></a>
<FONT color="green">016</FONT>    <a name="line.16"></a>
<FONT color="green">017</FONT>    import java.lang.annotation.Annotation;<a name="line.17"></a>
<FONT color="green">018</FONT>    import java.lang.reflect.Constructor;<a name="line.18"></a>
<FONT color="green">019</FONT>    import java.lang.reflect.Field;<a name="line.19"></a>
<FONT color="green">020</FONT>    import java.lang.reflect.Method;<a name="line.20"></a>
<FONT color="green">021</FONT>    import java.util.List;<a name="line.21"></a>
<FONT color="green">022</FONT>    <a name="line.22"></a>
<FONT color="green">023</FONT>    import net.sf.oval.Check;<a name="line.23"></a>
<FONT color="green">024</FONT>    import net.sf.oval.CheckExclusion;<a name="line.24"></a>
<FONT color="green">025</FONT>    import net.sf.oval.configuration.Configurer;<a name="line.25"></a>
<FONT color="green">026</FONT>    import net.sf.oval.configuration.pojo.elements.ClassConfiguration;<a name="line.26"></a>
<FONT color="green">027</FONT>    import net.sf.oval.configuration.pojo.elements.ConstraintSetConfiguration;<a name="line.27"></a>
<FONT color="green">028</FONT>    import net.sf.oval.configuration.pojo.elements.ConstructorConfiguration;<a name="line.28"></a>
<FONT color="green">029</FONT>    import net.sf.oval.configuration.pojo.elements.FieldConfiguration;<a name="line.29"></a>
<FONT color="green">030</FONT>    import net.sf.oval.configuration.pojo.elements.MethodConfiguration;<a name="line.30"></a>
<FONT color="green">031</FONT>    import net.sf.oval.configuration.pojo.elements.MethodPostExecutionConfiguration;<a name="line.31"></a>
<FONT color="green">032</FONT>    import net.sf.oval.configuration.pojo.elements.MethodPreExecutionConfiguration;<a name="line.32"></a>
<FONT color="green">033</FONT>    import net.sf.oval.configuration.pojo.elements.MethodReturnValueConfiguration;<a name="line.33"></a>
<FONT color="green">034</FONT>    import net.sf.oval.configuration.pojo.elements.ObjectConfiguration;<a name="line.34"></a>
<FONT color="green">035</FONT>    import net.sf.oval.configuration.pojo.elements.ParameterConfiguration;<a name="line.35"></a>
<FONT color="green">036</FONT>    import net.sf.oval.exception.ReflectionException;<a name="line.36"></a>
<FONT color="green">037</FONT>    import net.sf.oval.guard.Guarded;<a name="line.37"></a>
<FONT color="green">038</FONT>    import net.sf.oval.guard.Post;<a name="line.38"></a>
<FONT color="green">039</FONT>    import net.sf.oval.guard.PostCheck;<a name="line.39"></a>
<FONT color="green">040</FONT>    import net.sf.oval.guard.PostValidateThis;<a name="line.40"></a>
<FONT color="green">041</FONT>    import net.sf.oval.guard.Pre;<a name="line.41"></a>
<FONT color="green">042</FONT>    import net.sf.oval.guard.PreCheck;<a name="line.42"></a>
<FONT color="green">043</FONT>    import net.sf.oval.guard.PreValidateThis;<a name="line.43"></a>
<FONT color="green">044</FONT>    <a name="line.44"></a>
<FONT color="green">045</FONT>    /**<a name="line.45"></a>
<FONT color="green">046</FONT>     * Configurer that configures constraints based on annotations tagged with {@link Constraint}<a name="line.46"></a>
<FONT color="green">047</FONT>     * <a name="line.47"></a>
<FONT color="green">048</FONT>     * @author Sebastian Thomschke<a name="line.48"></a>
<FONT color="green">049</FONT>     */<a name="line.49"></a>
<FONT color="green">050</FONT>    public class AnnotationsConfigurer implements Configurer<a name="line.50"></a>
<FONT color="green">051</FONT>    {<a name="line.51"></a>
<FONT color="green">052</FONT>            private List&lt;ParameterConfiguration&gt; _createParameterConfiguration(final Annotation[][] paramAnnotations,<a name="line.52"></a>
<FONT color="green">053</FONT>                            final Class&lt; ? &gt;[] parameterTypes)<a name="line.53"></a>
<FONT color="green">054</FONT>            {<a name="line.54"></a>
<FONT color="green">055</FONT>                    final List&lt;ParameterConfiguration&gt; paramCfg = getCollectionFactory().createList(2);<a name="line.55"></a>
<FONT color="green">056</FONT>    <a name="line.56"></a>
<FONT color="green">057</FONT>                    // loop over all parameters of the current constructor<a name="line.57"></a>
<FONT color="green">058</FONT>                    for (int i = 0; i &lt; paramAnnotations.length; i++)<a name="line.58"></a>
<FONT color="green">059</FONT>                    {<a name="line.59"></a>
<FONT color="green">060</FONT>                            final List&lt;Check&gt; paramChecks = getCollectionFactory().createList(2);<a name="line.60"></a>
<FONT color="green">061</FONT>                            final List&lt;CheckExclusion&gt; paramCheckExclusions = getCollectionFactory().createList(2);<a name="line.61"></a>
<FONT color="green">062</FONT>    <a name="line.62"></a>
<FONT color="green">063</FONT>                            // loop over all annotations of the current constructor parameter<a name="line.63"></a>
<FONT color="green">064</FONT>                            for (final Annotation annotation : paramAnnotations[i])<a name="line.64"></a>
<FONT color="green">065</FONT>                            {<a name="line.65"></a>
<FONT color="green">066</FONT>                                    // check if the current annotation is a constraint annotation<a name="line.66"></a>
<FONT color="green">067</FONT>                                    if (annotation.annotationType().isAnnotationPresent(Constraint.class))<a name="line.67"></a>
<FONT color="green">068</FONT>                                    {<a name="line.68"></a>
<FONT color="green">069</FONT>                                            paramChecks.add(initializeCheck(annotation));<a name="line.69"></a>
<FONT color="green">070</FONT>                                    }<a name="line.70"></a>
<FONT color="green">071</FONT>                                    else if (annotation.annotationType().isAnnotationPresent(Constraints.class))<a name="line.71"></a>
<FONT color="green">072</FONT>                                    {<a name="line.72"></a>
<FONT color="green">073</FONT>                                            initializeChecks(annotation, paramChecks);<a name="line.73"></a>
<FONT color="green">074</FONT>                                    }<a name="line.74"></a>
<FONT color="green">075</FONT>    <a name="line.75"></a>
<FONT color="green">076</FONT>                                    // check if the current annotation is a exclusion annotation<a name="line.76"></a>
<FONT color="green">077</FONT>                                    else if (annotation.annotationType().isAnnotationPresent(Exclusion.class))<a name="line.77"></a>
<FONT color="green">078</FONT>                                    {<a name="line.78"></a>
<FONT color="green">079</FONT>                                            paramCheckExclusions.add(initializeExclusion(annotation));<a name="line.79"></a>
<FONT color="green">080</FONT>                                    }<a name="line.80"></a>
<FONT color="green">081</FONT>                            }<a name="line.81"></a>
<FONT color="green">082</FONT>    <a name="line.82"></a>
<FONT color="green">083</FONT>                            final ParameterConfiguration pc = new ParameterConfiguration();<a name="line.83"></a>
<FONT color="green">084</FONT>                            paramCfg.add(pc);<a name="line.84"></a>
<FONT color="green">085</FONT>                            pc.type = parameterTypes[i];<a name="line.85"></a>
<FONT color="green">086</FONT>                            pc.checks = paramChecks.size() == 0 ? null : paramChecks;<a name="line.86"></a>
<FONT color="green">087</FONT>                            pc.checkExclusions = paramCheckExclusions.size() == 0 ? null : paramCheckExclusions;<a name="line.87"></a>
<FONT color="green">088</FONT>                    }<a name="line.88"></a>
<FONT color="green">089</FONT>                    return paramCfg;<a name="line.89"></a>
<FONT color="green">090</FONT>            }<a name="line.90"></a>
<FONT color="green">091</FONT>    <a name="line.91"></a>
<FONT color="green">092</FONT>            protected void configureConstructorParameterChecks(final ClassConfiguration classCfg)<a name="line.92"></a>
<FONT color="green">093</FONT>            {<a name="line.93"></a>
<FONT color="green">094</FONT>                    for (final Constructor&lt; ? &gt; ctor : classCfg.type.getDeclaredConstructors())<a name="line.94"></a>
<FONT color="green">095</FONT>                    {<a name="line.95"></a>
<FONT color="green">096</FONT>                            final List&lt;ParameterConfiguration&gt; paramCfg = _createParameterConfiguration(ctor.getParameterAnnotations(),<a name="line.96"></a>
<FONT color="green">097</FONT>                                            ctor.getParameterTypes());<a name="line.97"></a>
<FONT color="green">098</FONT>    <a name="line.98"></a>
<FONT color="green">099</FONT>                            final boolean postValidateThis = ctor.isAnnotationPresent(PostValidateThis.class);<a name="line.99"></a>
<FONT color="green">100</FONT>    <a name="line.100"></a>
<FONT color="green">101</FONT>                            if (paramCfg.size() &gt; 0 | postValidateThis)<a name="line.101"></a>
<FONT color="green">102</FONT>                            {<a name="line.102"></a>
<FONT color="green">103</FONT>                                    if (classCfg.constructorConfigurations == null)<a name="line.103"></a>
<FONT color="green">104</FONT>                                    {<a name="line.104"></a>
<FONT color="green">105</FONT>                                            classCfg.constructorConfigurations = getCollectionFactory().createSet(2);<a name="line.105"></a>
<FONT color="green">106</FONT>                                    }<a name="line.106"></a>
<FONT color="green">107</FONT>    <a name="line.107"></a>
<FONT color="green">108</FONT>                                    final ConstructorConfiguration cc = new ConstructorConfiguration();<a name="line.108"></a>
<FONT color="green">109</FONT>                                    cc.parameterConfigurations = paramCfg;<a name="line.109"></a>
<FONT color="green">110</FONT>                                    cc.postCheckInvariants = postValidateThis;<a name="line.110"></a>
<FONT color="green">111</FONT>                                    classCfg.constructorConfigurations.add(cc);<a name="line.111"></a>
<FONT color="green">112</FONT>                            }<a name="line.112"></a>
<FONT color="green">113</FONT>                    }<a name="line.113"></a>
<FONT color="green">114</FONT>            }<a name="line.114"></a>
<FONT color="green">115</FONT>    <a name="line.115"></a>
<FONT color="green">116</FONT>            protected void configureFieldChecks(final ClassConfiguration classCfg)<a name="line.116"></a>
<FONT color="green">117</FONT>            {<a name="line.117"></a>
<FONT color="green">118</FONT>                    for (final Field field : classCfg.type.getDeclaredFields())<a name="line.118"></a>
<FONT color="green">119</FONT>                    {<a name="line.119"></a>
<FONT color="green">120</FONT>                            final List&lt;Check&gt; checks = getCollectionFactory().createList(2);<a name="line.120"></a>
<FONT color="green">121</FONT>    <a name="line.121"></a>
<FONT color="green">122</FONT>                            // loop over all annotations of the current field<a name="line.122"></a>
<FONT color="green">123</FONT>                            for (final Annotation annotation : field.getAnnotations())<a name="line.123"></a>
<FONT color="green">124</FONT>                            {<a name="line.124"></a>
<FONT color="green">125</FONT>                                    // check if the current annotation is a constraint annotation<a name="line.125"></a>
<FONT color="green">126</FONT>                                    if (annotation.annotationType().isAnnotationPresent(Constraint.class))<a name="line.126"></a>
<FONT color="green">127</FONT>                                    {<a name="line.127"></a>
<FONT color="green">128</FONT>                                            checks.add(initializeCheck(annotation));<a name="line.128"></a>
<FONT color="green">129</FONT>                                    }<a name="line.129"></a>
<FONT color="green">130</FONT>                                    else if (annotation.annotationType().isAnnotationPresent(Constraints.class))<a name="line.130"></a>
<FONT color="green">131</FONT>                                    {<a name="line.131"></a>
<FONT color="green">132</FONT>                                            initializeChecks(annotation, checks);<a name="line.132"></a>
<FONT color="green">133</FONT>                                    }<a name="line.133"></a>
<FONT color="green">134</FONT>                            }<a name="line.134"></a>
<FONT color="green">135</FONT>                            if (checks.size() &gt; 0)<a name="line.135"></a>
<FONT color="green">136</FONT>                            {<a name="line.136"></a>
<FONT color="green">137</FONT>                                    if (classCfg.fieldConfigurations == null)<a name="line.137"></a>
<FONT color="green">138</FONT>                                    {<a name="line.138"></a>
<FONT color="green">139</FONT>                                            classCfg.fieldConfigurations = getCollectionFactory().createSet(2);<a name="line.139"></a>
<FONT color="green">140</FONT>                                    }<a name="line.140"></a>
<FONT color="green">141</FONT>    <a name="line.141"></a>
<FONT color="green">142</FONT>                                    final FieldConfiguration fc = new FieldConfiguration();<a name="line.142"></a>
<FONT color="green">143</FONT>                                    fc.name = field.getName();<a name="line.143"></a>
<FONT color="green">144</FONT>                                    fc.checks = checks;<a name="line.144"></a>
<FONT color="green">145</FONT>                                    classCfg.fieldConfigurations.add(fc);<a name="line.145"></a>
<FONT color="green">146</FONT>                            }<a name="line.146"></a>
<FONT color="green">147</FONT>                    }<a name="line.147"></a>
<FONT color="green">148</FONT>            }<a name="line.148"></a>
<FONT color="green">149</FONT>    <a name="line.149"></a>
<FONT color="green">150</FONT>            /**<a name="line.150"></a>
<FONT color="green">151</FONT>             * configure method return value and parameter checks<a name="line.151"></a>
<FONT color="green">152</FONT>             */<a name="line.152"></a>
<FONT color="green">153</FONT>            protected void configureMethodChecks(final ClassConfiguration classCfg)<a name="line.153"></a>
<FONT color="green">154</FONT>            {<a name="line.154"></a>
<FONT color="green">155</FONT>                    for (final Method method : classCfg.type.getDeclaredMethods())<a name="line.155"></a>
<FONT color="green">156</FONT>                    {<a name="line.156"></a>
<FONT color="green">157</FONT>                            /*<a name="line.157"></a>
<FONT color="green">158</FONT>                             * determine method return value checks and method pre/post<a name="line.158"></a>
<FONT color="green">159</FONT>                             * conditions<a name="line.159"></a>
<FONT color="green">160</FONT>                             */<a name="line.160"></a>
<FONT color="green">161</FONT>                            final List&lt;Check&gt; returnValueChecks = getCollectionFactory().createList(2);<a name="line.161"></a>
<FONT color="green">162</FONT>                            final List&lt;PreCheck&gt; preChecks = getCollectionFactory().createList(2);<a name="line.162"></a>
<FONT color="green">163</FONT>                            final List&lt;PostCheck&gt; postChecks = getCollectionFactory().createList(2);<a name="line.163"></a>
<FONT color="green">164</FONT>                            boolean preValidateThis = false;<a name="line.164"></a>
<FONT color="green">165</FONT>                            boolean postValidateThis = false;<a name="line.165"></a>
<FONT color="green">166</FONT>    <a name="line.166"></a>
<FONT color="green">167</FONT>                            // loop over all annotations<a name="line.167"></a>
<FONT color="green">168</FONT>                            for (final Annotation annotation : method.getAnnotations())<a name="line.168"></a>
<FONT color="green">169</FONT>                            {<a name="line.169"></a>
<FONT color="green">170</FONT>                                    if (annotation instanceof Pre)<a name="line.170"></a>
<FONT color="green">171</FONT>                                    {<a name="line.171"></a>
<FONT color="green">172</FONT>                                            final PreCheck pc = new PreCheck();<a name="line.172"></a>
<FONT color="green">173</FONT>                                            pc.configure((Pre) annotation);<a name="line.173"></a>
<FONT color="green">174</FONT>                                            preChecks.add(pc);<a name="line.174"></a>
<FONT color="green">175</FONT>                                    }<a name="line.175"></a>
<FONT color="green">176</FONT>                                    else if (annotation instanceof PreValidateThis)<a name="line.176"></a>
<FONT color="green">177</FONT>                                    {<a name="line.177"></a>
<FONT color="green">178</FONT>                                            preValidateThis = true;<a name="line.178"></a>
<FONT color="green">179</FONT>                                    }<a name="line.179"></a>
<FONT color="green">180</FONT>                                    else if (annotation instanceof Post)<a name="line.180"></a>
<FONT color="green">181</FONT>                                    {<a name="line.181"></a>
<FONT color="green">182</FONT>                                            final PostCheck pc = new PostCheck();<a name="line.182"></a>
<FONT color="green">183</FONT>                                            pc.configure((Post) annotation);<a name="line.183"></a>
<FONT color="green">184</FONT>                                            postChecks.add(pc);<a name="line.184"></a>
<FONT color="green">185</FONT>                                    }<a name="line.185"></a>
<FONT color="green">186</FONT>                                    else if (annotation instanceof PostValidateThis)<a name="line.186"></a>
<FONT color="green">187</FONT>                                    {<a name="line.187"></a>
<FONT color="green">188</FONT>                                            postValidateThis = true;<a name="line.188"></a>
<FONT color="green">189</FONT>                                    }<a name="line.189"></a>
<FONT color="green">190</FONT>    <a name="line.190"></a>
<FONT color="green">191</FONT>                                    // check if the current annotation is a constraint annotation<a name="line.191"></a>
<FONT color="green">192</FONT>                                    else if (annotation.annotationType().isAnnotationPresent(Constraint.class))<a name="line.192"></a>
<FONT color="green">193</FONT>                                    {<a name="line.193"></a>
<FONT color="green">194</FONT>                                            returnValueChecks.add(initializeCheck(annotation));<a name="line.194"></a>
<FONT color="green">195</FONT>                                    }<a name="line.195"></a>
<FONT color="green">196</FONT>                                    else if (annotation.annotationType().isAnnotationPresent(Constraints.class))<a name="line.196"></a>
<FONT color="green">197</FONT>                                    {<a name="line.197"></a>
<FONT color="green">198</FONT>                                            initializeChecks(annotation, returnValueChecks);<a name="line.198"></a>
<FONT color="green">199</FONT>                                    }<a name="line.199"></a>
<FONT color="green">200</FONT>                            }<a name="line.200"></a>
<FONT color="green">201</FONT>    <a name="line.201"></a>
<FONT color="green">202</FONT>                            /*<a name="line.202"></a>
<FONT color="green">203</FONT>                             * determine parameter checks<a name="line.203"></a>
<FONT color="green">204</FONT>                             */<a name="line.204"></a>
<FONT color="green">205</FONT>                            final List&lt;ParameterConfiguration&gt; paramCfg = _createParameterConfiguration(method<a name="line.205"></a>
<FONT color="green">206</FONT>                                            .getParameterAnnotations(), method.getParameterTypes());<a name="line.206"></a>
<FONT color="green">207</FONT>    <a name="line.207"></a>
<FONT color="green">208</FONT>                            // check if anything has been configured for this method at all<a name="line.208"></a>
<FONT color="green">209</FONT>                            if (paramCfg.size() &gt; 0 || returnValueChecks.size() &gt; 0 || preChecks.size() &gt; 0 || postChecks.size() &gt; 0<a name="line.209"></a>
<FONT color="green">210</FONT>                                            || preValidateThis || postValidateThis)<a name="line.210"></a>
<FONT color="green">211</FONT>                            {<a name="line.211"></a>
<FONT color="green">212</FONT>                                    if (classCfg.methodConfigurations == null)<a name="line.212"></a>
<FONT color="green">213</FONT>                                    {<a name="line.213"></a>
<FONT color="green">214</FONT>                                            classCfg.methodConfigurations = getCollectionFactory().createSet(2);<a name="line.214"></a>
<FONT color="green">215</FONT>                                    }<a name="line.215"></a>
<FONT color="green">216</FONT>    <a name="line.216"></a>
<FONT color="green">217</FONT>                                    final MethodConfiguration mc = new MethodConfiguration();<a name="line.217"></a>
<FONT color="green">218</FONT>                                    mc.name = method.getName();<a name="line.218"></a>
<FONT color="green">219</FONT>                                    mc.parameterConfigurations = paramCfg;<a name="line.219"></a>
<FONT color="green">220</FONT>                                    mc.isInvariant = method.isAnnotationPresent(IsInvariant.class);<a name="line.220"></a>
<FONT color="green">221</FONT>                                    mc.preCheckInvariants = preValidateThis;<a name="line.221"></a>
<FONT color="green">222</FONT>                                    mc.postCheckInvariants = postValidateThis;<a name="line.222"></a>
<FONT color="green">223</FONT>                                    if (returnValueChecks.size() &gt; 0)<a name="line.223"></a>
<FONT color="green">224</FONT>                                    {<a name="line.224"></a>
<FONT color="green">225</FONT>                                            mc.returnValueConfiguration = new MethodReturnValueConfiguration();<a name="line.225"></a>
<FONT color="green">226</FONT>                                            mc.returnValueConfiguration.checks = returnValueChecks;<a name="line.226"></a>
<FONT color="green">227</FONT>                                    }<a name="line.227"></a>
<FONT color="green">228</FONT>                                    if (preChecks.size() &gt; 0)<a name="line.228"></a>
<FONT color="green">229</FONT>                                    {<a name="line.229"></a>
<FONT color="green">230</FONT>                                            mc.preExecutionConfiguration = new MethodPreExecutionConfiguration();<a name="line.230"></a>
<FONT color="green">231</FONT>                                            mc.preExecutionConfiguration.checks = preChecks;<a name="line.231"></a>
<FONT color="green">232</FONT>                                    }<a name="line.232"></a>
<FONT color="green">233</FONT>                                    if (postChecks.size() &gt; 0)<a name="line.233"></a>
<FONT color="green">234</FONT>                                    {<a name="line.234"></a>
<FONT color="green">235</FONT>                                            mc.postExecutionConfiguration = new MethodPostExecutionConfiguration();<a name="line.235"></a>
<FONT color="green">236</FONT>                                            mc.postExecutionConfiguration.checks = postChecks;<a name="line.236"></a>
<FONT color="green">237</FONT>                                    }<a name="line.237"></a>
<FONT color="green">238</FONT>                                    classCfg.methodConfigurations.add(mc);<a name="line.238"></a>
<FONT color="green">239</FONT>                            }<a name="line.239"></a>
<FONT color="green">240</FONT>                    }<a name="line.240"></a>
<FONT color="green">241</FONT>            }<a name="line.241"></a>
<FONT color="green">242</FONT>    <a name="line.242"></a>
<FONT color="green">243</FONT>            protected void configureObjectLevelChecks(final ClassConfiguration classCfg)<a name="line.243"></a>
<FONT color="green">244</FONT>            {<a name="line.244"></a>
<FONT color="green">245</FONT>                    final List&lt;Check&gt; checks = getCollectionFactory().createList(2);<a name="line.245"></a>
<FONT color="green">246</FONT>                    for (final Annotation annotation : classCfg.type.getAnnotations())<a name="line.246"></a>
<FONT color="green">247</FONT>                    {<a name="line.247"></a>
<FONT color="green">248</FONT>                            // check if the current annotation is a constraint annotation<a name="line.248"></a>
<FONT color="green">249</FONT>                            if (annotation.annotationType().isAnnotationPresent(Constraint.class))<a name="line.249"></a>
<FONT color="green">250</FONT>                            {<a name="line.250"></a>
<FONT color="green">251</FONT>                                    checks.add(initializeCheck(annotation));<a name="line.251"></a>
<FONT color="green">252</FONT>                            }<a name="line.252"></a>
<FONT color="green">253</FONT>                            else if (annotation.annotationType().isAnnotationPresent(Constraints.class))<a name="line.253"></a>
<FONT color="green">254</FONT>                            {<a name="line.254"></a>
<FONT color="green">255</FONT>                                    initializeChecks(annotation, checks);<a name="line.255"></a>
<FONT color="green">256</FONT>                            }<a name="line.256"></a>
<FONT color="green">257</FONT>                    }<a name="line.257"></a>
<FONT color="green">258</FONT>                    if (checks.size() &gt; 0)<a name="line.258"></a>
<FONT color="green">259</FONT>                    {<a name="line.259"></a>
<FONT color="green">260</FONT>                            classCfg.objectConfiguration = new ObjectConfiguration();<a name="line.260"></a>
<FONT color="green">261</FONT>                            classCfg.objectConfiguration.checks = checks;<a name="line.261"></a>
<FONT color="green">262</FONT>                    }<a name="line.262"></a>
<FONT color="green">263</FONT>            }<a name="line.263"></a>
<FONT color="green">264</FONT>    <a name="line.264"></a>
<FONT color="green">265</FONT>            /**<a name="line.265"></a>
<FONT color="green">266</FONT>             * {@inheritDoc}<a name="line.266"></a>
<FONT color="green">267</FONT>             */<a name="line.267"></a>
<FONT color="green">268</FONT>            public ClassConfiguration getClassConfiguration(final Class&lt; ? &gt; clazz)<a name="line.268"></a>
<FONT color="green">269</FONT>            {<a name="line.269"></a>
<FONT color="green">270</FONT>                    final ClassConfiguration classCfg = new ClassConfiguration();<a name="line.270"></a>
<FONT color="green">271</FONT>                    classCfg.type = clazz;<a name="line.271"></a>
<FONT color="green">272</FONT>    <a name="line.272"></a>
<FONT color="green">273</FONT>                    final Guarded guarded = clazz.getAnnotation(Guarded.class);<a name="line.273"></a>
<FONT color="green">274</FONT>    <a name="line.274"></a>
<FONT color="green">275</FONT>                    classCfg.applyFieldConstraintsToConstructors = guarded != null &amp;&amp; guarded.applyFieldConstraintsToConstructors();<a name="line.275"></a>
<FONT color="green">276</FONT>                    classCfg.applyFieldConstraintsToSetters = guarded != null &amp;&amp; guarded.applyFieldConstraintsToSetters();<a name="line.276"></a>
<FONT color="green">277</FONT>                    classCfg.assertParametersNotNull = guarded != null &amp;&amp; guarded.assertParametersNotNull();<a name="line.277"></a>
<FONT color="green">278</FONT>                    classCfg.checkInvariants = guarded != null &amp;&amp; guarded.checkInvariants();<a name="line.278"></a>
<FONT color="green">279</FONT>    <a name="line.279"></a>
<FONT color="green">280</FONT>                    configureObjectLevelChecks(classCfg);<a name="line.280"></a>
<FONT color="green">281</FONT>                    configureFieldChecks(classCfg);<a name="line.281"></a>
<FONT color="green">282</FONT>                    configureConstructorParameterChecks(classCfg);<a name="line.282"></a>
<FONT color="green">283</FONT>                    configureMethodChecks(classCfg);<a name="line.283"></a>
<FONT color="green">284</FONT>    <a name="line.284"></a>
<FONT color="green">285</FONT>                    return classCfg;<a name="line.285"></a>
<FONT color="green">286</FONT>            }<a name="line.286"></a>
<FONT color="green">287</FONT>    <a name="line.287"></a>
<FONT color="green">288</FONT>            /**<a name="line.288"></a>
<FONT color="green">289</FONT>             * {@inheritDoc}<a name="line.289"></a>
<FONT color="green">290</FONT>             */<a name="line.290"></a>
<FONT color="green">291</FONT>            public ConstraintSetConfiguration getConstraintSetConfiguration(final String constraintSetId)<a name="line.291"></a>
<FONT color="green">292</FONT>            {<a name="line.292"></a>
<FONT color="green">293</FONT>                    return null;<a name="line.293"></a>
<FONT color="green">294</FONT>            }<a name="line.294"></a>
<FONT color="green">295</FONT>    <a name="line.295"></a>
<FONT color="green">296</FONT>            protected &lt;ConstraintsAnnotation extends Annotation&gt; void initializeChecks(<a name="line.296"></a>
<FONT color="green">297</FONT>                            final ConstraintsAnnotation constraintsAnnotation, final List&lt;Check&gt; checks) throws ReflectionException<a name="line.297"></a>
<FONT color="green">298</FONT>            {<a name="line.298"></a>
<FONT color="green">299</FONT>                    try<a name="line.299"></a>
<FONT color="green">300</FONT>                    {<a name="line.300"></a>
<FONT color="green">301</FONT>                            final Method getValue = constraintsAnnotation.annotationType().getDeclaredMethod("value",<a name="line.301"></a>
<FONT color="green">302</FONT>                                            (Class&lt; ? &gt;[]) null);<a name="line.302"></a>
<FONT color="green">303</FONT>                            final Object[] constraintAnnotations = (Object[]) getValue.invoke(constraintsAnnotation, (Object[]) null);<a name="line.303"></a>
<FONT color="green">304</FONT>                            for (final Object ca : constraintAnnotations)<a name="line.304"></a>
<FONT color="green">305</FONT>                            {<a name="line.305"></a>
<FONT color="green">306</FONT>                                    checks.add(initializeCheck((Annotation) ca));<a name="line.306"></a>
<FONT color="green">307</FONT>                            }<a name="line.307"></a>
<FONT color="green">308</FONT>                    }<a name="line.308"></a>
<FONT color="green">309</FONT>                    catch (final ReflectionException ex)<a name="line.309"></a>
<FONT color="green">310</FONT>                    {<a name="line.310"></a>
<FONT color="green">311</FONT>                            throw ex;<a name="line.311"></a>
<FONT color="green">312</FONT>                    }<a name="line.312"></a>
<FONT color="green">313</FONT>                    catch (final Exception e)<a name="line.313"></a>
<FONT color="green">314</FONT>                    {<a name="line.314"></a>
<FONT color="green">315</FONT>                            throw new ReflectionException("Cannot initialize constraint check "<a name="line.315"></a>
<FONT color="green">316</FONT>                                            + constraintsAnnotation.annotationType().getName(), e);<a name="line.316"></a>
<FONT color="green">317</FONT>                    }<a name="line.317"></a>
<FONT color="green">318</FONT>            }<a name="line.318"></a>
<FONT color="green">319</FONT>    <a name="line.319"></a>
<FONT color="green">320</FONT>            protected &lt;ConstraintAnnotation extends Annotation&gt; AnnotationCheck&lt;ConstraintAnnotation&gt; initializeCheck(<a name="line.320"></a>
<FONT color="green">321</FONT>                            final ConstraintAnnotation constraintAnnotation) throws ReflectionException<a name="line.321"></a>
<FONT color="green">322</FONT>            {<a name="line.322"></a>
<FONT color="green">323</FONT>                    assert constraintAnnotation != null;<a name="line.323"></a>
<FONT color="green">324</FONT>    <a name="line.324"></a>
<FONT color="green">325</FONT>                    final Constraint constraint = constraintAnnotation.annotationType().getAnnotation(Constraint.class);<a name="line.325"></a>
<FONT color="green">326</FONT>    <a name="line.326"></a>
<FONT color="green">327</FONT>                    // determine the check class<a name="line.327"></a>
<FONT color="green">328</FONT>                    final Class&lt; ? &gt; checkClass = constraint.checkWith();<a name="line.328"></a>
<FONT color="green">329</FONT>    <a name="line.329"></a>
<FONT color="green">330</FONT>                    try<a name="line.330"></a>
<FONT color="green">331</FONT>                    {<a name="line.331"></a>
<FONT color="green">332</FONT>                            // instantiate the appropriate check for the found constraint<a name="line.332"></a>
<FONT color="green">333</FONT>                            @SuppressWarnings("unchecked")<a name="line.333"></a>
<FONT color="green">334</FONT>                            final AnnotationCheck&lt;ConstraintAnnotation&gt; check = (AnnotationCheck&lt;ConstraintAnnotation&gt;) checkClass<a name="line.334"></a>
<FONT color="green">335</FONT>                                            .newInstance();<a name="line.335"></a>
<FONT color="green">336</FONT>                            check.configure(constraintAnnotation);<a name="line.336"></a>
<FONT color="green">337</FONT>                            return check;<a name="line.337"></a>
<FONT color="green">338</FONT>                    }<a name="line.338"></a>
<FONT color="green">339</FONT>                    catch (final Exception e)<a name="line.339"></a>
<FONT color="green">340</FONT>                    {<a name="line.340"></a>
<FONT color="green">341</FONT>                            throw new ReflectionException("Cannot initialize constraint check " + checkClass.getName(), e);<a name="line.341"></a>
<FONT color="green">342</FONT>                    }<a name="line.342"></a>
<FONT color="green">343</FONT>            }<a name="line.343"></a>
<FONT color="green">344</FONT>    <a name="line.344"></a>
<FONT color="green">345</FONT>            protected &lt;ExclusionAnnotation extends Annotation&gt; AnnotationCheckExclusion&lt;ExclusionAnnotation&gt; initializeExclusion(<a name="line.345"></a>
<FONT color="green">346</FONT>                            final ExclusionAnnotation exclusionAnnotation) throws ReflectionException<a name="line.346"></a>
<FONT color="green">347</FONT>            {<a name="line.347"></a>
<FONT color="green">348</FONT>                    assert exclusionAnnotation != null;<a name="line.348"></a>
<FONT color="green">349</FONT>    <a name="line.349"></a>
<FONT color="green">350</FONT>                    final Exclusion constraint = exclusionAnnotation.annotationType().getAnnotation(Exclusion.class);<a name="line.350"></a>
<FONT color="green">351</FONT>    <a name="line.351"></a>
<FONT color="green">352</FONT>                    // determine the check class<a name="line.352"></a>
<FONT color="green">353</FONT>                    final Class&lt; ? &gt; exclusionClass = constraint.excludeWith();<a name="line.353"></a>
<FONT color="green">354</FONT>    <a name="line.354"></a>
<FONT color="green">355</FONT>                    try<a name="line.355"></a>
<FONT color="green">356</FONT>                    {<a name="line.356"></a>
<FONT color="green">357</FONT>                            // instantiate the appropriate exclusion for the found annotation<a name="line.357"></a>
<FONT color="green">358</FONT>                            @SuppressWarnings("unchecked")<a name="line.358"></a>
<FONT color="green">359</FONT>                            final AnnotationCheckExclusion&lt;ExclusionAnnotation&gt; exclusion = (AnnotationCheckExclusion&lt;ExclusionAnnotation&gt;) exclusionClass<a name="line.359"></a>
<FONT color="green">360</FONT>                                            .newInstance();<a name="line.360"></a>
<FONT color="green">361</FONT>                            exclusion.configure(exclusionAnnotation);<a name="line.361"></a>
<FONT color="green">362</FONT>                            return exclusion;<a name="line.362"></a>
<FONT color="green">363</FONT>                    }<a name="line.363"></a>
<FONT color="green">364</FONT>                    catch (final Exception e)<a name="line.364"></a>
<FONT color="green">365</FONT>                    {<a name="line.365"></a>
<FONT color="green">366</FONT>                            throw new ReflectionException("Cannot initialize constraint exclusion " + exclusionClass.getName(), e);<a name="line.366"></a>
<FONT color="green">367</FONT>                    }<a name="line.367"></a>
<FONT color="green">368</FONT>            }<a name="line.368"></a>
<FONT color="green">369</FONT>    }<a name="line.369"></a>




























































</PRE>
</BODY>
</HTML>
