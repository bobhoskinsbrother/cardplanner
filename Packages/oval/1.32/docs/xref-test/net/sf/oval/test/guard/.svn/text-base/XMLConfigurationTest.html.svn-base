<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1" />
<title>XMLConfigurationTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../stylesheet.css" />
</head>
<body>
<pre>

<a name="1" href="#1">1</a>   <em class="jxr_javadoccomment">/**</em><em class="jxr_javadoccomment">*****************************************************************************</em>
<a name="2" href="#2">2</a>   <em class="jxr_javadoccomment"> * Portions created by Sebastian Thomschke are copyright (c) 2005-2008 Sebastian</em>
<a name="3" href="#3">3</a>   <em class="jxr_javadoccomment"> * Thomschke.</em>
<a name="4" href="#4">4</a>   <em class="jxr_javadoccomment"> * </em>
<a name="5" href="#5">5</a>   <em class="jxr_javadoccomment"> * All Rights Reserved. This program and the accompanying materials</em>
<a name="6" href="#6">6</a>   <em class="jxr_javadoccomment"> * are made available under the terms of the Eclipse Public License v1.0</em>
<a name="7" href="#7">7</a>   <em class="jxr_javadoccomment"> * which accompanies this distribution, and is available at</em>
<a name="8" href="#8">8</a>   <em class="jxr_javadoccomment"> * <a href="http://www.eclipse.org/legal/epl-v10.html" target="alexandria_uri">http://www.eclipse.org/legal/epl-v10.html</a></em>
<a name="9" href="#9">9</a>   <em class="jxr_javadoccomment"> * </em>
<a name="10" href="#10">10</a>  <em class="jxr_javadoccomment"> * Contributors:</em>
<a name="11" href="#11">11</a>  <em class="jxr_javadoccomment"> *     Sebastian Thomschke - initial implementation.</em>
<a name="12" href="#12">12</a>  <em class="jxr_javadoccomment"> *******************************************************************************/</em>
<a name="13" href="#13">13</a>  <strong class="jxr_keyword">package</strong> net.sf.oval.test.guard;
<a name="14" href="#14">14</a>  
<a name="15" href="#15">15</a>  <strong class="jxr_keyword">import</strong> java.util.ArrayList;
<a name="16" href="#16">16</a>  <strong class="jxr_keyword">import</strong> java.util.HashSet;
<a name="17" href="#17">17</a>  <strong class="jxr_keyword">import</strong> java.util.Set;
<a name="18" href="#18">18</a>  <strong class="jxr_keyword">import</strong> java.util.regex.Pattern;
<a name="19" href="#19">19</a>  
<a name="20" href="#20">20</a>  <strong class="jxr_keyword">import</strong> junit.framework.TestCase;
<a name="21" href="#21">21</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.Check;
<a name="22" href="#22">22</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.ConstraintViolation;
<a name="23" href="#23">23</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.configuration.pojo.elements.ClassConfiguration;
<a name="24" href="#24">24</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.configuration.pojo.elements.ConstraintSetConfiguration;
<a name="25" href="#25">25</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.configuration.pojo.elements.ConstructorConfiguration;
<a name="26" href="#26">26</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.configuration.pojo.elements.FieldConfiguration;
<a name="27" href="#27">27</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.configuration.pojo.elements.MethodConfiguration;
<a name="28" href="#28">28</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.configuration.pojo.elements.MethodReturnValueConfiguration;
<a name="29" href="#29">29</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.configuration.pojo.elements.ParameterConfiguration;
<a name="30" href="#30">30</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.configuration.xml.XMLConfigurer;
<a name="31" href="#31">31</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.constraint.AssertConstraintSetCheck;
<a name="32" href="#32">32</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.constraint.Length;
<a name="33" href="#33">33</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.constraint.LengthCheck;
<a name="34" href="#34">34</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.constraint.MatchPatternCheck;
<a name="35" href="#35">35</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.constraint.NotNullCheck;
<a name="36" href="#36">36</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.exception.ConstraintsViolatedException;
<a name="37" href="#37">37</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.exception.ValidationFailedException;
<a name="38" href="#38">38</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.guard.ConstraintsViolatedAdapter;
<a name="39" href="#39">39</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.guard.Guard;
<a name="40" href="#40">40</a>  <strong class="jxr_keyword">import</strong> net.sf.oval.guard.Guarded;
<a name="41" href="#41">41</a>  
<a name="42" href="#42">42</a>  <em class="jxr_javadoccomment">/**</em>
<a name="43" href="#43">43</a>  <em class="jxr_javadoccomment"> * @author Sebastian Thomschke</em>
<a name="44" href="#44">44</a>  <em class="jxr_javadoccomment"> */</em>
<a name="45" href="#45">45</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../net/sf/oval/test/guard/XMLConfigurationTest.html">XMLConfigurationTest</a> <strong class="jxr_keyword">extends</strong> TestCase
<a name="46" href="#46">46</a>  {
<a name="47" href="#47">47</a>  	@Guarded
<a name="48" href="#48">48</a>  	<strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../net/sf/oval/test/guard/XMLConfigurationTest.html">User</a>
<a name="49" href="#49">49</a>  	{
<a name="50" href="#50">50</a>  		<em class="jxr_comment">// added @Length to test if overwrite=true works</em>
<a name="51" href="#51">51</a>  		@Length(min = 10, max = 10)
<a name="52" href="#52">52</a>  		<strong class="jxr_keyword">protected</strong> String userId;
<a name="53" href="#53">53</a>  
<a name="54" href="#54">54</a>  		<strong class="jxr_keyword">protected</strong> String managerId;
<a name="55" href="#55">55</a>  
<a name="56" href="#56">56</a>  		<strong class="jxr_keyword">protected</strong> String firstName;
<a name="57" href="#57">57</a>  
<a name="58" href="#58">58</a>  		<strong class="jxr_keyword">protected</strong> String lastName;
<a name="59" href="#59">59</a>  
<a name="60" href="#60">60</a>  		<strong class="jxr_keyword">public</strong> <a href="../../../../../net/sf/oval/test/guard/XMLConfigurationTest.html">User</a>()
<a name="61" href="#61">61</a>  		{
<a name="62" href="#62">62</a>  		<em class="jxr_comment">// do nothing</em>
<a name="63" href="#63">63</a>  		}
<a name="64" href="#64">64</a>  
<a name="65" href="#65">65</a>  		<strong class="jxr_keyword">public</strong> <a href="../../../../../net/sf/oval/test/guard/XMLConfigurationTest.html">User</a>(<strong class="jxr_keyword">final</strong> String userId, <strong class="jxr_keyword">final</strong> String managerId, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> somethingElse)
<a name="66" href="#66">66</a>  		{
<a name="67" href="#67">67</a>  			<strong class="jxr_keyword">this</strong>.userId = userId;
<a name="68" href="#68">68</a>  			<strong class="jxr_keyword">this</strong>.managerId = managerId;
<a name="69" href="#69">69</a>  		}
<a name="70" href="#70">70</a>  
<a name="71" href="#71">71</a>  		<em class="jxr_javadoccomment">/**</em>
<a name="72" href="#72">72</a>  <em class="jxr_javadoccomment">		 * @return the managerId</em>
<a name="73" href="#73">73</a>  <em class="jxr_javadoccomment">		 */</em>
<a name="74" href="#74">74</a>  		<strong class="jxr_keyword">public</strong> String getManagerId()
<a name="75" href="#75">75</a>  		{
<a name="76" href="#76">76</a>  			<strong class="jxr_keyword">return</strong> managerId;
<a name="77" href="#77">77</a>  		}
<a name="78" href="#78">78</a>  
<a name="79" href="#79">79</a>  		<em class="jxr_javadoccomment">/**</em>
<a name="80" href="#80">80</a>  <em class="jxr_javadoccomment">		 * @param managerId the managerId to set</em>
<a name="81" href="#81">81</a>  <em class="jxr_javadoccomment">		 */</em>
<a name="82" href="#82">82</a>  		<strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> setManagerId(<strong class="jxr_keyword">final</strong> String managerId)
<a name="83" href="#83">83</a>  		{
<a name="84" href="#84">84</a>  			<strong class="jxr_keyword">this</strong>.managerId = managerId;
<a name="85" href="#85">85</a>  		}
<a name="86" href="#86">86</a>  	}
<a name="87" href="#87">87</a>  
<a name="88" href="#88">88</a>  	<strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testImportedFile()
<a name="89" href="#89">89</a>  	{
<a name="90" href="#90">90</a>  		<strong class="jxr_keyword">try</strong>
<a name="91" href="#91">91</a>  		{
<a name="92" href="#92">92</a>  			<strong class="jxr_keyword">final</strong> XMLConfigurer x = <strong class="jxr_keyword">new</strong> XMLConfigurer();
<a name="93" href="#93">93</a>  			x.fromXML(XMLConfigurationTest.<strong class="jxr_keyword">class</strong>.getResourceAsStream(<span class="jxr_string">"XMLConfigurationTest.xml"</span>));
<a name="94" href="#94">94</a>  
<a name="95" href="#95">95</a>  			<strong class="jxr_keyword">final</strong> Guard guard = <strong class="jxr_keyword">new</strong> Guard(x);
<a name="96" href="#96">96</a>  			guard.setInvariantsEnabled(false);
<a name="97" href="#97">97</a>  			TestGuardAspect.aspectOf().setGuard(guard);
<a name="98" href="#98">98</a>  
<a name="99" href="#99">99</a>  			validateUser();
<a name="100" href="#100">100</a> 		}
<a name="101" href="#101">101</a> 		<strong class="jxr_keyword">catch</strong> (<strong class="jxr_keyword">final</strong> ValidationFailedException ex)
<a name="102" href="#102">102</a> 		{
<a name="103" href="#103">103</a> 			ex.getCause().printStackTrace();
<a name="104" href="#104">104</a> 			<strong class="jxr_keyword">throw</strong> ex;
<a name="105" href="#105">105</a> 		}
<a name="106" href="#106">106</a> 	}
<a name="107" href="#107">107</a> 
<a name="108" href="#108">108</a> 	<strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSerializedObjectConfiguration()
<a name="109" href="#109">109</a> 	{
<a name="110" href="#110">110</a> 		<strong class="jxr_keyword">final</strong> XMLConfigurer x = <strong class="jxr_keyword">new</strong> XMLConfigurer();
<a name="111" href="#111">111</a> 
<a name="112" href="#112">112</a> 		<em class="jxr_comment">/*</em>
<a name="113" href="#113">113</a> <em class="jxr_comment">		 * define a configuration</em>
<a name="114" href="#114">114</a> <em class="jxr_comment">		 */</em>
<a name="115" href="#115">115</a> 		<strong class="jxr_keyword">final</strong> Set&lt;ConstraintSetConfiguration&gt; constraintSetsConfig = <strong class="jxr_keyword">new</strong> HashSet&lt;ConstraintSetConfiguration&gt;();
<a name="116" href="#116">116</a> 		{
<a name="117" href="#117">117</a> 			<strong class="jxr_keyword">final</strong> ConstraintSetConfiguration csf = <strong class="jxr_keyword">new</strong> ConstraintSetConfiguration();
<a name="118" href="#118">118</a> 			constraintSetsConfig.add(csf);
<a name="119" href="#119">119</a> 
<a name="120" href="#120">120</a> 			csf.id = <span class="jxr_string">"user.userid"</span>;
<a name="121" href="#121">121</a> 			csf.checks = <strong class="jxr_keyword">new</strong> ArrayList&lt;Check&gt;();
<a name="122" href="#122">122</a> 			<strong class="jxr_keyword">final</strong> NotNullCheck nnc = <strong class="jxr_keyword">new</strong> NotNullCheck();
<a name="123" href="#123">123</a> 			nnc.setMessage(<span class="jxr_string">"{context} is null"</span>);
<a name="124" href="#124">124</a> 			csf.checks.add(nnc);
<a name="125" href="#125">125</a> 			<strong class="jxr_keyword">final</strong> MatchPatternCheck rec = <strong class="jxr_keyword">new</strong> MatchPatternCheck();
<a name="126" href="#126">126</a> 			rec.setPattern(Pattern.compile(<span class="jxr_string">"^[a-z0-9]{8}$"</span>, 0));
<a name="127" href="#127">127</a> 			rec.setMessage(<span class="jxr_string">"{context} does not match the pattern {pattern}"</span>);
<a name="128" href="#128">128</a> 			csf.checks.add(rec);
<a name="129" href="#129">129</a> 		}
<a name="130" href="#130">130</a> 
<a name="131" href="#131">131</a> 		<strong class="jxr_keyword">final</strong> Set&lt;ClassConfiguration&gt; classConfigs = <strong class="jxr_keyword">new</strong> HashSet&lt;ClassConfiguration&gt;();
<a name="132" href="#132">132</a> 		{
<a name="133" href="#133">133</a> 			<strong class="jxr_keyword">final</strong> ClassConfiguration cf = <strong class="jxr_keyword">new</strong> ClassConfiguration();
<a name="134" href="#134">134</a> 			classConfigs.add(cf);
<a name="135" href="#135">135</a> 			cf.type = User.<strong class="jxr_keyword">class</strong>;
<a name="136" href="#136">136</a> 
<a name="137" href="#137">137</a> 			cf.fieldConfigurations = <strong class="jxr_keyword">new</strong> HashSet&lt;FieldConfiguration&gt;();
<a name="138" href="#138">138</a> 			{
<a name="139" href="#139">139</a> 				<strong class="jxr_keyword">final</strong> FieldConfiguration fc = <strong class="jxr_keyword">new</strong> FieldConfiguration();
<a name="140" href="#140">140</a> 				cf.fieldConfigurations.add(fc);
<a name="141" href="#141">141</a> 
<a name="142" href="#142">142</a> 				fc.name = <span class="jxr_string">"firstName"</span>;
<a name="143" href="#143">143</a> 				fc.checks = <strong class="jxr_keyword">new</strong> ArrayList&lt;Check&gt;();
<a name="144" href="#144">144</a> 				<strong class="jxr_keyword">final</strong> LengthCheck lc = <strong class="jxr_keyword">new</strong> LengthCheck();
<a name="145" href="#145">145</a> 				lc.setMessage(<span class="jxr_string">"{context} is not between {min} and {max} characters long"</span>);
<a name="146" href="#146">146</a> 				lc.setMax(3);
<a name="147" href="#147">147</a> 				fc.checks.add(lc);
<a name="148" href="#148">148</a> 			}
<a name="149" href="#149">149</a> 			{
<a name="150" href="#150">150</a> 				<strong class="jxr_keyword">final</strong> FieldConfiguration fc = <strong class="jxr_keyword">new</strong> FieldConfiguration();
<a name="151" href="#151">151</a> 				cf.fieldConfigurations.add(fc);
<a name="152" href="#152">152</a> 
<a name="153" href="#153">153</a> 				fc.name = <span class="jxr_string">"lastName"</span>;
<a name="154" href="#154">154</a> 				fc.checks = <strong class="jxr_keyword">new</strong> ArrayList&lt;Check&gt;();
<a name="155" href="#155">155</a> 				<strong class="jxr_keyword">final</strong> LengthCheck lc = <strong class="jxr_keyword">new</strong> LengthCheck();
<a name="156" href="#156">156</a> 				lc.setMessage(<span class="jxr_string">"{context} is not between {min} and {max} characters long"</span>);
<a name="157" href="#157">157</a> 				lc.setMax(5);
<a name="158" href="#158">158</a> 				fc.checks.add(lc);
<a name="159" href="#159">159</a> 			}
<a name="160" href="#160">160</a> 			{
<a name="161" href="#161">161</a> 				<strong class="jxr_keyword">final</strong> FieldConfiguration fc = <strong class="jxr_keyword">new</strong> FieldConfiguration();
<a name="162" href="#162">162</a> 				fc.overwrite = Boolean.TRUE;
<a name="163" href="#163">163</a> 				cf.fieldConfigurations.add(fc);
<a name="164" href="#164">164</a> 
<a name="165" href="#165">165</a> 				fc.name = <span class="jxr_string">"userId"</span>;
<a name="166" href="#166">166</a> 				fc.checks = <strong class="jxr_keyword">new</strong> ArrayList&lt;Check&gt;();
<a name="167" href="#167">167</a> 				<strong class="jxr_keyword">final</strong> AssertConstraintSetCheck acsc = <strong class="jxr_keyword">new</strong> AssertConstraintSetCheck();
<a name="168" href="#168">168</a> 				acsc.setId(<span class="jxr_string">"user.userid"</span>);
<a name="169" href="#169">169</a> 				fc.checks.add(acsc);
<a name="170" href="#170">170</a> 			}
<a name="171" href="#171">171</a> 
<a name="172" href="#172">172</a> 			cf.constructorConfigurations = <strong class="jxr_keyword">new</strong> HashSet&lt;ConstructorConfiguration&gt;();
<a name="173" href="#173">173</a> 			{
<a name="174" href="#174">174</a> 				<strong class="jxr_keyword">final</strong> ConstructorConfiguration cc = <strong class="jxr_keyword">new</strong> ConstructorConfiguration();
<a name="175" href="#175">175</a> 				cf.constructorConfigurations.add(cc);
<a name="176" href="#176">176</a> 				cc.parameterConfigurations = <strong class="jxr_keyword">new</strong> ArrayList&lt;ParameterConfiguration&gt;();
<a name="177" href="#177">177</a> 
<a name="178" href="#178">178</a> 				<strong class="jxr_keyword">final</strong> AssertConstraintSetCheck acsc = <strong class="jxr_keyword">new</strong> AssertConstraintSetCheck();
<a name="179" href="#179">179</a> 				acsc.setId(<span class="jxr_string">"user.userid"</span>);
<a name="180" href="#180">180</a> 
<a name="181" href="#181">181</a> 				<strong class="jxr_keyword">final</strong> ParameterConfiguration pc1 = <strong class="jxr_keyword">new</strong> ParameterConfiguration();
<a name="182" href="#182">182</a> 				pc1.type = String.<strong class="jxr_keyword">class</strong>;
<a name="183" href="#183">183</a> 				pc1.checks = <strong class="jxr_keyword">new</strong> ArrayList&lt;Check&gt;();
<a name="184" href="#184">184</a> 				pc1.checks.add(acsc);
<a name="185" href="#185">185</a> 				cc.parameterConfigurations.add(pc1);
<a name="186" href="#186">186</a> 				<strong class="jxr_keyword">final</strong> ParameterConfiguration pc2 = <strong class="jxr_keyword">new</strong> ParameterConfiguration();
<a name="187" href="#187">187</a> 				pc2.type = String.<strong class="jxr_keyword">class</strong>;
<a name="188" href="#188">188</a> 				pc2.checks = <strong class="jxr_keyword">new</strong> ArrayList&lt;Check&gt;();
<a name="189" href="#189">189</a> 				pc2.checks.add(acsc);
<a name="190" href="#190">190</a> 				cc.parameterConfigurations.add(pc2);
<a name="191" href="#191">191</a> 				<strong class="jxr_keyword">final</strong> ParameterConfiguration pc3 = <strong class="jxr_keyword">new</strong> ParameterConfiguration();
<a name="192" href="#192">192</a> 				pc3.type = <strong class="jxr_keyword">int</strong>.<strong class="jxr_keyword">class</strong>;
<a name="193" href="#193">193</a> 				cc.parameterConfigurations.add(pc3);
<a name="194" href="#194">194</a> 			}
<a name="195" href="#195">195</a> 
<a name="196" href="#196">196</a> 			cf.methodConfigurations = <strong class="jxr_keyword">new</strong> HashSet&lt;MethodConfiguration&gt;();
<a name="197" href="#197">197</a> 			{
<a name="198" href="#198">198</a> 				<strong class="jxr_keyword">final</strong> AssertConstraintSetCheck acsc = <strong class="jxr_keyword">new</strong> AssertConstraintSetCheck();
<a name="199" href="#199">199</a> 				acsc.setId(<span class="jxr_string">"user.userid"</span>);
<a name="200" href="#200">200</a> 
<a name="201" href="#201">201</a> 				MethodConfiguration mc = <strong class="jxr_keyword">new</strong> MethodConfiguration();
<a name="202" href="#202">202</a> 				cf.methodConfigurations.add(mc);
<a name="203" href="#203">203</a> 				mc.name = <span class="jxr_string">"getManagerId"</span>;
<a name="204" href="#204">204</a> 				mc.returnValueConfiguration = <strong class="jxr_keyword">new</strong> MethodReturnValueConfiguration();
<a name="205" href="#205">205</a> 				mc.returnValueConfiguration.checks = <strong class="jxr_keyword">new</strong> ArrayList&lt;Check&gt;();
<a name="206" href="#206">206</a> 				mc.returnValueConfiguration.checks.add(acsc);
<a name="207" href="#207">207</a> 
<a name="208" href="#208">208</a> 				mc = <strong class="jxr_keyword">new</strong> MethodConfiguration();
<a name="209" href="#209">209</a> 				cf.methodConfigurations.add(mc);
<a name="210" href="#210">210</a> 				mc.name = <span class="jxr_string">"setManagerId"</span>;
<a name="211" href="#211">211</a> 				mc.parameterConfigurations = <strong class="jxr_keyword">new</strong> ArrayList&lt;ParameterConfiguration&gt;();
<a name="212" href="#212">212</a> 				<strong class="jxr_keyword">final</strong> ParameterConfiguration pc1 = <strong class="jxr_keyword">new</strong> ParameterConfiguration();
<a name="213" href="#213">213</a> 				pc1.type = String.<strong class="jxr_keyword">class</strong>;
<a name="214" href="#214">214</a> 				pc1.checks = <strong class="jxr_keyword">new</strong> ArrayList&lt;Check&gt;();
<a name="215" href="#215">215</a> 				pc1.checks.add(acsc);
<a name="216" href="#216">216</a> 				mc.parameterConfigurations.add(pc1);
<a name="217" href="#217">217</a> 			}
<a name="218" href="#218">218</a> 		}
<a name="219" href="#219">219</a> 
<a name="220" href="#220">220</a> 		x.getPojoConfigurer().setClassConfigurations(classConfigs);
<a name="221" href="#221">221</a> 		x.getPojoConfigurer().setConstraintSetConfigurations(constraintSetsConfig);
<a name="222" href="#222">222</a> 
<a name="223" href="#223">223</a> 		<em class="jxr_comment">/*</em>
<a name="224" href="#224">224</a> <em class="jxr_comment">		 * serialize the configuration to XML</em>
<a name="225" href="#225">225</a> <em class="jxr_comment">		 */</em>
<a name="226" href="#226">226</a> 		<strong class="jxr_keyword">final</strong> String xmlConfig = x.toXML();
<a name="227" href="#227">227</a> 
<a name="228" href="#228">228</a> 		<em class="jxr_comment">/*</em>
<a name="229" href="#229">229</a> <em class="jxr_comment">		 * deserialize the configuration from XML</em>
<a name="230" href="#230">230</a> <em class="jxr_comment">		 */</em>
<a name="231" href="#231">231</a> 		x.fromXML(xmlConfig);
<a name="232" href="#232">232</a> 
<a name="233" href="#233">233</a> 		<strong class="jxr_keyword">final</strong> Guard guard = <strong class="jxr_keyword">new</strong> Guard(x);
<a name="234" href="#234">234</a> 		guard.setInvariantsEnabled(false);
<a name="235" href="#235">235</a> 		TestGuardAspect.aspectOf().setGuard(guard);
<a name="236" href="#236">236</a> 
<a name="237" href="#237">237</a> 		validateUser();
<a name="238" href="#238">238</a> 	}
<a name="239" href="#239">239</a> 
<a name="240" href="#240">240</a> 	<strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> validateUser()
<a name="241" href="#241">241</a> 	{
<a name="242" href="#242">242</a> 		<strong class="jxr_keyword">final</strong> ConstraintsViolatedAdapter listener = <strong class="jxr_keyword">new</strong> ConstraintsViolatedAdapter();
<a name="243" href="#243">243</a> 		TestGuardAspect.aspectOf().getGuard().addListener(listener, User.<strong class="jxr_keyword">class</strong>);
<a name="244" href="#244">244</a> 
<a name="245" href="#245">245</a> 		listener.clear();
<a name="246" href="#246">246</a> 		<strong class="jxr_keyword">try</strong>
<a name="247" href="#247">247</a> 		{
<a name="248" href="#248">248</a> 			<strong class="jxr_keyword">new</strong> <a href="../../../../../net/sf/oval/test/guard/XMLConfigurationTest.html">User</a>(<strong class="jxr_keyword">null</strong>, <strong class="jxr_keyword">null</strong>, 1);
<a name="249" href="#249">249</a> 			fail(<span class="jxr_string">"ConstraintViolationException expected"</span>);
<a name="250" href="#250">250</a> 		}
<a name="251" href="#251">251</a> 		<strong class="jxr_keyword">catch</strong> (<strong class="jxr_keyword">final</strong> ConstraintsViolatedException ex)
<a name="252" href="#252">252</a> 		{
<a name="253" href="#253">253</a> 			<strong class="jxr_keyword">final</strong> ConstraintViolation[] violations = ex.getConstraintViolations();
<a name="254" href="#254">254</a> 			assertEquals(2, violations.length);
<a name="255" href="#255">255</a> 			assertEquals(
<a name="256" href="#256">256</a> 					User.<strong class="jxr_keyword">class</strong>.getName()
<a name="257" href="#257">257</a> 							+ <span class="jxr_string">"(class java.lang.String,class java.lang.String,int) Parameter 0 (userId) is null"</span>,
<a name="258" href="#258">258</a> 					violations[0].getMessage());
<a name="259" href="#259">259</a> 			assertEquals(
<a name="260" href="#260">260</a> 					User.<strong class="jxr_keyword">class</strong>.getName()
<a name="261" href="#261">261</a> 							+ <span class="jxr_string">"(class java.lang.String,class java.lang.String,int) Parameter 1 (managerId) is null"</span>,
<a name="262" href="#262">262</a> 					violations[1].getMessage());
<a name="263" href="#263">263</a> 		}
<a name="264" href="#264">264</a> 
<a name="265" href="#265">265</a> 		listener.clear();
<a name="266" href="#266">266</a> 		<strong class="jxr_keyword">try</strong>
<a name="267" href="#267">267</a> 		{
<a name="268" href="#268">268</a> 			<strong class="jxr_keyword">final</strong> <a href="../../../../../net/sf/oval/test/guard/XMLConfigurationTest.html">User</a> user = <strong class="jxr_keyword">new</strong> <a href="../../../../../net/sf/oval/test/guard/XMLConfigurationTest.html">User</a>(<span class="jxr_string">"12345678"</span>, <span class="jxr_string">"12345678"</span>, 1);
<a name="269" href="#269">269</a> 			user.setManagerId(<strong class="jxr_keyword">null</strong>);
<a name="270" href="#270">270</a> 			fail(<span class="jxr_string">"ConstraintViolationException expected"</span>);
<a name="271" href="#271">271</a> 		}
<a name="272" href="#272">272</a> 		<strong class="jxr_keyword">catch</strong> (<strong class="jxr_keyword">final</strong> ConstraintsViolatedException ex)
<a name="273" href="#273">273</a> 		{
<a name="274" href="#274">274</a> 			<strong class="jxr_keyword">final</strong> ConstraintViolation[] violations = ex.getConstraintViolations();
<a name="275" href="#275">275</a> 			assertEquals(1, violations.length);
<a name="276" href="#276">276</a> 			assertEquals(User.<strong class="jxr_keyword">class</strong>.getName()
<a name="277" href="#277">277</a> 					+ <span class="jxr_string">".setManagerId(class java.lang.String) Parameter 0 (managerId) is null"</span>,
<a name="278" href="#278">278</a> 					violations[0].getMessage());
<a name="279" href="#279">279</a> 		}
<a name="280" href="#280">280</a> 
<a name="281" href="#281">281</a> 		listener.clear();
<a name="282" href="#282">282</a> 		<strong class="jxr_keyword">try</strong>
<a name="283" href="#283">283</a> 		{
<a name="284" href="#284">284</a> 			<strong class="jxr_keyword">final</strong> <a href="../../../../../net/sf/oval/test/guard/XMLConfigurationTest.html">User</a> user = <strong class="jxr_keyword">new</strong> <a href="../../../../../net/sf/oval/test/guard/XMLConfigurationTest.html">User</a>();
<a name="285" href="#285">285</a> 			user.getManagerId();
<a name="286" href="#286">286</a> 			fail(<span class="jxr_string">"ConstraintViolationException expected"</span>);
<a name="287" href="#287">287</a> 		}
<a name="288" href="#288">288</a> 		<strong class="jxr_keyword">catch</strong> (<strong class="jxr_keyword">final</strong> ConstraintsViolatedException ex)
<a name="289" href="#289">289</a> 		{
<a name="290" href="#290">290</a> 			<strong class="jxr_keyword">final</strong> ConstraintViolation[] violations = ex.getConstraintViolations();
<a name="291" href="#291">291</a> 			assertEquals(1, violations.length);
<a name="292" href="#292">292</a> 			assertEquals(User.<strong class="jxr_keyword">class</strong>.getName() + <span class="jxr_string">".getManagerId() is null"</span>, violations[0]
<a name="293" href="#293">293</a> 					.getMessage());
<a name="294" href="#294">294</a> 		}
<a name="295" href="#295">295</a> 	}
<a name="296" href="#296">296</a> }
</pre>
<hr/><div id="footer">This page was automatically generated by <a href="http://maven.apache.org/">Maven</a></div></body>
</html>

