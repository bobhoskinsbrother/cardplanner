<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">











<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>OVal - the object validation framework for Javaâ„¢ 5 or later - CPD Results</title>
    <style type="text/css" media="all">
      @import url("./css/maven-base.css");
      @import url("./css/maven-theme.css");
      @import url("./css/site.css");
    </style>
    <link rel="stylesheet" href="./css/print.css" type="text/css" media="print" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
                                                    
<link rel="shortcut icon" type="image/x-icon" href="images/favicon.ico"/>
                    </head>
  <body class="composite">
    <div id="banner">
                  <a href="" id="bannerLeft">
    
                                            <img src="images/oval-banner.png" alt="" />
    
            </a>
                    <div class="clear">
        <hr/>
      </div>
    </div>
    <div id="breadcrumbs">
          
  

  
    
            
  
    
            <div class="xleft">
        Last Published: 2009-05-10
                  &nbsp;| Version: 1.32
                      </div>
            <div class="xright">            <a href="">Home</a>
            
  

  
    
            
  
    
  </div>
      <div class="clear">
        <hr/>
      </div>
    </div>
    <div id="leftColumn">
      <div id="navcolumn">
           
  

  
    
            
  
    
                   <h5>OVal 1.32</h5>
            <ul>
              
    <li class="none">
                    <a href="index.html">About</a>
          </li>
              
    <li class="none">
                    <a href="new_and_noteworthy.html">New and Noteworthy</a>
          </li>
              
    <li class="none">
                    <a href="license.html">License</a>
          </li>
              
    <li class="none">
                    <a href="userguide.html">User Guide</a>
          </li>
              
    <li class="none">
                    <a href="api/index.html">API (JavaDoc)</a>
          </li>
              
    <li class="none">
                    <a href="dependencies.html">Dependencies</a>
          </li>
              
    <li class="none">
                    <a href="roadmap.html">Roadmap</a>
          </li>
              
    <li class="none">
                    <a href="dashboard-report.html">Code Metrics</a>
          </li>
              
    <li class="none">
                    <a href="http://sourceforge.net/project/showfiles.php?group_id=145963" class="externalLink">Download</a>
          </li>
          </ul>
              <h5>Project Documentation</h5>
            <ul>
              
                
              
      
            
      
            
      
            
      
            
      
            
      
            
      
            
      
              
        <li class="collapsed">
                    <a href="project-info.html">Project Information</a>
                </li>
              
                
              
      
            
      
            
      
            
            
            
      
            
      
            
      
            
      
            
      
            
      
            
      
            
      
            
      
              
            <li class="expanded">
                    <a href="project-reports.html">Project Reports</a>
                  <ul>
                  
    <li class="none">
                    <a href="checkstyle.html">Checkstyle</a>
          </li>
                  
    <li class="none">
                    <a href="clirr-report.html">Clirr</a>
          </li>
                  
    <li class="none">
                    <a href="cobertura/index.html">Cobertura Test Coverage</a>
          </li>
                  
    <li class="none">
              <strong>CPD Report</strong>
        </li>
                  
    <li class="none">
                    <a href="dashboard-report.html">DashBoard Report</a>
          </li>
                  
    <li class="none">
                    <a href="findbugs.html">FindBugs Report</a>
          </li>
                  
    <li class="none">
                    <a href="api/index.html">JavaDocs</a>
          </li>
                  
    <li class="none">
                    <a href="jdepend-report.html">JDepend</a>
          </li>
                  
    <li class="none">
                    <a href="surefire-report.html">Maven Surefire Report</a>
          </li>
                  
    <li class="none">
                    <a href="pmd.html">PMD Report</a>
          </li>
                  
    <li class="none">
                    <a href="xref/index.html">Source Xref</a>
          </li>
                  
    <li class="none">
                    <a href="taglist.html">Tag List</a>
          </li>
                  
    <li class="none">
                    <a href="xref-test/index.html">Test Source Xref</a>
          </li>
              </ul>
        </li>
          </ul>
                                                 
                        
                        
            <a href="http://maven.apache.org/" title="Maven" class="poweredBy">
                            <img alt="Maven" src="images/logos/maven-feather.png" />
            </a>
                               
  

  
    
            
  
    
        </div>
    </div>
    <div id="bodyColumn">
      <div id="contentBox">
        <div class="section"><h2>CPD Results</h2>
<p>The following document contains the results of PMD's  <a href="http://pmd.sourceforge.net/cpd.html" class="externalLink">CPD</a>
 4.2.2.</p>
</div>
<div class="section"><h2>Duplications</h2>
<p><table class="bodyTable"><tr class="a"><th>File</th>
<th>Line</th>
</tr>
<tr class="b"><td>net\sf\oval\guard\Guard.java</td>
<td><a href="./xref/net/sf/oval/guard/Guard.html#650">650</a>
</td>
</tr>
<tr class="a"><td>net\sf\oval\guard\Guard.java</td>
<td><a href="./xref/net/sf/oval/guard/Guard.html#841">841</a>
</td>
</tr>
<tr class="b"><td colspan='2'><div class="source"><pre>		final ClassChecks cc = getClassChecks(method.getDeclaringClass());

		final boolean checkInvariants = isInvariantsEnabled &amp;&amp; cc.isCheckInvariants
				&amp;&amp; !ReflectionUtils.isPrivate(method) &amp;&amp; !ReflectionUtils.isProtected(method);

		final List&lt;ConstraintViolation&gt; violations = getCollectionFactory().createList();

		// if static method use the declaring class as guardedObject
		if (guardedObject == null &amp;&amp; ReflectionUtils.isStatic(method))
		{
			guardedObject = method.getDeclaringClass();
		}

		try
		{
			// check invariants
			if (checkInvariants || cc.methodsWithCheckInvariantsPre.contains(method))
			{
				validateInvariants(guardedObject, violations, null);
			}

			if (isPreConditionsEnabled)
			{
				// method parameter validation
				if (violations.size() == 0 &amp;&amp; args.length &gt; 0)
				{
					validateMethodParameters(guardedObject, method, args, violations);
				}

				// @Pre validation
				if (violations.size() == 0)
				{
					validateMethodPre(guardedObject, method, args, violations);
				}
			}
		}
		catch (final ValidationFailedException ex)
		{
			throw translateException(ex);
		}

		final ProbeModeListener pml = isProbeModeFeatureUsed ? objectsInProbeMode.get().get(guardedObject) : null;
		if (pml != null)
		{
			pml.onMethodCall(method, args);
		}

		if (violations.size() &gt; 0)
		{
			final ConstraintsViolatedException violationException = new ConstraintsViolatedException(violations);
			if (isListenersFeatureUsed)
			{
				notifyListeners(guardedObject, violationException);
			}

			// don't throw an exception if the method is a setter and suppressing for precondition is enabled
			if (pml != null)
			{
				pml.onConstraintsViolatedException(violationException);
				return DO_NOT_PROCEED;</pre>
</div>
</td></tr>
<table class="bodyTable"></p>
<p><table class="bodyTable"><tr class="a"><th>File</th>
<th>Line</th>
</tr>
<tr class="b"><td>net\sf\oval\constraint\MemberOfCheck.java</td>
<td><a href="./xref/net/sf/oval/constraint/MemberOfCheck.html#42">42</a>
</td>
</tr>
<tr class="a"><td>net\sf\oval\constraint\NotMemberOfCheck.java</td>
<td><a href="./xref/net/sf/oval/constraint/NotMemberOfCheck.html#42">42</a>
</td>
</tr>
<tr class="b"><td colspan='2'><div class="source"><pre>	public void configure(final NotMemberOf constraintAnnotation)
	{
		super.configure(constraintAnnotation);
		setIgnoreCase(constraintAnnotation.ignoreCase());
		setMembers(constraintAnnotation.value());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Map&lt;String, String&gt; createMessageVariables()
	{
		final Map&lt;String, String&gt; messageVariables = getCollectionFactory().createMap(2);
		messageVariables.put(&quot;ignoreCase&quot;, Boolean.toString(ignoreCase));
		messageVariables.put(&quot;members&quot;, StringUtils.implode(members, &quot;,&quot;));
		return messageVariables;
	}

	/**
	 * @return the members
	 */
	public List&lt;String&gt; getMembers()
	{
		final List&lt;String&gt; v = getCollectionFactory().createList();
		v.addAll(members);
		return v;
	}

	private List&lt;String&gt; getMembersLowerCase()
	{
		if (membersLowerCase == null)
		{
			membersLowerCase = getCollectionFactory().createList(members.size());
			for (final String val : members)
			{
				membersLowerCase.add(val.toLowerCase(Locale.getDefault()));
			}
		}
		return membersLowerCase;
	}

	/**
	 * @return the ignoreCase
	 */
	public boolean isIgnoreCase()
	{
		return ignoreCase;
	}

	/**
	 * {@inheritDoc}
	 */
	public boolean isSatisfied(final Object validatedObject, final Object valueToValidate, final OValContext context,
			final Validator validator)
	{
		if (valueToValidate == null) return true;

		if (ignoreCase)
			return !getMembersLowerCase().contains(valueToValidate.toString().toLowerCase(Locale.getDefault()));</pre>
</div>
</td></tr>
<table class="bodyTable"></p>
<p><table class="bodyTable"><tr class="a"><th>File</th>
<th>Line</th>
</tr>
<tr class="b"><td>net\sf\oval\constraint\EqualToFieldCheck.java</td>
<td><a href="./xref/net/sf/oval/constraint/EqualToFieldCheck.html#116">116</a>
</td>
</tr>
<tr class="a"><td>net\sf\oval\constraint\NotEqualToFieldCheck.java</td>
<td><a href="./xref/net/sf/oval/constraint/NotEqualToFieldCheck.html#112">112</a>
</td>
</tr>
<tr class="b"><td colspan='2'><div class="source"><pre>		return !valueToValidate.equals(valueToCompare);
	}

	/**
	 * @return the useGetter
	 */
	public boolean isUseGetter()
	{
		return useGetter;
	}

	/**
	 * @param declaringClass the declaringClass to set
	 */
	public void setDeclaringClass(final Class&lt; ? &gt; declaringClass)
	{
		this.declaringClass = declaringClass == Void.class ? null : declaringClass;
		requireMessageVariablesRecreation();
	}

	/**
	 * @param fieldName the fieldName to set
	 */
	public void setFieldName(final String fieldName)
	{
		this.fieldName = fieldName;
		requireMessageVariablesRecreation();
	}

	/**
	 * @param useGetter the useGetter to set
	 */
	public void setUseGetter(final boolean useGetter)
	{
		this.useGetter = useGetter;
		requireMessageVariablesRecreation();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Map&lt;String, String&gt; createMessageVariables()
	{
		final Map&lt;String, String&gt; messageVariables = getCollectionFactory().createMap(2);
		messageVariables.put(&quot;fieldName&quot;, fieldName);
		messageVariables.put(&quot;declaringClass&quot;, declaringClass == null || declaringClass == Void.class ? null
				: declaringClass.getName());
		messageVariables.put(&quot;useGetter&quot;, Boolean.toString(useGetter));
		return messageVariables;
	}
}</pre>
</div>
</td></tr>
<table class="bodyTable"></p>
<p><table class="bodyTable"><tr class="a"><th>File</th>
<th>Line</th>
</tr>
<tr class="b"><td>net\sf\oval\guard\Guard.java</td>
<td><a href="./xref/net/sf/oval/guard/Guard.html#1461">1461</a>
</td>
</tr>
<tr class="a"><td>net\sf\oval\guard\Guard.java</td>
<td><a href="./xref/net/sf/oval/guard/Guard.html#1533">1533</a>
</td>
</tr>
<tr class="b"><td colspan='2'><div class="source"><pre>				values.put(&quot;_this&quot;, validatedObject);
				if (hasParameters)
				{
					values.put(&quot;_args&quot;, args);
					for (int i = 0; i &lt; args.length; i++)
					{
						values.put(parameterNames[i], args[i]);
					}
				}
				else
				{
					values.put(&quot;_args&quot;, ArrayUtils.EMPTY_OBJECT_ARRAY);
				}

				if (!eng.evaluateAsBoolean(check.getExpression(), values))
				{
					final Map&lt;String, String&gt; messageVariables = getCollectionFactory().createMap(2);
					messageVariables.put(&quot;expression&quot;, check.getExpression());
					final String errorMessage = renderMessage(context, null, check.getMessage(), messageVariables);

					violations.add(new ConstraintViolation(check, errorMessage, validatedObject, null, context));
				}
			}
		}
		catch (final OValException ex)
		{
			throw new ValidationFailedException(&quot;Method pre conditions validation failed. Method: &quot; + method</pre>
</div>
</td></tr>
<table class="bodyTable"></p>
<p><table class="bodyTable"><tr class="a"><th>File</th>
<th>Line</th>
</tr>
<tr class="b"><td>net\sf\oval\constraint\InstanceOfAnyCheck.java</td>
<td><a href="./xref/net/sf/oval/constraint/InstanceOfAnyCheck.html#64">64</a>
</td>
</tr>
<tr class="a"><td>net\sf\oval\constraint\InstanceOfCheck.java</td>
<td><a href="./xref/net/sf/oval/constraint/InstanceOfCheck.html#58">58</a>
</td>
</tr>
<tr class="b"><td colspan='2'><div class="source"><pre>	}

	/**
	 * @param types the types to set
	 */
	public void setTypes(final Class&lt; ? &gt;... types)
	{
		this.types = types;
		requireMessageVariablesRecreation();
	}

	@Override
	public Map&lt;String, String&gt; createMessageVariables()
	{
		final Map&lt;String, String&gt; messageVariables = getCollectionFactory().createMap(2);
		if (types.length == 1)
		{
			messageVariables.put(&quot;types&quot;, types[0].getName());
		}
		else
		{
			final String[] classNames = new String[types.length];
			for (int i = 0, l = classNames.length; i &lt; l; i++)
			{
				classNames[i] = types[i].getName();
			}
			messageVariables.put(&quot;types&quot;, StringUtils.implode(classNames, &quot;,&quot;));
		}
		return messageVariables;
	}
}</pre>
</div>
</td></tr>
<table class="bodyTable"></p>
<p><table class="bodyTable"><tr class="a"><th>File</th>
<th>Line</th>
</tr>
<tr class="b"><td>net\sf\oval\constraint\EqualToFieldCheck.java</td>
<td><a href="./xref/net/sf/oval/constraint/EqualToFieldCheck.html#47">47</a>
</td>
</tr>
<tr class="a"><td>net\sf\oval\constraint\NotEqualToFieldCheck.java</td>
<td><a href="./xref/net/sf/oval/constraint/NotEqualToFieldCheck.html#47">47</a>
</td>
</tr>
<tr class="b"><td colspan='2'><div class="source"><pre>	public void configure(final NotEqualToField constraintAnnotation)
	{
		super.configure(constraintAnnotation);
		setFieldName(constraintAnnotation.value());
		setDeclaringClass(constraintAnnotation.declaringClass());
		setUseGetter(constraintAnnotation.useGetter());
	}

	/**
	 * @return the declaringClass
	 */
	public Class&lt; ? &gt; getDeclaringClass()
	{
		return declaringClass;
	}

	/**
	 * @return the fieldName
	 */
	public String getFieldName()
	{
		return fieldName;
	}

	/**
	 * {@inheritDoc}
	 */
	public boolean isSatisfied(final Object validatedObject, final Object valueToValidate, final OValContext context,
			final Validator validator)
	{
		if (valueToValidate == null) return true;

		final Class&lt; ? &gt; clazz = validatedObject.getClass();

		final Object valueToCompare;
		if (useGetter)
		{
			final Method getter = ReflectionUtils.getGetterRecursive(clazz, fieldName);
			if (getter == null)</pre>
</div>
</td></tr>
<table class="bodyTable"></p>
<p><table class="bodyTable"><tr class="a"><th>File</th>
<th>Line</th>
</tr>
<tr class="b"><td>net\sf\oval\constraint\MemberOfCheck.java</td>
<td><a href="./xref/net/sf/oval/constraint/MemberOfCheck.html#103">103</a>
</td>
</tr>
<tr class="a"><td>net\sf\oval\constraint\NotMemberOfCheck.java</td>
<td><a href="./xref/net/sf/oval/constraint/NotMemberOfCheck.html#103">103</a>
</td>
</tr>
<tr class="b"><td colspan='2'><div class="source"><pre>		return !members.contains(valueToValidate.toString());
	}

	/**
	 * @param ignoreCase the ignoreCase to set
	 */
	public void setIgnoreCase(final boolean ignoreCase)
	{
		this.ignoreCase = ignoreCase;
		requireMessageVariablesRecreation();
	}

	/**
	 * @param members the members to set
	 */
	public void setMembers(final List&lt;String&gt; members)
	{
		this.members = getCollectionFactory().createList();
		this.members.addAll(members);
		membersLowerCase = null;
		requireMessageVariablesRecreation();
	}

	/**
	 * @param members the members to set
	 */
	public void setMembers(final String... members)
	{
		this.members = getCollectionFactory().createList();
		ArrayUtils.addAll(this.members, members);
		membersLowerCase = null;
		requireMessageVariablesRecreation();
	}
}</pre>
</div>
</td></tr>
<table class="bodyTable"></p>
</div>

      </div>
    </div>
    <div class="clear">
      <hr/>
    </div>
    <div id="footer">
      <div class="xright">&#169;  
          2005-2009
    
          The OVal Development Team
          
  

  
    
            
  
    
  </div>
      <div class="clear">
        <hr/>
      </div>
    </div>
  </body>
</html>
