<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.5.0_16) on Wed Dec 31 13:19:10 EST 2008 -->
<TITLE>
JSONDeserializer (Flexjson API)
</TITLE>

<META NAME="keywords" CONTENT="flexjson.JSONDeserializer class">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    parent.document.title="JSONDeserializer (Flexjson API)";
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/JSONDeserializer.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../flexjson/JSON.html" title="annotation in flexjson"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../flexjson/JSONException.html" title="class in flexjson"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html?flexjson/JSONDeserializer.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="JSONDeserializer.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
flexjson</FONT>
<BR>
Class JSONDeserializer&lt;T&gt;</H2>
<PRE>
java.lang.Object
  <IMG SRC="../resources/inherit.gif" ALT="extended by "><B>flexjson.JSONDeserializer&lt;T&gt;</B>
</PRE>
<HR>
<DL>
<DT><PRE>public class <B>JSONDeserializer&lt;T&gt;</B><DT>extends java.lang.Object</DL>
</PRE>

<P>
<p>
 JSONDeserializer takes as input a json string and produces a static typed object graph from that
 json representation.  By default it uses the class property in the json data in order to map the
 untyped generic json data into a specific Java type.  However, you are limited to only json strings
 with class information embedded when resolving it into a Java type.  But, for now let's just look at
 the simplest case of class attributes in your json.  We'll look at how <A HREF="../flexjson/JSONSerializer.html" title="class in flexjson"><CODE>JSONSerializer</CODE></A> and
 JSONDeserializer pair together out of the box.
 </p>
 <p>
 Say we have a simple object like Hero (see the superhero package under the test and mock).
 To create a json represenation of Hero we'd do the following:
 </p>

 <pre>
   Hero harveyBirdman = new Hero("Harvey Birdman", new SecretIdentity("Attorney At Law"), new SecretLair("Sebben & Sebben") );
   String jsonHarvey = new JSONSerialize().serialize(hero);
 </pre>
 <p>
 Now to reconsitute Harvey to fight for the law we'd use JSONDeserializer like so:
 </p>
 <pre>
   Hero hero = new JSONDeserializer<Hero>().deserialize( jsonHarvey );
 </pre>
 <p>
 Pretty easy when all the type information is included with the JSON data.  Now let's look at the more difficult
 case of how we might reconstitute something missing type info.
 </p>
 <p>
 Let's exclude the class attribute in our json like so:
 </p>

 <pre>
   String jsonHarvey = new JSONSerialize().exclude("*.class").serialize(hero);
 </pre>
 <p>
 The big trick here is to replace that type information when we instantiate the deserializer.
 To do that we'll use the <A HREF="../flexjson/JSONDeserializer.html#use(java.lang.String, java.lang.Class)"><CODE>use(String, Class)</CODE></A> method like so:
 </p>
 <pre>
   Hero hero = new JSONDeserializer<Hero>().use( null, Hero.class ).deserialize( jsonHarvey );
 </pre>
 <p>
 Like riding a horse with no saddle without our type information.  So what is happening here is we've registered
 the Hero class to the root of the json.  The <A HREF="../flexjson/JSONDeserializer.html#use(java.lang.String, java.lang.Class)"><CODE>use(String, Class)</CODE></A> method  uses
 the object graph path to attach certain classes to those locations.  So, when the deserializer is deserializing
 it knows where it is in the object graph.  It uses that graph path to look up the java class it should use
 when reconstituting the object.
 </p>
 <p>
 Notice that in our json you'd see there is no type information in the stream.  However, all we had to do is point
 the class at the Hero object, and it figured it out.  That's because it uses the target type (in this case Hero)
 to figure out the other types by inspecting that class.  Meaning notice that we didn't have to tell it about
 SecretLair or SecretIdentity.  That's because it can figure that out from the Hero class.
 </p>
 <p>
 Pretty cool.  Where this fails is when we starting working with interfaces, abstract classes, and subclasses.
 Yea our friend polymorphism can be a pain when deserializing.  Why?  Well if you haven't realized by now
 inspecting the type from our target class won't help us because either it's not a concrete class or we
 can't tell the subclass by looking at the super class alone.  Next section we're going to stand up on our
 bare back horse.  Ready?  Let's do it.
 </p>
 <p>
 Before we showed how the <A HREF="../flexjson/JSONDeserializer.html#use(java.lang.String, java.lang.Class)"><CODE>use(String, Class)</CODE></A> method would allow us to
 plug in a single class for a given path.  That might work when you know exactly which class you want to
 instantiate, but when the class type depends on external factors we really need a way to specify several
 possibilities.  That's where the second version of <A HREF="../flexjson/JSONDeserializer.html#use(java.lang.String, flexjson.ClassLocator)"><CODE>use(String, ClassLocator)</CODE></A>
 comes into play.  <A HREF="../flexjson/ClassLocator.html" title="interface in flexjson"><CODE>ClassLocator</CODE></A> allow you to use a stradegy for finding which java Class
 you want to attach at a particular object path.
 </p>
 <p>
 <A HREF="../flexjson/JSONDeserializer.html#use(java.lang.String, flexjson.ClassLocator)"><CODE>use(String, ClassLocator)</CODE></A> have access to the intermediate form of
 the object as a Map.  Given the Map at the object path the ClassLocator figures out which Class
 Flexjson will bind the parameters into that object.
 </p>
 <p>
 Let's take a look at how this can be done using our Hero class.  All Heros have a list of super powers.
 These super powers are things like X Ray Vision, Heat Vision, Flight, etc.  Each super power is represented
 by a subclass of SuperPower.  If we serialize a Hero without class information embedded we'll need a way to
 figure out which instance to instantiate when we deserialize.  In this example I'm going to use a Transformer
 during serialization to embed a special type information into the object.  All this transformer does is strip
 off the package information on the class property.
 </p>
 <pre>
 String json = new JSONSerializer()
      .include("powers.class")
      .transform( new SimpleTransformer(), "powers.class")
      .exclude("*.class")
      .serialize( superhero );
 Hero hero = new JSONDeserializer<Hero>()
      .use("powers.class", new PackageClassLocator())
      .deserialize( json );
 </pre>
 <p>

 </p>
 <p>
 All objects that pass through the deserializer must have a no argument constructor.  The no argument
 constructor does not have to be public.  That allows you to maintain some encapsulation.  JSONDeserializer
 will bind parameters using setter methods of the objects instantiated if available.  If a setter method
 is not available it will using reflection to set the value directly into the field.  You can use setter
 methods transform the any data from json into the object structure you want.  That way json structure
 can be different from your Java object structure.  The works very much in the same way getters do for
 the <A HREF="../flexjson/JSONSerializer.html" title="class in flexjson"><CODE>JSONSerializer</CODE></A>.
 </p>
<P>

<P>
<HR>

<P>

<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../flexjson/JSONDeserializer.html#JSONDeserializer()">JSONDeserializer</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../flexjson/JSONDeserializer.html" title="type parameter in JSONDeserializer">T</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../flexjson/JSONDeserializer.html#deserialize(java.lang.String)">deserialize</A></B>(java.lang.String&nbsp;input)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../flexjson/JSONDeserializer.html" title="class in flexjson">JSONDeserializer</A>&lt;<A HREF="../flexjson/JSONDeserializer.html" title="type parameter in JSONDeserializer">T</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../flexjson/JSONDeserializer.html#use(java.lang.String, java.lang.Class)">use</A></B>(java.lang.String&nbsp;path,
    java.lang.Class&nbsp;clazz)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../flexjson/JSONDeserializer.html" title="class in flexjson">JSONDeserializer</A>&lt;<A HREF="../flexjson/JSONDeserializer.html" title="type parameter in JSONDeserializer">T</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../flexjson/JSONDeserializer.html#use(java.lang.String, flexjson.ClassLocator)">use</A></B>(java.lang.String&nbsp;path,
    <A HREF="../flexjson/ClassLocator.html" title="interface in flexjson">ClassLocator</A>&nbsp;locator)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="JSONDeserializer()"><!-- --></A><H3>
JSONDeserializer</H3>
<PRE>
public <B>JSONDeserializer</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="deserialize(java.lang.String)"><!-- --></A><H3>
deserialize</H3>
<PRE>
public <A HREF="../flexjson/JSONDeserializer.html" title="type parameter in JSONDeserializer">T</A> <B>deserialize</B>(java.lang.String&nbsp;input)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="use(java.lang.String, flexjson.ClassLocator)"><!-- --></A><H3>
use</H3>
<PRE>
public <A HREF="../flexjson/JSONDeserializer.html" title="class in flexjson">JSONDeserializer</A>&lt;<A HREF="../flexjson/JSONDeserializer.html" title="type parameter in JSONDeserializer">T</A>&gt; <B>use</B>(java.lang.String&nbsp;path,
                               <A HREF="../flexjson/ClassLocator.html" title="interface in flexjson">ClassLocator</A>&nbsp;locator)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="use(java.lang.String, java.lang.Class)"><!-- --></A><H3>
use</H3>
<PRE>
public <A HREF="../flexjson/JSONDeserializer.html" title="class in flexjson">JSONDeserializer</A>&lt;<A HREF="../flexjson/JSONDeserializer.html" title="type parameter in JSONDeserializer">T</A>&gt; <B>use</B>(java.lang.String&nbsp;path,
                               java.lang.Class&nbsp;clazz)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/JSONDeserializer.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../flexjson/JSON.html" title="annotation in flexjson"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../flexjson/JSONException.html" title="class in flexjson"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html?flexjson/JSONDeserializer.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="JSONDeserializer.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
