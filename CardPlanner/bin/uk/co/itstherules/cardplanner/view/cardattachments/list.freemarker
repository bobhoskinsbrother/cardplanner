${tagBuilder.showScript("stringbuffer.js")}
${tagBuilder.showScript("xhtmltagbuilder.js")}

<script>
//<![CDATA[
     
	var allAttachments = ${jsonSerializer.deepSerialize(attachments)};
	var cardAttachments = ${jsonSerializer.deepSerialize(card.attachments)};
    var tagBuilder = new XHtmlTagBuilder(root);
    var abbreviator = new LetterAbbreviator();
         
    Event.observe(this, "load",  function() { 
        drawCanvas(allAttachments, 'attachmentsScrollerArea');
        drawCanvas(cardAttachments, 'attached');
		Droppables.add($('attached'), { onDrop: addAttachmentToCard } );
		Droppables.add($('attachmentsScrollerArea'), { onDrop: removeAttachmentFromCard } );
    });

	function drawCanvas(attachments, target) {
		var attachmentsString = '';
		for(var i = 0; i < attachments.length; i++){
			var attachment = attachments[i];
			if(attachment.file) {
				var picture = tagBuilder.showImageString('Images', '0', 'file.png');
				var legend = abbreviator.abbreviate(attachment.title, 20) +" (" +abbreviator.abbreviate(attachment.name, 20)+")";
			} else {
				var picture = tagBuilder.showImageString("Attachments", attachment.identity, "Thumbnail");
				var legend = abbreviator.abbreviate(attachment.title, 20);
			}
			attachmentsString += '<div title="';
			attachmentsString += attachment.title;
			attachmentsString += '" id="';
			attachmentsString += attachment.identity;
			attachmentsString += '" style="cursor:move;float:left; margin:2px; overflow:hidden; text-align:right; width:90px; min-height:125px; margin:4px;" class="gray_rounded">';
			attachmentsString += '<span style="float:right;margin:5px; padding-left:2px; padding-right:2px;">';
			attachmentsString += tagBuilder.showLinkString('Attachments', attachment.identity, legend);
			attachmentsString += '</span><br/>';
			attachmentsString += picture;
			attachmentsString += '</div>';
		}
		$(target).update(attachmentsString);
        attachEventsToCanvas(attachments);
	}
	    
	function attachEventsToCanvas(attachments) {
		for(var i = 0; i < attachments.length; i++) {
			var attachment = attachments[i];
			var attachmentTarget = attachment.identity;
			new Draggable(attachmentTarget, { scroll: window, revert: true, ghosting: true });
		}
	}

	function addAttachmentToCard(draggable, droppable) {
		var containsDraggable = false;
		var id = draggable.getAttribute('id');
		var children = droppable.childNodes;
		for(var i=0;i < children.length; i++) {
			var childId = children[i].getAttribute('id');
			if(childId == id) { containsDraggable = true; }
		}
		if(!containsDraggable) {
			var url = '${root}/CardAttachments/Update/${card.identity}?attachment.identity=' + id ;
			new Ajax.Request(url, {
				method: 'post',
				onSuccess: function(transport) {
				  	var text = transport.responseText;
					var data = text.evalJSON(true);
				    if (data.identity != "0") {
						var attachment = data.attachment;
						cardAttachments.push(attachment);
						allAttachments.remove(attachment);
						new Effect.Highlight($('attached'), { keepBackgroundImage: true, startcolor: "#00FF00" }); 
					}
				}});
			draggable.parentNode.removeChild(draggable);
			droppable.appendChild(draggable);
		}
	}
	
	function removeAttachmentFromCard(draggable, droppable) {
		var containsDraggable = false;
		var id = draggable.getAttribute('id');
		var children = droppable.childNodes;
		for(var i=0;i < children.length; i++) {
			var childId = children[i].getAttribute('id');
			if(childId == id) { containsDraggable = true; }
		}
		if(!containsDraggable) {
			var url = '${root}/CardAttachments/Delete/${card.identity}?attachment.identity=' + id ;
			new Ajax.Request(url, {
				method: 'post',
				onSuccess: function(transport) {
			  	var text = transport.responseText;
				var data = text.evalJSON(true);
			    if (data.identity != "0") {
					var attachment = data.attachment;
					cardAttachments.remove(attachment);
					allAttachments.push(attachment);
					new Effect.Highlight($('attachmentsScrollerArea'), { keepBackgroundImage: true, startcolor: "#00FF00" }); }
				}
			});
			draggable.parentNode.removeChild(draggable);
			droppable.appendChild(draggable);
		}
	}

	function filterAttachments(value) {
		if(value=='') {
			drawCanvas(allAttachments, 'attachmentsScrollerArea');
		} else {
			var filtered = [];
			for(var i = 0; i < allAttachments.length; i++) {
				var attachment = allAttachments[i];
				var searchString = attachment.title+" "+attachment.name;
				if(searchString.toLowerCase().indexOf(value.toLowerCase()) > -1) {
					filtered[filtered.length] = attachment;
				}
			}
			drawCanvas(filtered, 'attachmentsScrollerArea');
		}
	}


//]]>	
</script>

<h2 style="margin-top: 5px;">Associate Attachments to ${card.title?html}
<a id="toggleVisibility" href="javascript:void(0);" onclick="javascript:void(Effect.toggle('addView', 'slide'));" title="Add Attachment">${tagBuilder.showImage("down.png")}</a>
</h2>
<div id="addView" style="margin-bottom:10px;<#if !violations.isRegistered()>display: none;</#if>">

<form action="${tagBuilder.url("CardAttachments", "Add", attachment.identity, "")}" method="POST" id="createForm" style="margin: 0px; border: 0px; padding: 0px;" enctype="multipart/form-data">
<fieldset class="gray_rounded">
${tagBuilder.hidden({"name":"cardIdentity"}, card.identity)}
<h2>Add Attachment</h2>
<span style="width:75px; float:left;">Title: </span>
${tagBuilder.inputText({"name":"title", "id":"title", "class":"title"}, attachment.title?html, violations.isViolated("title"), "Please input a title")}
<br/>
File: (currently ${attachment.name!""})
${tagBuilder.fileUpload({"name":"attachment.file", "id":"attachment.file", "class":"title"}, "", violations.isViolated("attachment.file"), "Please upload an attachment")}<br/>
<br/>
${tagBuilder.submit("Add")}
<input type="button" value="Cancel" onclick="javascript:$('toggleVisibility').onclick();location.href='${tagBuilder.listUrl("CardAttachments", card.identity, card.title?url)}';"/>
</fieldset>
</form>
</div>
<div style="clear:both;"></div>























<div id="attachedWithBin" style="width:100%; height:460px; margin-bottom:5px;">
<div class="gray_rounded" style="width:390px; height:450px; float:left;">
<h3>Attached</h3>
  <div style="width: 100%; border: 1px #999999 solid; overflow: auto; background-color:#FFFFFF; height: 405px;" id="attached"></div>
</div>



<div class="gray_rounded" style="width:275px;height:450px; float:right;">
<div id="expandAttachments" style="width:275px; height:450px; clear:both; float: left; margin-bottom: 10px">
<h2 style="float:left;">To Attach</h2>
<div style="float:right;margin-top:15px;" id="filterAttachmentsArea">
<form style="padding:0px;">
<div style="float:left;">Filter:</div> 
<div style="float:left;"><input type="text" onkeyup="filterAttachments(this.value)" /></div> 
</form>
</div>
<br/>
<div style="width: 100%; border: 1px #999999 solid; overflow: auto; background-color:#FFFFFF; height: 405px;" id="attachmentsScrollerArea">
</div>
<div style="clear:both;"></div>
</div>
</div>




<div style="clear:both;"></div>
</div>