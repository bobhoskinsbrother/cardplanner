<script type="text/javascript">
//<![CDATA[
function expandCanvas(container, expand, collapse) {
	new Effect.Move(container, {
		x : 0,
		y : 0,
		mode : 'relative'
	});
	new Effect.Scale(container, 1000, {
		scaleContent : false
	});
	$(collapse).style.display = 'inline';
	$(expand).style.display = 'none';
}

function contractCanvas(container, expand, collapse) {
	new Effect.Move(container, {
		x : 0,
		y : 0,
		mode : 'relative'
	});
	new Effect.Scale(container, 10, {
		scaleContent : false
	});
	$(collapse).style.display = 'none';
	$(expand).style.display = 'inline';
}
var Model = {
    topCard: ${jsonSerializer.deepSerialize(topCard, ["identity", "*.class", "*.children", "*.effort", "*.value", "*.status", "*.type"], ["*.parent"])}
};

Event.observe(this, 'dom:loaded',  function() {
    StoryBoard.Controller.initialize(Model.topCard, Model.topCard.children);
});

var StoryBoard = {

    View: {

        Document: {

            body: function() { return $$('body')[0]; },

            Dimensions: {

                _dimension: function(dimension) {
                    if (Object.isNumber(window['inner'+dimension])) {
                        return window['inner'+dimension];
                    } else if (document.documentElement && document.documentElement['client'+dimension]) {
                        return document.documentElement['client'+dimension];
                    } else if (document.body && document.body['client'+dimension]) {
                        return document.body['client'+dimension];
                    }
                    return 0;
                },

                Width: {
                    asNumber: function() {
                        return StoryBoard.View.Document.Dimensions._dimension('Width');
                    }
                },

                Height: {
                    asNumber: function() {
                        return StoryBoard.View.Document.Dimensions._dimension('Height');
                    }
                }
            }

        },

        Shim: {
            build: function() {
                return View.build('img', { 'src': root+'/Images/Show/0/blank.png' });
            }
        },

        Board: {

            Card: {

                get: function(identity) { return $('_'+identity); },

                initialize: function(topCard, cards) {
                    cards.each(function(card) {
                        var topCardView = StoryBoard.View.Board.Card.get(topCard.identity);
                        var cardView = StoryBoard.View.Board.Card.build(card, topCardView);
                    });
                },

                appendChildren: function(children, cardView) {
                    children.each(function(child) {
                        StoryBoard.View.Board.Card.build(child, cardView);
                    });
                },

                build: function(card, target) {
                    var cardInnerView = View.build('div', { 'id':'_inner_handle_'+card.identity, 'class': 'medium_size_card_background'}, card.title);
                    var cardView = View.build('div', { 'id':'_inner_'+card.identity, 'class': 'medium_size_card shadow', 'style':'background: '+card.type.colour+';'});
                    var cardGroupView = View.build('div', { 'id':'_'+card.identity, 'title': card.title, 'class': 'medium_size_card_group shadow thin_border'});
                    cardView.appendChild(cardInnerView);
                    cardGroupView.appendChild(cardView);
                    StoryBoard.View.Board.Card.InfoButton.addTo(cardGroupView);
                    new Draggable(cardGroupView, { 'handle': '_inner_handle_'+card.identity, 'revert': true, 'onStart': StoryBoard.Controller.Board.Card.startMovingCard });
                    Droppables.add(cardGroupView, { 'onDrop': StoryBoard.Controller.Board.Card.droppedCard });
                    target.appendChild(cardGroupView);
                    if(card.children) {
                        StoryBoard.View.Board.Card.appendChildren(card.children, cardGroupView);
                    }
                    return cardGroupView;
                },

                flash: function(identity, color) {
                    new Effect.Highlight('_'+identity, { keepBackgroundImage: true, startcolor: color });
                },

                InfoButton: {
                    build: function(identity) {
                        var infoView = View.build('div', {'class': 'card_info'}, 'i');
                        infoView.addTip(function(){ return StoryBoard.View.Board.Card.Toolbar.build(identity) }, { 'fixed': true, 'stem': true, 'showOn': 'click', 'hideTrigger': 'closeButton' });
                        return infoView;
                    },
                    addTo: function(cardView) {
                        var identity = cardView.getAttribute('id').substr(1);
                        cardView.select('.medium_size_card_background')[0].appendChild(StoryBoard.View.Board.Card.InfoButton.build(identity));
                    },
                    reattachTo: function(cardView) {
                        //horrible hack - have to remove and reattach so the opentip tool will
                        // show up - prob due to appendChild removing various observers
                        cardView.select('.card_info')[0].remove();
                        StoryBoard.View.Board.Card.InfoButton.addTo(cardView);
                    }
                },

                Toolbar:{

                    ImageButton: {
                        build: function(imageClass, title, identity, callback) {
                            var imageView = View.build('div', {'class': imageClass+' smaller_button_image', 'id': 'image_'+identity});
                            var buttonView = View.build('div', { 'title': title, 'id': identity, 'class': 'status_button smaller_image_button pushButton clickable center' }, imageView);
                            if(callback) { Event.observe(buttonView, 'click', callback); }
                            return buttonView;
                        }
                    },

                    removeAll: function() { $$('.ot-container').each(function(element){ element.remove(); }); },

                    build: function(identity) {
                        var container = View.build('div', {'class': 'card_tool_buttons_container' });
                        var tb = StoryBoard.View.Board.Card.Toolbar;
                        tb.addActionTo(container, identity, 'Show');
                        tb.addActionTo(container, identity, 'Edit');
                        tb.addActionTo(container, identity, 'Archive');
                        tb.addActionTo(container, identity, 'Delete');
                        tb.addActionTo(container, identity, 'Attachments');
                        tb.addActionTo(container, identity, 'Facts');
                        tb.addActionTo(container, identity, 'People');
                        tb.addActionTo(container, identity, 'Board');
                        return container;
                    },

                    addActionTo: function(container, identity, action) {
                        var a = action.toLowerCase();
                        container.appendChild(StoryBoard.View.Board.Card.Toolbar.ImageButton.build(a+'_button_image', action, a+'_card_button_'+identity, function(){ StoryBoard.Controller.Board.Card[action].now(identity); }));
                    }

                }

            }

        }

    },

    Controller: {

        initialize: function(topCard, cards) {
            Document.Comms.Wait.Controller.show('Just a sec...');
            StoryBoard.Controller.Board.initialize(topCard, cards);
            Document.Comms.Controller.destroy();
        },

        Document: {

            removeNode: function(identity) {
                $('_'+identity).remove();
            }
        },

        Board: {

            initialize: function(topCard, cards) {
                var topCardView = StoryBoard.View.Board.Card.get(topCard.identity);
                Droppables.add(topCardView, { 'onDrop': StoryBoard.Controller.Board.Card.droppedCard });
                StoryBoard.Controller.Board.Card.initialize(topCard, cards);
            },

            Card: {

                initialize: function(topCard, cards) {
                    StoryBoard.View.Board.Card.initialize(topCard, cards);
                },

                dispatch: function(action, model) {
                    StoryBoard.Controller.Board.Card.Dispatch[action.toLowerCase()](model);
                },

                droppedCard: function(cardView, parentView) {
                    var cardTitle = cardView.getAttribute('title');
                    var cardIdentity = cardView.getAttribute('id').substr(1);
                    var parentIdentity = parentView.getAttribute('id').substr(1);
                    var parameters = { 'parent.identity': parentIdentity, 'identity': cardIdentity, 'title': cardTitle };
                    cardView.parentNode.removeChild(cardView);
                    parentView.appendChild(cardView);
                    StoryBoard.Controller.Board.Card.Save.now(parameters);
                },

                startMovingCard: function() {
                    StoryBoard.View.Board.Card.Toolbar.removeAll();
                },

                Save: {

                    now: function(parameters) {
                        new Ajax.Request(root+'/StoryBoard/MoveCard/'+parameters.identity+'/'+parameters.title, {
                            method: 'post',
                            parameters: parameters,
                            onFailure: function(transport) {
                                StoryBoard.Controller.Board.Card.Save.failed('Card failed to save');
                            },
                            onException: function(transport) {
                                StoryBoard.Controller.Board.Card.Save.failed('An exception was raised when trying to save the card');
                            },
                            onSuccess: function(transport) {
                                StoryBoard.Controller.Board.Card.Save.done(transport.responseText.evalJSON(true));
                            }
                        });
                    },

                    failed: function(message) {
                        Document.Comms.Failure.Controller.flash(message);
                    },

                    done: function(model) {
                        StoryBoard.View.Board.Card.flash(model.identity, '#00FF00');
                    }


                },

                Edit: {
                    now: function(identity) {
                        lightWindow.activateWindow({
                            href: root+'/StoryBoard/EditCard/'+identity+'/index.xhtml',
                            title: 'Edit Card',
                            width: 722,
                            height: 560,
                            type: 'external'
                        });
                    }
                },

                Attachments: {
                    now: function(identity) {
                        lightWindow.activateWindow({
                            href: root+'/CardAttachments/List/'+identity+'/index.xhtml',
                            title: 'Show Attachments to Card',
                            width: 722,
                            height: 560,
                            type: 'external'
                        });
                    }
                },

                Facts: {
                    now: function(identity) {
                        lightWindow.activateWindow({
                            href: root+'/CardFacts/List/0/index.xhtml?card.identity='+identity,
                            title: 'Show Facts',
                            width: 722,
                            height: 560,
                            type: 'external'
                        });
                    }
                },

                People: {
                    now: function(identity) {
                        lightWindow.activateWindow({
                            href: root+'/CardPeople/List/'+identity+'/index.xhtml',
                            title: 'Show People',
                            width: 722,
                            height: 560,
                            type: 'external'
                        });
                    }
                },

                Board: {
                    now: function(identity) {
                        document.location = root+'/StoryBoard/Show/'+identity+'/index.xhtml';
                    }
                },

                Show: {
                    now: function(identity) {
                        lightWindow.activateWindow({
                            href: root+'/StoryBoard/ShowCard/'+identity+'/index.xhtml',
                            title: 'Show Card',
                            width: 722,
                            height: 560,
                            type: 'external'
                        });
                    }
                },

                Delete: {
                    now: function(identity) {
                        if(window.confirm('Do you really want to delete this card?')) {
                            new Ajax.Request(root+'/StoryBoard/DeleteCard/'+identity+'/index.xhtml', {
                                method: 'post',
                                onFailure: function(transport) {
                                    StoryBoard.Controller.Board.Card.Delete.failed('Card failed to delete');
                                },
                                onException: function(transport) {
                                    StoryBoard.Controller.Board.Card.Delete.failed('An exception was raised when trying to delete the card');
                                },
                                onSuccess: function(transport) {
                                    StoryBoard.Controller.Board.Card.Delete.done(transport.responseText.evalJSON(true).identity);
                                }
                            });
                        }
                    },

                    failed: function(message) {
                        Document.Comms.Failure.Controller.flash(message);
                    },

                    done: function(identity) {
                        StoryBoard.View.Board.Card.Toolbar.removeAll();
                        var postItView = StoryBoard.View.Board.Card.get(identity);
                        postItView.remove();
                    }
                },

                Archive: {
                    now: function(identity) {
                        if(window.confirm('Do you really want to archive this card?')) {
                            new Ajax.Request(root+'/StoryBoard/ArchiveCard/'+identity+'/index.xhtml', {
                                method: 'post',
                                onFailure: function(transport) {
                                    StoryBoard.Controller.Board.Card.Archive.failed('Failed to archive card');
                                },
                                onException: function(transport) {
                                    StoryBoard.Controller.Board.Card.Archive.failed('An exception was raised when trying to archive the card');
                                },
                                onSuccess: function(transport) {
                                    StoryBoard.Controller.Board.Card.Archive.done(transport.responseText.evalJSON(true).identity);
                                }
                            });
                        }
                    },
                    failed: function(message) {
                        Document.Comms.Failure.Controller.flash(message);
                    },
                    done: function(identity) {
                        StoryBoard.View.Board.Card.Toolbar.removeAll();
                        var postItView = StoryBoard.View.Board.Card.get(identity);
                        postItView.remove();
                    }
                },

                Dispatch: {
                    archive: function(card) {
                        humane.info('The card \''+card.title+'\' has been archived');
                        $('_'+card.identity).remove();
                    },
                    create: function(card) {
                        humane.info('The card \''+card.title+'\' has been added');
                        StoryBoard.View.Board.Card.initialize([card]);
                    },
                    delete: function(card) {
                        humane.info('The card \''+card.title+'\' has been deleted');
                        $('_'+card.identity).remove();
                    },
                    update: function(card) {
                        humane.info('The card \''+card.title+'\' has been updated');
                        StoryBoard.View.Board.Card.flash(card.identity, '#FFFFBB');
                        StoryBoard.View.Board.Card.Toolbar.removeAll();
                        throw 'TODO';
                    }
                }
            }
        }
    }
};


//]]>
</script>
<style type="text/css">
.medium_size_card { position: relative; clear: both; }
</style>
<div style="clear:both;"> 
<div style="float:right;"><#list types as type><span style="float:left;color:#BBBBBB;margin-right:5px;">${type.title?html}</span><div class="rounded" style="float:left;background-color:${type.colour};width:20px;height:20px;margin-right:10px;"></div></#list></div>
<div style="float: right; margin-right: 25px;">
${tagBuilder.link("Cards", "Print", "index.xhtml", "0", tagBuilder.showImage("print.png"), {})}
</div>
<div style="float: left;"><h2>Cards 
<a id="addCard" href="${root}/StoryBoard/AddCard/0/index.xhtml" class="lightwindow" params="lightwindow_type=external,lightwindow_width=722,lightwindow_height=560" title="Add New Card">${tagBuilder.showImage("card_add.png", {"style":"border:1px solid #BBBBBB;"})}</a>
</h2></div>
</div>




<div class="gray_rounded" style="clear: both;margin-top:10px;">
	<div class="white_rounded">
		<div style="clear:both;"></div>
		<div style="margin-left:-10px;">
			<a href="javascript:void(0);" style="float:left" onclick="expandCanvas('_${topCard.identity}', 'expand', 'collapse')">${tagBuilder.showImage("expand.gif", {"id":"expand"})}</a>
			<a href="javascript:void(0);" style="float:left" onclick="contractCanvas('_${topCard.identity}', 'expand', 'collapse')">${tagBuilder.showImage("collapse.gif", {"id":"collapse","style":"display:none"})}</a>
		</div>
		<div id="_${topCard.identity}" style="border: 1px solid #CCCCCC; width: 99%; min-height: 500px; background: #FFFFFF; overflow: hidden;"></div>
	</div>
</div>
<div id="ajax" style="display: none;"></div>