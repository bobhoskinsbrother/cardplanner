<#macro print_process step>
<#assign processStepType = processStepIO.getProcessStepType(step.processKey) />
<div id="processStep${step.identity}" class="${processStepType} shadow processStep processStepLibrary draggable" style="height: 100px;"> 
	<#if ProcessStepType.TERMINAL_START != processStepType>
		<#assign inputs = processStepIO.getInput(step.processKey) />
		<div style="float:left; width:20px;" id="processStep${step.identity}TerminalIn" class="processStepInputPoints" title="${collectionConverter.convert(inputs)}">
			<#list inputs as processInput><div class="processStepInputPoint">${tagBuilder.showImage("input.png")}</div></#list>
			<div style="clear: both;"></div>
		</div>
	<#else>
		<div style="float:left; width:20px;" id="processStep${step.identity}TerminalIn" class="processStepInputPoints">
			${tagBuilder.showImage("blank.png", {"style": "width:20px; height:20px;"})}
		</div>
	</#if>
	<div class="processStepTitle">
	<div id="processStep${step.identity}Title" class="processStepTitle" title="${step.title!""?html}">
		<strong>${step.title!""}</strong><br/>
	</div>
		<div id="processStep${step.identity}Details">
			<div id="processStep${step.identity}DetailsEllipsis">
			<a href="javascript:void(0);" onclick="javascript:void(Effect.toggle('processStep${step.identity}DetailsBody', 'blind'));">${tagBuilder.showImage("down.png")}</a>
			</div>
			<div id="processStep${step.identity}DetailsBody" style="display:none;">
				<strong>${step.processKey}</strong>
				<br/>
				<#if (step.input?? && step.input != "") >
				<strong>Input</strong>
				<br/>
				${step.input?html}
				</#if>
				<div style="clear: both;"></div>
				${tagBuilder.editButton("ProcessSteps", "Edit Process Step", step)} 
				${tagBuilder.deleteButton("ProcessSteps", step, {"redirect" : tagBuilder.editUrl("RoutesProcessSteps", route.identity, "index.xhtml") })}
				<div style="clear: both;"></div>
			</div>
			<div style="clear: both;"></div>
		</div>
	</div>
	<div style="float:left; width:20px;" id="processStep${step.identity}TerminalOut">
		<#if ProcessStepType.TERMINAL_END != processStepType >
			<div class="processStepOutputPoint">
				${tagBuilder.showImage("output.png", { "title": processStepIO.getOutput(step.processKey) })}
			</div>
		</#if>
		${tagBuilder.showImage("blank.png", {"style": "width:20px; height:20px;"})}
	</div>
</div>
</#macro>
${tagBuilder.showScript("connector.js")}
<style type="text/css">

.${ProcessStepType.TERMINAL_START} {
	background: #DDFFDD;
}
.${ProcessStepType.MODULE_CALL} {
	border: 1px solid #AAAAAA;
	background: #DDDDFF;
}
.${ProcessStepType.TERMINAL_END} {
	background: #FFDDDD;
}
.${ProcessStepType.TERMINAL_START}, .${ProcessStepType.TERMINAL_END} {
	border: 1px solid #AAAAAA;
   	-moz-border-radius: 10px;
	-khtml-border-radius: 10px;
   	-webkit-border-radius: 10px;
	border-radius: 10px;
}

.processStepTitle {
	float:left; 
	width: 110px; 
	overflow: hidden;
}

.processStep {
	font-size: 10px;
	margin-right:5px; 
	margin-bottom: 5px; 
	width: 150px; 
	z-index: 3;
}
.processStepLibrary {
	float:left; 
}
.processStepInputPoint, .processStepOutputPoint {
	width: 20px;
	height: 20px;
	clear: both;
}

.connectorLine, .connector {
	position: absolute;
}

.connected {
	background: #EEAA00;
}

.connectorEndInput, .connectorEndOutput {
	width: 18px; 
	height: 18px; 
	z-index: 4;
	cursor: move;
	position: absolute;
}
.connectorEndInput {
	background: url('${tagBuilder.showImageUrl("input.png")}'); 
}

.connectorEndOutput {
	background: url('${tagBuilder.showImageUrl("output.png")}'); 
}

</style>

<script type="text/javascript">
//<![CDATA[

Object.extend(Model, {

	processSteps: ${jsonSerializer.serialize(processStepIO.allProcessSteps(), ["inputs"])},

	routeProcessStep: ${jsonSerializer.deepSerialize(route.routeProcessStep!"")},

	uniqueReferenceSteps: function() {
		var hash = $H();
		var currentReferenceStep = Model.routeProcessStep;
		Model.recursivelySetReferenceSteps(currentReferenceStep, hash);
		return hash.values();
	},
	
	recursivelySetReferenceSteps: function(currentReferenceStep, hash) {
		hash.set(currentReferenceStep.identity, currentReferenceStep);
		var inputReferenceSteps = currentReferenceStep.inputSteps;
		if(Model.processStepFor(currentReferenceStep).processStepType != '${ProcessStepType.TERMINAL_START}' && inputReferenceSteps && inputReferenceSteps.length > 0) {
			// add input steps, then recurse
			for(var i = 0; i < inputReferenceSteps.length; i++) {
				var inputReferenceStep = inputReferenceSteps[i];
				Model.recursivelySetReferenceSteps(inputReferenceStep, hash);
			}
		}
	},
	
	removePx: function(string) {
		if (/px$/.test(string)) { 
			return parseInt(string.substr(0, (string.length - 'px'.length))); 
		}
		return parseInt(string);
	},
	
	processStepFor: function(processStepReferenceModel) {
		var key = processStepReferenceModel.step.processKey
		for(var i = 0; i < Model.processSteps.length; i++) {
			var step = Model.processSteps[i];
			if(step.key == key) {
				return step;
			}
		}
		return undefined;
	}
});

Object.extend(View, {
	
	processArea: function() { return $('processArea'); },
	
	oneSmallStep: /* for man */ function(oneGiantLeap, x, y) { // for mankind
		var stepIdentity = oneGiantLeap.id;
		var referenceIdentity = UUID.uuid();
		
		var classNames = $w(oneGiantLeap.className);
		classNames.remove('processStepLibrary');
		var smallStepView = Builder.node('div', { 'id': '_'+referenceIdentity, 'class': classNames.join(' '), 'style':'height: 40px; left: '+x+'px; top:'+y+'px; position:absolute;'}); 
		smallStepView.insert($(oneGiantLeap.select('#'+stepIdentity+'TerminalIn')[0]).clone(true));
		var middleDiv = Builder.node('div', { 'id': 'processStep' + stepIdentity + 'Middle', 'class': 'processStepTitle'});
		middleDiv.insert($(oneGiantLeap.select('#'+stepIdentity+'Title')[0]).clone(true));
		middleDiv.insert(View.drawRemoveProcessStepButton(referenceIdentity));
		smallStepView.insert(middleDiv);
		smallStepView.insert($(oneGiantLeap.select('#'+stepIdentity+'TerminalOut')[0]).clone(true));
		smallStepView.step = {};
		smallStepView.step.identity = oneGiantLeap.id.substr('processStep'.length);
		smallStepView.identity = referenceIdentity;
		return smallStepView;
	},

	buildSmallStepFor: function(referenceStepModel) {
		var step = Model.processStepFor(referenceStepModel);
		
		var identity = referenceStepModel.identity;
		var processStepType = step.processStepType;
		var classNames = processStepType + ' shadow processStep draggable';
		
		var smallStepView = Builder.node('div', { 'id': '_'+identity, 'class': classNames, 'style':'position:absolute; height: 40px; left:'+referenceStepModel.x+'px; top:'+referenceStepModel.y+'px;'});

		var terminalsIn = Builder.node('div', { 'id': 'processStep' + identity + 'TerminalIn', 'style':'float:left; width:20px;'});	
		if('${ProcessStepType.TERMINAL_START}' != processStepType) {
			var inputs = step.inputs;
			for(var i = 0; i < inputs.length; i++) {
				var processInput = inputs[i].described;
				var currentDiv = Builder.node('div', { 'id': 'processStep' + identity + 'TerminalIn' + i, 'class': 'processStepInputPoint'});
				var currentImage = Builder.node('img', { 'title': processInput, 'src': '${tagBuilder.showImageUrl("input.png")}' });
				
				currentDiv.insert(currentImage);
				terminalsIn.insert(currentDiv);
			}
		}
		
		terminalsIn.insert(Builder.node('img', { 'src': '${tagBuilder.showImageUrl("blank.png")}', 'style': 'width:20px; height:20px;'}));
		smallStepView.insert(terminalsIn);
		
		var middleDiv = Builder.node('div', { 'id': 'processStep' + identity + 'Middle', 'class': 'processStepTitle'});
		var titleDiv = Builder.node('div', { 'id': 'processStep' + identity + 'Title', 'class': 'processStepTitle', 'title': referenceStepModel.step.title});
		var title =  Builder.node('strong');
		title.update(referenceStepModel.step.title);
		titleDiv.insert(title);
		
		middleDiv.insert(titleDiv);
		middleDiv.insert(View.drawRemoveProcessStepButton(identity));
		smallStepView.insert(middleDiv);
		
		var terminalOut = Builder.node('div', { 'id': 'processStep' + identity + 'TerminalOut', 'style':'float:left; width:20px;'});	
		if('${ProcessStepType.TERMINAL_END}' != processStepType) {
			var processOutput = step.output.described;
			var currentDiv = Builder.node('div', { 'id': 'processStep' + identity + 'TerminalOut' + 0, 'class': 'processStepOutputPoint'});
			var currentImage = Builder.node('img', { 'title': processOutput, 'src': '${tagBuilder.showImageUrl("output.png")}' });
			currentDiv.insert(currentImage);
			terminalOut.insert(currentDiv);
		}
		terminalOut.insert(Builder.node('img', { 'src': '${tagBuilder.showImageUrl("blank.png")}', 'style': 'width:20px; height:20px;' }));
		smallStepView.insert(terminalOut);
		
		smallStepView.identity = referenceStepModel.identity;
		smallStepView.step = {};
		smallStepView.step.identity = referenceStepModel.step.identity;
		return smallStepView;
	},
	
	drawRemoveProcessStepButton: function(identity) {
		var button = Builder.node('img', { 'style':'cursor:pointer;','id': 'processStep' + identity + 'DeleteButton', 'src': '${tagBuilder.showImageUrl("delete.png")}' });
		button.identity = identity;
		button.observe('click', Controller.removeReferenceProcessStep);
		return button;
	},
	
	drawConnectionFor: function(processStepReferenceModel) {
		var canvas = View.processArea();
		var inputSteps = processStepReferenceModel.inputSteps;
		if(inputSteps && inputSteps.length > 0) {
			for(var i = 0; i < inputSteps.length; i++) {
				var inputStep = inputSteps[i];
				var connector = new Connector(null, { width: canvas.offsetWidth, height: canvas.offsetHeight } );
				connector.addTo(canvas);
				//draw a connector for each input
				connector.attachToInput($('_' + processStepReferenceModel.identity));
				connector.attachToOutput($('_'+inputStep.identity));
				if(Model.processStepFor(inputStep).processStepType != '${ProcessStepType.TERMINAL_START}') {
					View.drawConnectionFor(inputStep);
				}
			}
		}
	},
	
	drawCanvas: function() {
		if('' != Model.routeProcessStep) {
			var canvas = View.processArea();
			var uniqueReferenceSteps = Model.uniqueReferenceSteps();

			for(var i = 0; i < uniqueReferenceSteps.length; i++) {
				var referenceStepModel = uniqueReferenceSteps[i];
				var stepView = View.buildSmallStepFor(referenceStepModel);
				Controller.attachEventsToReferenceProcessStep(stepView, canvas);
				canvas.appendChild(stepView);
			}
			View.drawConnectionFor(Model.routeProcessStep);
		}
	}

});

Object.extend(Controller, {
	
	initialize: function() {
		TemplateController.attachDraggables();
		Controller.attachEvents();
		Controller.drawCanvas();
	},
	
	drawCanvas: function() {
		View.drawCanvas();
	},
	
	attachEvents: function() {
		Droppables.add(View.processArea(), { onDrop: Controller.attachReferenceProcessStep, greedy: false, accept: 'processStepLibrary' });
		$('addConnectorButton').observe('click', Controller.addConnector);
		$('changeProcessForm').observe('submit', Controller.prepareDataForSubmission);
	},
	
	prepareDataForSubmission: function(event) {
		var keys = Connectors.register.keys();
		var changeForm = $('changeProcessForm');
		var lastSteps = View.processArea().select('.${ProcessStepType.TERMINAL_END}');
		
		if(lastSteps.length != 1) {
			alert('Unexpected card in the baggage area (you need to have only one pink box)');
			event.stop();
		}
		try {
			var currentStep = lastSteps[0];
			Controller.recursivelyInsertFormValuesForProcessStep(currentStep, changeForm, '');
		} catch(e) {
			alert(e);
			event.stop();
		}
	},
	
	recursivelyInsertFormValuesForProcessStep: function(currentStep, changeForm, prepender) {

		changeForm.appendChild(new Element('input', {type: 'hidden', name: 'routeProcessStep.'+prepender+'.identity', value: currentStep.identity+''}));
		changeForm.appendChild(new Element('input', {type: 'hidden', name: 'routeProcessStep.'+prepender+'step.identity', value: currentStep.step.identity+''}));
		changeForm.appendChild(new Element('input', {type: 'hidden', name: 'routeProcessStep.'+prepender+'x', value: Model.removePx(currentStep.style.left)+''}));
		changeForm.appendChild(new Element('input', {type: 'hidden', name: 'routeProcessStep.'+prepender+'y', value: Model.removePx(currentStep.style.top)+''}));

		var inputSteps = Controller.inputStepsFor(currentStep);
		var currentStepClassNames = $w(currentStep.className);
		if(!currentStepClassNames.contains('${ProcessStepType.TERMINAL_START}') && inputSteps.length > 0) {
			for(var i = 0; i < inputSteps.length; i++) {
				var inputStep = inputSteps[i];
				var currentPrepender = prepender+'inputSteps.'+i+'.';
				Controller.recursivelyInsertFormValuesForProcessStep(inputStep, changeForm, currentPrepender);
			}
		}
	},
	
	inputStepsFor: function(currentStep) {
		var inputPoints = currentStep.select('.connectableInputPoint');
		var inputSteps = [];
		for(var i = 0; i < inputPoints.length; i++) {
			var currentInputPoint = inputPoints[i];
			if(currentInputPoint.populated && currentInputPoint.connected.widget.output.connectionPoint) {
				// walk the line: [ current step input point => connector end point => connector object => output => step output => other step ]   
				inputSteps.push(currentInputPoint.connected.widget.output.connectionPoint.step);
			}
		}
		return inputSteps;
	},
	
	addConnector: function() {
		var processArea = View.processArea();
		var connector = new Connector(null, { width: processArea.offsetWidth, height: processArea.offsetHeight } );
		connector.addTo(processArea);
	},
	
	removeReferenceProcessStep: function(event) {
		var stepView = $('_' + event.target.identity);
		var points = stepView.select('.processStepInputPoint').concat(stepView.select('.processStepOutputPoint'));
		for(var i = 0; i < points.length; i++) {
			var point = $(points[i]);
			if(point.connected) {
				point.connected.detach(View.processArea());
			}
		}
		stepView.remove();
	},
	
	attachReferenceProcessStep: function(draggable, droppable, event) {
		var draggablePosition = Position.cumulativeOffset(draggable);
		var droppablePosition = Position.cumulativeOffset(droppable);
		var x = draggablePosition[0] - droppablePosition[0];
		var y = draggablePosition[1] - droppablePosition[1];
		var stepView = View.oneSmallStep(draggable, x, y);
		Controller.attachEventsToReferenceProcessStep(stepView, droppable);
		droppable.appendChild(stepView);
	},
	
	attachEventsToReferenceProcessStep: function(stepView, canvas) {
		new Draggable(stepView, { revert: false } );
		var points = stepView.select('.processStepInputPoint');
		for(var i = 0; i < points.length; i++) {
			var point = $(points[i]);
			point.step = stepView;
			Connectors.registerPointAsInputConnectable(point);
		} 
		var points = stepView.select('.processStepOutputPoint');
		for(var i = 0; i < points.length; i++) {
			var point = $(points[i]);
			point.step = stepView;
			Connectors.registerPointAsOutputConnectable(point);
		} 
	}
});

Event.observe(this, 'dom:loaded', Controller.initialize);

//]]>
</script>

<h2>
Route (${route.controller!""?html}/${route.action!""?html}/${route.routeIdentity!""?html})
</h2>

<div class="gray_rounded shadow" id="processStepsInLibrary">
	<h3>
		Process Steps
		${tagBuilder.addButton("ProcessSteps", "Add Process Step", tagBuilder.url("RoutesProcessSteps", "Edit", route.identity, "index.xhtml"))}
	</h3>
	<#list processSteps as step>
		<@print_process step />
	</#list>
	<div style="clear: both;"></div>
<div style="clear: both;"></div>
<div style="float:left;" class="white_rounded">
	${tagBuilder.formStart("changeProcessForm", "RoutesProcessSteps", route.identity, action)}
		<div style="float:left;">
			${tagBuilder.showImage("add_connector_button.png", {"alt":"Add Connector", "title":"Add Connector", "id":"addConnectorButton", "style":"mouse:pointer;"})}
		</div>
		<div style="float:left;">
			${tagBuilder.submitImage("save_button.png", {"alt":"Save Process Steps Graph", "title":"Save Process Steps Graph"})}
		</div>
		${tagBuilder.formEnd()}
</div>
<div style="clear: both;"></div>
</div>
<div style="clear: both;"></div>
<div id="processArea" style="width: 100%; height: 500px; border: 1px dotted; margin-top: 10px;">
</div>
