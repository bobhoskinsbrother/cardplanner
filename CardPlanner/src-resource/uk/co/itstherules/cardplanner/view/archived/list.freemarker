<style type="text/css">
    .medium_size_card {
        position: relative;
        float: left;
        margin: 5px;
    }
    .card_tool_buttons_container {
        height: 45px;
    }
</style>
<script type="text/javascript">
//<![CDATA[
Object.extend(Model, {
    cards: ${jsonSerializer.deepSerialize(cards)}
});

var Board = {

    View:{
        get: function(identity) {
            return $('_' + identity);
        }
    },

    Controller: {

        initialize : function(cards) {
            Board.Card.Controller.initialize(cards);
        }

    },

    Card: {

        View: {

            initialize : function(cards) {
                var container = $('card_archive_container');
                cards.each(function(card) {
                    if (card.parent && !card.parent.archived) {
                        Board.Card.View.build(card, container);
                    }
                });
            },

            build: function(card, target) {
                var cardInnerView = View.build('div', { 'id':'_inner_' + card.identity, 'class': 'after_info medium_size_card_background'}, card.title);
                var cardView = View.build('div', { 'id':'_' + card.identity, 'class': 'medium_size_card shadow', 'style':'background: ' + card.type.colour + ';'});
                cardView.appendChild(cardInnerView);
                Board.InfoButton.View.addTo(cardView, 'Card', ['Show','Edit','UnArchive','Delete']);
                target.appendChild(cardView);
            }

        },

        Controller: {

            initialize : function(cards) {
                Board.Card.View.initialize(cards);
            },

            remove: function(identity) {
                Board.Toolbar.View.removeAll();
                Board.View.get(identity).remove();
            }

        }

    },

    InfoButton: {

        View: {

            build: function(identity, type, actions) {
                var infoView = View.build('div', {'class': type.underscore() + '_info'}, 'i');
                infoView.addTip(function() {
                    return Board.Toolbar.View.build(identity, type, actions);
                }, { 'fixed': true, 'stem': true, 'showOn': 'click', 'hideTrigger': 'closeButton' });
                return infoView;
            },

            addTo: function(view, type, actions) {
                var identity = view.getAttribute('id').substr(1);
                view.select('.after_info')[0].appendChild(Board.InfoButton.View.build(identity, type, actions));
            }

        }

    },

    Toolbar: {

        View: {

            get:function(identity) {
                return $('_' + identity);
            },

            removeAll: function() {
                $$('.ot-container').each(function(element) {
                    element.remove();
                });
            },

            build: function(identity, type, actions) {
                var container = View.build('div', {'class': type + '_tool_buttons_container' });
                actions.each(function(action) {
                    Board.Toolbar.View.addActionTo(container, identity, type, action);
                });
                container.appendChild(View.build('div', {'class': 'clear_both' }));
                return container;
            },

            addActionTo: function(container, identity, type, action) {
                var a = action.toLowerCase();
                container.appendChild(Board.Toolbar.ImageButton.View.build(a + '_button_image', action, a + '_' + type.toLowerCase() + '_button_' + identity, function() {
                    Board.Toolbar.Controller[action].now(identity, type);
                }));
            }

        },

        Controller: {

            Edit: {

                now: function(identity, type) {
                    Document.Comms.PopOver.Controller.show('Edit ' + type, 'StoryBoard', 'Edit' + type, identity, 'index.xhtml');
                }

            },

            Show: {

                now: function(identity, type) {
                    Document.Comms.PopOver.Controller.show('Show ' + type, 'StoryBoard', 'Show' + type, identity, 'index.xhtml');
                }

            },

            Delete: {

                now: function(identity, type) {
                    if (window.confirm('Do you really want to delete this ' + type + '?')) {
                        new Ajax.Request(root + '/StoryBoard/Delete' + type + '/' + identity + '/index.xhtml', {
                            method: 'post',
                            onFailure: function(transport) {
                                Board.Toolbar.Controller.Delete.failed(type + ' failed to delete');
                            },
                            onException: function(transport) {
                                Board.Toolbar.Controller.Delete.failed('An exception was raised when trying to delete the ' + type);
                            },
                            onSuccess: function(transport) {
                                Board[type].Controller.remove(transport.responseText.evalJSON(true).identity);
                            }
                        });
                    }
                },

                failed: function(message) {
                    Document.Comms.Failure.Controller.flash(message);
                }

            },

            UnArchive: {

                now: function(identity, type) {
                    var name = type.underscore().replace('_',' ');
                    if (window.confirm('Do you really want to un-archive this '+name+'?')) {
                        new Ajax.Request(root + '/StoryBoard/UnArchive' + type + '/' + identity + '/index.xhtml', {
                            method: 'post',
                            onFailure: function(transport) {
                                Board.Toolbar.Controller.UnArchive.failed('Failed to un-archive ' + name);
                            },
                            onException: function(transport) {
                                Board.Toolbar.Controller.UnArchive.failed('An exception was raised when trying to un-archive the ' + name);
                            },
                            onSuccess: function(transport) {
                                Board[type].Controller.remove(transport.responseText.evalJSON(true).identity);
                            }
                        });
                    }
                },

                failed: function(message) {
                    Document.Comms.Failure.Controller.flash(message);
                }

            }

        },

        ImageButton: {
            View:{
                build: function(imageClass, title, identity, callback) {
                    var imageView = View.build('div', {'class': imageClass + ' smaller_button_image', 'id': 'image_' + identity});
                    var buttonView = View.build('div', { 'title': title, 'id': identity, 'class': 'status_button smaller_image_button pushButton clickable center' }, imageView);
                    Event.observe(buttonView, 'click', callback);
                    return buttonView;
                }
            }
        }
    }

};

Event.observe(this, 'dom:loaded', function() {
    Board.Controller.initialize(Model.cards);
});

//]]>
</script>

<h2>Archived</h2>
<hr/>
<h2>Cards</h2>
<div id="card_archive_container" style="min-height:100px;"></div>
<div style="clear:both;"></div>

<div id="ajax" style="display: none;"></div>