package uk.co.itstherules.cardplanner.model;

import static org.junit.Assert.assertThat;

import java.util.List;

import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.junit.Assert;
import org.junit.Test;
import org.junit.internal.matchers.TypeSafeMatcher;

import uk.co.itstherules.cardplanner.model.type.EffortTypeModel;
import uk.co.itstherules.cardplanner.model.type.ValueTypeModel;
import uk.co.itstherules.yawf.model.SimpleAttachmentModel;

public class CachedInstanceTest {
	@Test
	public void checkThatDefaultObjectsAreSaved() {
		FakeObjectCache fakeObjectCache = new FakeObjectCache();
		CachedInstance unit = new CachedInstance();
		
		unit.initialise(fakeObjectCache);
		
		List<Object> objects = fakeObjectCache.getObjects();
		assertThat(objects, contains(1, ConfigurationModel.class));
		
		Assert.assertTrue(containsInstance(ConfigurationModel.class, objects));
		Assert.assertTrue(containsInstance(StatusModel.class, objects));
		Assert.assertTrue(containsInstance(EffortTypeModel.class, objects));
		Assert.assertTrue(containsInstance(ValueTypeModel.class, objects));
		Assert.assertTrue(containsInstance(SimpleAttachmentModel.class, objects));
		Assert.assertTrue(containsInstance(CardTypeModel.class, objects));
		Assert.assertTrue(containsInstance(CardModel.class, objects));
		Assert.assertTrue(containsInstance(PersonModel.class, objects));

	}
	
	
	private Matcher<List<Object>> contains(int amount, Class<ConfigurationModel> theClass) {
		return new ContainsAmountOfInstancesOfClasses(amount, theClass);
	}


	public boolean containsInstance(Class<?> classNeeded, List<Object> objects) {
		for (Object object : objects) {
	        if(classNeeded.isInstance(object)) return true;
        }
		return false;
	}
	
	private static class ContainsAmountOfInstancesOfClasses extends TypeSafeMatcher<List<Object>> {

		private final int amount;
		private final Class<ConfigurationModel> theClass;

		public ContainsAmountOfInstancesOfClasses(int amount, Class<ConfigurationModel> theClass) {
			this.amount = amount;
			this.theClass = theClass;
		}

		public void describeTo(Description description) {
			description.appendText("Contains instances of in list");
		}

		@Override
		public boolean matchesSafely(List<Object> objects) {
			int count = 0;
			for (Object object : objects) {
		        if(theClass.isInstance(object)) count++;
	        }
			return count == amount;
		}
		
	}
}



/*
ConfigurationModel.class

StatusModel.class
StatusModel.class
StatusModel.class
StatusModel.class

TemplateModel.class
TemplateModel.class
TemplateModel.class
TemplateModel.class
TemplateModel.class
TemplateModel.class
TemplateModel.class
TemplateModel.class 
TemplateModel.class
TemplateModel.class 

PageModel.class
PageModel.class
PageModel.class
PageModel.class 
PageModel.class 
PageModel.class
PageModel.class

ValueTypeModel.class
EffortTypeModel.class
SimpleAttachmentModel.class
CardModel.class
CardTypeModel.class
PersonModel.class
EmailDetailsModel.class

EffortModel.class
ValueModel.class

PermissionModel.class

GroupModel.class
GroupModel.class

PersonModel.class
RouteModel.class
RouteModel.class
RouteModel.class

ProcessStepModel.class
ProcessStepModel.class
ProcessStepModel.class
ProcessStepModel.class
ProcessStepModel.class
ProcessStepModel.class
ProcessStepModel.class
ProcessStepModel.class
ProcessStepModel.class
ProcessStepModel.class

ProcessStepModel.class
ProcessStepModel.class

ProcessStepReferenceModel.class
ProcessStepReferenceModel.class
ProcessStepReferenceModel.class
ProcessStepReferenceModel.class
ProcessStepReferenceModel.class
ProcessStepReferenceModel.class
ProcessStepReferenceModel.class
ProcessStepReferenceModel.class
ProcessStepReferenceModel.class
ProcessStepReferenceModel.class
ProcessStepReferenceModel.class
ProcessStepReferenceModel.class
*/
