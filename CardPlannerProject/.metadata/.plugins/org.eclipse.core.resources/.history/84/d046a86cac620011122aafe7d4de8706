package uk.co.itstherules.cardplanner.view.active;

import java.io.IOException;
import java.util.Set;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDataFormat;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import uk.co.itstherules.cardplanner.model.CardModel;
import uk.co.itstherules.cardplanner.model.LogModel;
import uk.co.itstherules.cardplanner.model.PersonModel;
import uk.co.itstherules.cardplanner.model.TagModel;
import uk.co.itstherules.yawf.controller.ContentType;
import uk.co.itstherules.yawf.inbound.ValuesProvider;
import uk.co.itstherules.yawf.inbound.annotations.processor.QueryKeyViolations;
import uk.co.itstherules.yawf.model.IdentifiableDeleteableModel;
import uk.co.itstherules.yawf.model.ObjectState;
import uk.co.itstherules.yawf.model.persistence.ObjectCache;
import uk.co.itstherules.yawf.modelview.ModelView;
import uk.co.itstherules.yawf.view.context.ViewContext;


public class ExcelExportXls implements ModelView {

	public String asText(ObjectCache objectCache, ValuesProvider valuesProvider, ViewContext mixInContext, QueryKeyViolations violations) {
	    throw new RuntimeException("TODO: Not yet implemented");
    }

    public void renderTo(ObjectCache objectCache, ValuesProvider valuesProvider, HttpServletResponse response, ViewContext mixInContext, QueryKeyViolations violations) {
		Set<CardModel> cards = objectCache.all(CardModel.class, ObjectState.Active);
		Set<LogModel> logs = objectCache.all(LogModel.class);

		HSSFWorkbook workBook = new HSSFWorkbook();
	    HSSFSheet cardsSheet = workBook.createSheet("Cards");
	    HSSFSheet logsSheet = workBook.createSheet("Logs");
	    HSSFCellStyle cellStyle = workBook.createCellStyle();
	    HSSFDataFormat dataFormat = workBook.createDataFormat();
	    short format = dataFormat.getFormat("dd/MM/yyyy hh:mm");
	    cellStyle.setDataFormat(format);

	    int count = 0;
	    
	    for (CardModel card : cards) {
	        HSSFRow row = cardsSheet.createRow(count);
	        row.createCell(0).setCellValue(new HSSFRichTextString(card.getIdentity()));
	        row.createCell(1).setCellValue(new HSSFRichTextString(card.getType().getTitle()));
	        row.createCell(2).setCellValue(new HSSFRichTextString(title(card.getParent())));
	        row.createCell(3).setCellValue(new HSSFRichTextString(card.getTitle()));
	        row.createCell(4).setCellValue(new HSSFRichTextString(card.getBody()));
	        row.createCell(5).setCellValue(card.getSortOrder());
	        row.createCell(6).setCellValue(new HSSFRichTextString(card.getEffort().getType().getTitle()));
	        row.createCell(7).setCellValue(card.getEffort().getType().asRate(card.getEffort().getAmount()));
	        row.createCell(8).setCellValue(new HSSFRichTextString(card.getValue().getType().getTitle()));
	        row.createCell(9).setCellValue(card.getValue().getType().asRate(card.getValue().getAmount()));
	        row.createCell(10).setCellValue(new HSSFRichTextString(printP(card.getPeople())));
	        row.createCell(11).setCellValue(new HSSFRichTextString(title(card.getStatus())));
	        row.createCell(12).setCellValue(new HSSFRichTextString(printT(card.getTags())));
	        HSSFCell cell13 = row.createCell(13);
			cell13.setCellStyle(cellStyle);
			cell13.setCellValue(card.getUpdated());
	        count++;
        }
	    count = 0;
	    for (LogModel log : logs) {
	        HSSFRow row = logsSheet.createRow(count);
	        row.createCell(0).setCellValue(new HSSFRichTextString(title(log.getCard())));
	        row.createCell(1).setCellValue(new HSSFRichTextString(title(log.getFromStatus())));
	        row.createCell(2).setCellValue(new HSSFRichTextString(log.getAction()));
	        HSSFCell cell4 = row.createCell(3);
			cell4.setCellStyle(cellStyle);
			cell4.setCellValue(log.getDate());
	        count++;
        }
        try {
        	ServletOutputStream outputStream;
	        outputStream = response.getOutputStream();
	        response.setContentType(ContentType.xls.name());
	        workBook.write(outputStream);
	        outputStream.close();
        } catch (IOException e) {
	        throw new RuntimeException(e);
        }
	}
	
	private String title(IdentifiableDeleteableModel entity) {
		if(entity!=null) return entity.getTitle();
		return "";
    }

	private String printT(Set<TagModel> tags) {
		StringBuffer buffer = new StringBuffer();
		for (TagModel object : tags) {
			buffer.append(object.getTitle());
			buffer.append(",");
		}
		if(tags.size() > 0) {
			return buffer.substring(0, buffer.length()-1);
		}
		return buffer.toString();
    }

	public String printP(Set<PersonModel> set) {
		StringBuffer buffer = new StringBuffer();
		for (PersonModel object : set) {
			buffer.append(object.getTitle());
			buffer.append(" (");
			buffer.append(object.getInitials());
			buffer.append(")");
			buffer.append(",");
		}
		if(set.size() > 0) {
			return buffer.substring(0, buffer.length()-1);
		}
		return buffer.toString();
	}

	public String getKey() {
	    return "Xls";
    }

	public String getViewTitle() { return ""; }
}
