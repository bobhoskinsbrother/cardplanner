package uk.co.itstherules.cardplanner.controller.active;

import java.io.IOException;

import javax.servlet.http.HttpServletResponse;

import uk.co.itstherules.yawf.controller.BaseController;
import uk.co.itstherules.yawf.inbound.ValuesProvider;
import uk.co.itstherules.yawf.model.persistence.ObjectCache;
import uk.co.itstherules.yawf.modelview.ModelViewRegister;

public class Csv extends BaseController {
	public void create(ObjectCache objectCache, ValuesProvider provider, HttpServletResponse response, ModelViewRegister viewFactory) throws IOException {
	}

	public void add(ObjectCache objectCache, ValuesProvider provider, HttpServletResponse response, ModelViewRegister viewFactory) throws IOException {
	}

    public void show(ObjectCache objectCache, ValuesProvider provider, HttpServletResponse response, ModelViewRegister viewFactory) throws IOException {
//        String serialized = "";
//        String title = provider.getTitle();
//        title = new Chomp(".csv").manipulate(title);
//		serialized = objectCache.metaModelSerializeInstancesOf(title);
//        new CsvView(serialized).renderTo(null, response, null);
	}

	public void list(ObjectCache objectCache, ValuesProvider provider, HttpServletResponse response, ModelViewRegister viewFactory) throws IOException {
//		String root = provider.getApplicationRoot();
//		ViewContext context = new EmptyContext();
//		Set<String> classesInDatabase = objectCache.metaModelClasses();
//		ArrayList<String> list = new ArrayList<String>(classesInDatabase);
//		Collections.sort(list);
//		context.put("classesInDatabase", list);
//		context.put("Action", new EnumArrayToEnumMapConverter().convert(Action.values()));
//		View view = new MergedTextView("csv/list.freemarker");
//		
//		
//		new TemplateCompositeModelView(false, view.asText(context, root), getTitle(), "", false).renderTo(objectCache, provider, response, null, new QueryKeyViolations());
	}

    public void update(ObjectCache objectCache, ValuesProvider provider, HttpServletResponse response, ModelViewRegister viewFactory) throws IOException {
//		String className = provider.getString("className");
//		try {
//	        Class<? extends IdentityDeleteable> typeToFind = (Class<? extends IdentityDeleteable>) Class.forName(className);
//	        IdentityDeleteable retrieved = objectCache.retrieveByIdentity(typeToFind, provider.getIdentity());
//	        new ReflectionValuesProviderBinder().bind(provider, retrieved, objectCache);
//	        objectCache.save(retrieved);
//	        response.sendRedirect(response.encodeRedirectURL(new UrlBuilder(provider.getApplicationRoot()).edit(getTitle(), "0", className)));
//        } catch (ClassNotFoundException e) {
//	        throw new RuntimeException(e);
//        }
//        
	}

    public void edit(ObjectCache objectCache, ValuesProvider provider, HttpServletResponse response, ModelViewRegister viewFactory) throws IOException {
//		String root = provider.getApplicationRoot();
//        List<Map<String, String>> serialized = new LinkedList<Map<String,String>>();
//        Map<String, Map<String, String>> metaModel = new LinkedHashMap<String, Map<String,String>>();
//        String title = provider.getTitle();
//		metaModel = objectCache.metaModelFor(title);
//		serialized = objectCache.metaModelAll(title);
//		View view = new MergedTextView("csv/edit.freemarker");
//		ViewContext context = new EmptyContext();
//		context.put("lines", serialized);
//		context.put("metaModel", metaModel);
//		context.put("title", title);
//		context.put("Action", new EnumArrayToEnumMapConverter().convert(Action.values()));
//		
//		new TemplateCompositeModelView(false, view.asText(context, root), getTitle(), "", false).renderTo(objectCache, provider, response, null, new QueryKeyViolations());
	}

	public void delete(ObjectCache objectCache, ValuesProvider provider,
	        HttpServletResponse response, ModelViewRegister viewFactory) throws IOException {
	}

}
