package uk.co.itstherules.cardplanner.controller.active;

import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletResponse;

import uk.co.itstherules.cardplanner.controller.CardPlannerBase;
import uk.co.itstherules.cardplanner.model.CardModel;
import uk.co.itstherules.cardplanner.model.atom.CardsAtomModel;
import uk.co.itstherules.cardplanner.model.business.Archiver;
import uk.co.itstherules.yawf.dispatcher.Action;
import uk.co.itstherules.yawf.inbound.ValuesProvider;
import uk.co.itstherules.yawf.inbound.annotations.processor.QueryKeyViolations;
import uk.co.itstherules.yawf.model.ObjectState;
import uk.co.itstherules.yawf.model.persistence.ObjectCache;
import uk.co.itstherules.yawf.modelview.ModelViewRegister;
import uk.co.itstherules.yawf.view.atom.AtomView;
import uk.co.itstherules.yawf.view.json.JsonView;



public final class Archived extends CardPlannerBase<CardModel> {

	@Override public CardModel getDefaultModel(ObjectCache objectCache) { return new CardModel().defaultSetup(objectCache); }
	
	@Action("Update") @Override public void update(ObjectCache objectCache, ValuesProvider provider, HttpServletResponse response, ModelViewRegister viewFactory) throws IOException {
		Set<CardModel> all = objectCache.all(CardModel.class, "identity", provider.getIdentity());
    	if(provider.getBoolean("archive", Boolean.FALSE).booleanValue()) {
    		for (CardModel model : all) {
    			new Archiver().archive(objectCache, model);
            }
    	} else {
    		for (CardModel model : all) {
    			new Archiver().deArchive(objectCache, model);
            }
    	}
    	try {
    		response.sendRedirect(response.encodeRedirectURL(provider.getString("redirect")));
    	} catch (IOException e) {
    		throw new RuntimeException(e);
    	}
	}
	
	@Override
	@Action("Feed") public void feed(ObjectCache cache, ValuesProvider provider, HttpServletResponse response, ModelViewRegister viewFactory) throws IOException {
        Set<CardModel> cards = cache.all(CardModel.class, ObjectState.Archived);
        Map<String, Object> objects = new HashMap<String, Object>();
        objects.put("cards", cards);
        new JsonView(objects, "people", "facts", "tags").renderTo(null, response, provider.getApplicationRoot());
    }

	@Action("Atom") public void atom(ObjectCache cache, ValuesProvider provider, HttpServletResponse response, ModelViewRegister viewFactory) throws IOException {
        Set<CardModel> cards = new LinkedHashSet<CardModel>(cache.all(CardModel.class, ObjectState.Archived));
        String root = provider.getApplicationRoot();
        new AtomView(new CardsAtomModel("List Archived Cards", "", root, cards)).renderTo(null, response, root);
    }

    @Action("List") public void list(ObjectCache objectCache, ValuesProvider provider, HttpServletResponse response, ModelViewRegister viewFactory) throws IOException {
		viewFactory.get("ArchivedList").renderTo(objectCache, provider, response, null, new QueryKeyViolations());
	}

	@Override
    protected void changeView(ObjectCache objectCache, ValuesProvider provider, HttpServletResponse response, ModelViewRegister viewFactory, String action, CardModel object, QueryKeyViolations violations) throws IOException { }


}
