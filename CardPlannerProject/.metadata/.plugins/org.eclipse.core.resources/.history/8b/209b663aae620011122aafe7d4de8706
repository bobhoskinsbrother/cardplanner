package uk.co.itstherules.yawf.inbound.binders;

import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import uk.co.itstherules.yawf.inbound.ValuesProvider;
import uk.co.itstherules.yawf.inbound.annotations.processor.BaseValuesProviderBinder;
import uk.co.itstherules.yawf.inbound.annotations.processor.QueryKeyViolations;
import uk.co.itstherules.yawf.inbound.binders.objectproviders.ImplementationProviderRegister;
import uk.co.itstherules.yawf.model.IdentityDeleteable;
import uk.co.itstherules.yawf.model.persistence.ObjectCache;

public class CollectionOfIdentifiablesBinder extends BaseQueryValueBinder {

	public CollectionOfIdentifiablesBinder(BaseValuesProviderBinder binder, ImplementationProviderRegister register) {
	    super(binder, register);
    }

	public void bind(Object model, Field field, String fullQueryKey,String currentQueryKey, ValuesProvider provider,ObjectCache objectCache, QueryKeyViolations violations) {
		Collection<IdentityDeleteable<?>> collection = null;
		if (field.getType().isAssignableFrom(List.class)) {
			collection = new ArrayList<IdentityDeleteable<?>>();
		} else {
			collection = new LinkedHashSet<IdentityDeleteable<?>>();
		}
		List<String> identities = provider.getList(fullQueryKey);
		for (String identity : identities) {
	        collection.add(objectCache.retrieveByIdentity(IdentityDeleteable.class, identity));
        }
		setValue(field, model, collection, violations, fullQueryKey);
	}

	public boolean canHandle(Class<?> fieldClass, Type genericType) {
		if (genericType instanceof ParameterizedType) {
			ParameterizedType parameterizedGenericType = (ParameterizedType) genericType;
			Type[] parameterGenericTypes = parameterizedGenericType.getActualTypeArguments();
			if (List.class.isAssignableFrom(fieldClass) || Set.class.isAssignableFrom(fieldClass)){
				if(parameterGenericTypes.length == 1
			        && IdentityDeleteable.class.isAssignableFrom((Class<?>)parameterGenericTypes[0])) {
					return true;
				}
			}
		}
		return false;
	}
}
